
l476-disco-libs.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008bb0  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000004c  08008d38  08008d38  00018d38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008d84  08008d84  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  08008d84  08008d84  00018d84  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008d8c  08008d8c  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008d8c  08008d8c  00018d8c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008d90  08008d90  00018d90  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  08008d94  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000a38  20000090  08008e24  00020090  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000ac8  08008e24  00020ac8  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   000258c1  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00004505  00000000  00000000  00045981  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00001878  00000000  00000000  00049e88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000016e8  00000000  00000000  0004b700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0002adb2  00000000  00000000  0004cde8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001e7d5  00000000  00000000  00077b9a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000fa29c  00000000  00000000  0009636f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  0019060b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000068e4  00000000  00000000  00190660  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000090 	.word	0x20000090
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08008d20 	.word	0x08008d20

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000094 	.word	0x20000094
 80001c4:	08008d20 	.word	0x08008d20

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b96e 	b.w	80004bc <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468c      	mov	ip, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	f040 8083 	bne.w	800030e <__udivmoddi4+0x116>
 8000208:	428a      	cmp	r2, r1
 800020a:	4617      	mov	r7, r2
 800020c:	d947      	bls.n	800029e <__udivmoddi4+0xa6>
 800020e:	fab2 f282 	clz	r2, r2
 8000212:	b142      	cbz	r2, 8000226 <__udivmoddi4+0x2e>
 8000214:	f1c2 0020 	rsb	r0, r2, #32
 8000218:	fa24 f000 	lsr.w	r0, r4, r0
 800021c:	4091      	lsls	r1, r2
 800021e:	4097      	lsls	r7, r2
 8000220:	ea40 0c01 	orr.w	ip, r0, r1
 8000224:	4094      	lsls	r4, r2
 8000226:	ea4f 4817 	mov.w	r8, r7, lsr #16
 800022a:	0c23      	lsrs	r3, r4, #16
 800022c:	fbbc f6f8 	udiv	r6, ip, r8
 8000230:	fa1f fe87 	uxth.w	lr, r7
 8000234:	fb08 c116 	mls	r1, r8, r6, ip
 8000238:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800023c:	fb06 f10e 	mul.w	r1, r6, lr
 8000240:	4299      	cmp	r1, r3
 8000242:	d909      	bls.n	8000258 <__udivmoddi4+0x60>
 8000244:	18fb      	adds	r3, r7, r3
 8000246:	f106 30ff 	add.w	r0, r6, #4294967295
 800024a:	f080 8119 	bcs.w	8000480 <__udivmoddi4+0x288>
 800024e:	4299      	cmp	r1, r3
 8000250:	f240 8116 	bls.w	8000480 <__udivmoddi4+0x288>
 8000254:	3e02      	subs	r6, #2
 8000256:	443b      	add	r3, r7
 8000258:	1a5b      	subs	r3, r3, r1
 800025a:	b2a4      	uxth	r4, r4
 800025c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000260:	fb08 3310 	mls	r3, r8, r0, r3
 8000264:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000268:	fb00 fe0e 	mul.w	lr, r0, lr
 800026c:	45a6      	cmp	lr, r4
 800026e:	d909      	bls.n	8000284 <__udivmoddi4+0x8c>
 8000270:	193c      	adds	r4, r7, r4
 8000272:	f100 33ff 	add.w	r3, r0, #4294967295
 8000276:	f080 8105 	bcs.w	8000484 <__udivmoddi4+0x28c>
 800027a:	45a6      	cmp	lr, r4
 800027c:	f240 8102 	bls.w	8000484 <__udivmoddi4+0x28c>
 8000280:	3802      	subs	r0, #2
 8000282:	443c      	add	r4, r7
 8000284:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000288:	eba4 040e 	sub.w	r4, r4, lr
 800028c:	2600      	movs	r6, #0
 800028e:	b11d      	cbz	r5, 8000298 <__udivmoddi4+0xa0>
 8000290:	40d4      	lsrs	r4, r2
 8000292:	2300      	movs	r3, #0
 8000294:	e9c5 4300 	strd	r4, r3, [r5]
 8000298:	4631      	mov	r1, r6
 800029a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800029e:	b902      	cbnz	r2, 80002a2 <__udivmoddi4+0xaa>
 80002a0:	deff      	udf	#255	; 0xff
 80002a2:	fab2 f282 	clz	r2, r2
 80002a6:	2a00      	cmp	r2, #0
 80002a8:	d150      	bne.n	800034c <__udivmoddi4+0x154>
 80002aa:	1bcb      	subs	r3, r1, r7
 80002ac:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 80002b0:	fa1f f887 	uxth.w	r8, r7
 80002b4:	2601      	movs	r6, #1
 80002b6:	fbb3 fcfe 	udiv	ip, r3, lr
 80002ba:	0c21      	lsrs	r1, r4, #16
 80002bc:	fb0e 331c 	mls	r3, lr, ip, r3
 80002c0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80002c4:	fb08 f30c 	mul.w	r3, r8, ip
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d907      	bls.n	80002dc <__udivmoddi4+0xe4>
 80002cc:	1879      	adds	r1, r7, r1
 80002ce:	f10c 30ff 	add.w	r0, ip, #4294967295
 80002d2:	d202      	bcs.n	80002da <__udivmoddi4+0xe2>
 80002d4:	428b      	cmp	r3, r1
 80002d6:	f200 80e9 	bhi.w	80004ac <__udivmoddi4+0x2b4>
 80002da:	4684      	mov	ip, r0
 80002dc:	1ac9      	subs	r1, r1, r3
 80002de:	b2a3      	uxth	r3, r4
 80002e0:	fbb1 f0fe 	udiv	r0, r1, lr
 80002e4:	fb0e 1110 	mls	r1, lr, r0, r1
 80002e8:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 80002ec:	fb08 f800 	mul.w	r8, r8, r0
 80002f0:	45a0      	cmp	r8, r4
 80002f2:	d907      	bls.n	8000304 <__udivmoddi4+0x10c>
 80002f4:	193c      	adds	r4, r7, r4
 80002f6:	f100 33ff 	add.w	r3, r0, #4294967295
 80002fa:	d202      	bcs.n	8000302 <__udivmoddi4+0x10a>
 80002fc:	45a0      	cmp	r8, r4
 80002fe:	f200 80d9 	bhi.w	80004b4 <__udivmoddi4+0x2bc>
 8000302:	4618      	mov	r0, r3
 8000304:	eba4 0408 	sub.w	r4, r4, r8
 8000308:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 800030c:	e7bf      	b.n	800028e <__udivmoddi4+0x96>
 800030e:	428b      	cmp	r3, r1
 8000310:	d909      	bls.n	8000326 <__udivmoddi4+0x12e>
 8000312:	2d00      	cmp	r5, #0
 8000314:	f000 80b1 	beq.w	800047a <__udivmoddi4+0x282>
 8000318:	2600      	movs	r6, #0
 800031a:	e9c5 0100 	strd	r0, r1, [r5]
 800031e:	4630      	mov	r0, r6
 8000320:	4631      	mov	r1, r6
 8000322:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000326:	fab3 f683 	clz	r6, r3
 800032a:	2e00      	cmp	r6, #0
 800032c:	d14a      	bne.n	80003c4 <__udivmoddi4+0x1cc>
 800032e:	428b      	cmp	r3, r1
 8000330:	d302      	bcc.n	8000338 <__udivmoddi4+0x140>
 8000332:	4282      	cmp	r2, r0
 8000334:	f200 80b8 	bhi.w	80004a8 <__udivmoddi4+0x2b0>
 8000338:	1a84      	subs	r4, r0, r2
 800033a:	eb61 0103 	sbc.w	r1, r1, r3
 800033e:	2001      	movs	r0, #1
 8000340:	468c      	mov	ip, r1
 8000342:	2d00      	cmp	r5, #0
 8000344:	d0a8      	beq.n	8000298 <__udivmoddi4+0xa0>
 8000346:	e9c5 4c00 	strd	r4, ip, [r5]
 800034a:	e7a5      	b.n	8000298 <__udivmoddi4+0xa0>
 800034c:	f1c2 0320 	rsb	r3, r2, #32
 8000350:	fa20 f603 	lsr.w	r6, r0, r3
 8000354:	4097      	lsls	r7, r2
 8000356:	fa01 f002 	lsl.w	r0, r1, r2
 800035a:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 800035e:	40d9      	lsrs	r1, r3
 8000360:	4330      	orrs	r0, r6
 8000362:	0c03      	lsrs	r3, r0, #16
 8000364:	fbb1 f6fe 	udiv	r6, r1, lr
 8000368:	fa1f f887 	uxth.w	r8, r7
 800036c:	fb0e 1116 	mls	r1, lr, r6, r1
 8000370:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000374:	fb06 f108 	mul.w	r1, r6, r8
 8000378:	4299      	cmp	r1, r3
 800037a:	fa04 f402 	lsl.w	r4, r4, r2
 800037e:	d909      	bls.n	8000394 <__udivmoddi4+0x19c>
 8000380:	18fb      	adds	r3, r7, r3
 8000382:	f106 3cff 	add.w	ip, r6, #4294967295
 8000386:	f080 808d 	bcs.w	80004a4 <__udivmoddi4+0x2ac>
 800038a:	4299      	cmp	r1, r3
 800038c:	f240 808a 	bls.w	80004a4 <__udivmoddi4+0x2ac>
 8000390:	3e02      	subs	r6, #2
 8000392:	443b      	add	r3, r7
 8000394:	1a5b      	subs	r3, r3, r1
 8000396:	b281      	uxth	r1, r0
 8000398:	fbb3 f0fe 	udiv	r0, r3, lr
 800039c:	fb0e 3310 	mls	r3, lr, r0, r3
 80003a0:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80003a4:	fb00 f308 	mul.w	r3, r0, r8
 80003a8:	428b      	cmp	r3, r1
 80003aa:	d907      	bls.n	80003bc <__udivmoddi4+0x1c4>
 80003ac:	1879      	adds	r1, r7, r1
 80003ae:	f100 3cff 	add.w	ip, r0, #4294967295
 80003b2:	d273      	bcs.n	800049c <__udivmoddi4+0x2a4>
 80003b4:	428b      	cmp	r3, r1
 80003b6:	d971      	bls.n	800049c <__udivmoddi4+0x2a4>
 80003b8:	3802      	subs	r0, #2
 80003ba:	4439      	add	r1, r7
 80003bc:	1acb      	subs	r3, r1, r3
 80003be:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 80003c2:	e778      	b.n	80002b6 <__udivmoddi4+0xbe>
 80003c4:	f1c6 0c20 	rsb	ip, r6, #32
 80003c8:	fa03 f406 	lsl.w	r4, r3, r6
 80003cc:	fa22 f30c 	lsr.w	r3, r2, ip
 80003d0:	431c      	orrs	r4, r3
 80003d2:	fa20 f70c 	lsr.w	r7, r0, ip
 80003d6:	fa01 f306 	lsl.w	r3, r1, r6
 80003da:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 80003de:	fa21 f10c 	lsr.w	r1, r1, ip
 80003e2:	431f      	orrs	r7, r3
 80003e4:	0c3b      	lsrs	r3, r7, #16
 80003e6:	fbb1 f9fe 	udiv	r9, r1, lr
 80003ea:	fa1f f884 	uxth.w	r8, r4
 80003ee:	fb0e 1119 	mls	r1, lr, r9, r1
 80003f2:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 80003f6:	fb09 fa08 	mul.w	sl, r9, r8
 80003fa:	458a      	cmp	sl, r1
 80003fc:	fa02 f206 	lsl.w	r2, r2, r6
 8000400:	fa00 f306 	lsl.w	r3, r0, r6
 8000404:	d908      	bls.n	8000418 <__udivmoddi4+0x220>
 8000406:	1861      	adds	r1, r4, r1
 8000408:	f109 30ff 	add.w	r0, r9, #4294967295
 800040c:	d248      	bcs.n	80004a0 <__udivmoddi4+0x2a8>
 800040e:	458a      	cmp	sl, r1
 8000410:	d946      	bls.n	80004a0 <__udivmoddi4+0x2a8>
 8000412:	f1a9 0902 	sub.w	r9, r9, #2
 8000416:	4421      	add	r1, r4
 8000418:	eba1 010a 	sub.w	r1, r1, sl
 800041c:	b2bf      	uxth	r7, r7
 800041e:	fbb1 f0fe 	udiv	r0, r1, lr
 8000422:	fb0e 1110 	mls	r1, lr, r0, r1
 8000426:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 800042a:	fb00 f808 	mul.w	r8, r0, r8
 800042e:	45b8      	cmp	r8, r7
 8000430:	d907      	bls.n	8000442 <__udivmoddi4+0x24a>
 8000432:	19e7      	adds	r7, r4, r7
 8000434:	f100 31ff 	add.w	r1, r0, #4294967295
 8000438:	d22e      	bcs.n	8000498 <__udivmoddi4+0x2a0>
 800043a:	45b8      	cmp	r8, r7
 800043c:	d92c      	bls.n	8000498 <__udivmoddi4+0x2a0>
 800043e:	3802      	subs	r0, #2
 8000440:	4427      	add	r7, r4
 8000442:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000446:	eba7 0708 	sub.w	r7, r7, r8
 800044a:	fba0 8902 	umull	r8, r9, r0, r2
 800044e:	454f      	cmp	r7, r9
 8000450:	46c6      	mov	lr, r8
 8000452:	4649      	mov	r1, r9
 8000454:	d31a      	bcc.n	800048c <__udivmoddi4+0x294>
 8000456:	d017      	beq.n	8000488 <__udivmoddi4+0x290>
 8000458:	b15d      	cbz	r5, 8000472 <__udivmoddi4+0x27a>
 800045a:	ebb3 020e 	subs.w	r2, r3, lr
 800045e:	eb67 0701 	sbc.w	r7, r7, r1
 8000462:	fa07 fc0c 	lsl.w	ip, r7, ip
 8000466:	40f2      	lsrs	r2, r6
 8000468:	ea4c 0202 	orr.w	r2, ip, r2
 800046c:	40f7      	lsrs	r7, r6
 800046e:	e9c5 2700 	strd	r2, r7, [r5]
 8000472:	2600      	movs	r6, #0
 8000474:	4631      	mov	r1, r6
 8000476:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047a:	462e      	mov	r6, r5
 800047c:	4628      	mov	r0, r5
 800047e:	e70b      	b.n	8000298 <__udivmoddi4+0xa0>
 8000480:	4606      	mov	r6, r0
 8000482:	e6e9      	b.n	8000258 <__udivmoddi4+0x60>
 8000484:	4618      	mov	r0, r3
 8000486:	e6fd      	b.n	8000284 <__udivmoddi4+0x8c>
 8000488:	4543      	cmp	r3, r8
 800048a:	d2e5      	bcs.n	8000458 <__udivmoddi4+0x260>
 800048c:	ebb8 0e02 	subs.w	lr, r8, r2
 8000490:	eb69 0104 	sbc.w	r1, r9, r4
 8000494:	3801      	subs	r0, #1
 8000496:	e7df      	b.n	8000458 <__udivmoddi4+0x260>
 8000498:	4608      	mov	r0, r1
 800049a:	e7d2      	b.n	8000442 <__udivmoddi4+0x24a>
 800049c:	4660      	mov	r0, ip
 800049e:	e78d      	b.n	80003bc <__udivmoddi4+0x1c4>
 80004a0:	4681      	mov	r9, r0
 80004a2:	e7b9      	b.n	8000418 <__udivmoddi4+0x220>
 80004a4:	4666      	mov	r6, ip
 80004a6:	e775      	b.n	8000394 <__udivmoddi4+0x19c>
 80004a8:	4630      	mov	r0, r6
 80004aa:	e74a      	b.n	8000342 <__udivmoddi4+0x14a>
 80004ac:	f1ac 0c02 	sub.w	ip, ip, #2
 80004b0:	4439      	add	r1, r7
 80004b2:	e713      	b.n	80002dc <__udivmoddi4+0xe4>
 80004b4:	3802      	subs	r0, #2
 80004b6:	443c      	add	r4, r7
 80004b8:	e724      	b.n	8000304 <__udivmoddi4+0x10c>
 80004ba:	bf00      	nop

080004bc <__aeabi_idiv0>:
 80004bc:	4770      	bx	lr
 80004be:	bf00      	nop

080004c0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80004c0:	b580      	push	{r7, lr}
 80004c2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80004c4:	f001 f830 	bl	8001528 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80004c8:	f000 f86c 	bl	80005a4 <SystemClock_Config>

/* Configure the peripherals common clocks */
  PeriphCommonClock_Config();
 80004cc:	f000 f8ce 	bl	800066c <PeriphCommonClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80004d0:	f000 fab6 	bl	8000a40 <MX_GPIO_Init>
  stm32_configure_port_a_pin_as_input(0, PULL_DOWN); // CENTRE
 80004d4:	2102      	movs	r1, #2
 80004d6:	2000      	movs	r0, #0
 80004d8:	f000 fcc9 	bl	8000e6e <stm32_configure_port_a_pin_as_input>
  stm32_configure_port_a_pin_as_input(1, PULL_DOWN); // LEFT
 80004dc:	2102      	movs	r1, #2
 80004de:	2001      	movs	r0, #1
 80004e0:	f000 fcc5 	bl	8000e6e <stm32_configure_port_a_pin_as_input>
  stm32_configure_port_a_pin_as_input(2, PULL_DOWN); // RIGHT
 80004e4:	2102      	movs	r1, #2
 80004e6:	2002      	movs	r0, #2
 80004e8:	f000 fcc1 	bl	8000e6e <stm32_configure_port_a_pin_as_input>
  stm32_configure_port_a_pin_as_input(3, PULL_DOWN); // UP
 80004ec:	2102      	movs	r1, #2
 80004ee:	2003      	movs	r0, #3
 80004f0:	f000 fcbd 	bl	8000e6e <stm32_configure_port_a_pin_as_input>
  stm32_configure_port_a_pin_as_input(5, PULL_DOWN); // DOWN
 80004f4:	2102      	movs	r1, #2
 80004f6:	2005      	movs	r0, #5
 80004f8:	f000 fcb9 	bl	8000e6e <stm32_configure_port_a_pin_as_input>

  stm32_configure_port_b_pin_as_output(2);
 80004fc:	2002      	movs	r0, #2
 80004fe:	f000 fcc9 	bl	8000e94 <stm32_configure_port_b_pin_as_output>
  stm32_configure_port_e_pin_as_output(8);
 8000502:	2008      	movs	r0, #8
 8000504:	f000 fd06 	bl	8000f14 <stm32_configure_port_e_pin_as_output>
  MX_I2C1_Init();
 8000508:	f000 f8de 	bl	80006c8 <MX_I2C1_Init>
  MX_I2C2_Init();
 800050c:	f000 f91c 	bl	8000748 <MX_I2C2_Init>
  //MX_LCD_Init();
  MX_QUADSPI_Init();
 8000510:	f000 f95a 	bl	80007c8 <MX_QUADSPI_Init>
  MX_SAI1_Init();
 8000514:	f000 f97e 	bl	8000814 <MX_SAI1_Init>
  MX_SPI2_Init();
 8000518:	f000 fa24 	bl	8000964 <MX_SPI2_Init>
  MX_USART2_UART_Init();
 800051c:	f000 fa60 	bl	80009e0 <MX_USART2_UART_Init>
  MX_USB_HOST_Init();
 8000520:	f008 f840 	bl	80085a4 <MX_USB_HOST_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */
    //MX_USB_HOST_Process();
      if (stm32_port_a_in_pin_set(0)) {
 8000524:	2000      	movs	r0, #0
 8000526:	f000 fc92 	bl	8000e4e <stm32_port_a_in_pin_set>
 800052a:	4603      	mov	r3, r0
 800052c:	2b00      	cmp	r3, #0
 800052e:	d005      	beq.n	800053c <main+0x7c>
          stm32_port_b_out_pin_toggle(2);
 8000530:	2002      	movs	r0, #2
 8000532:	f000 fcdf 	bl	8000ef4 <stm32_port_b_out_pin_toggle>
          stm32_port_e_out_pin_toggle(8);
 8000536:	2008      	movs	r0, #8
 8000538:	f000 fd1c 	bl	8000f74 <stm32_port_e_out_pin_toggle>
      }
      // if left -> red on
      if (stm32_port_a_in_pin_set(1)) {
 800053c:	2001      	movs	r0, #1
 800053e:	f000 fc86 	bl	8000e4e <stm32_port_a_in_pin_set>
 8000542:	4603      	mov	r3, r0
 8000544:	2b00      	cmp	r3, #0
 8000546:	d005      	beq.n	8000554 <main+0x94>
          stm32_port_b_out_pin_set(2);
 8000548:	2002      	movs	r0, #2
 800054a:	f000 fcb3 	bl	8000eb4 <stm32_port_b_out_pin_set>
          stm32_port_e_out_pin_clear(8);
 800054e:	2008      	movs	r0, #8
 8000550:	f000 fd00 	bl	8000f54 <stm32_port_e_out_pin_clear>
      }
      // if right -> green on
      if (stm32_port_a_in_pin_set(2)) {
 8000554:	2002      	movs	r0, #2
 8000556:	f000 fc7a 	bl	8000e4e <stm32_port_a_in_pin_set>
 800055a:	4603      	mov	r3, r0
 800055c:	2b00      	cmp	r3, #0
 800055e:	d005      	beq.n	800056c <main+0xac>
          stm32_port_b_out_pin_clear(2);
 8000560:	2002      	movs	r0, #2
 8000562:	f000 fcb7 	bl	8000ed4 <stm32_port_b_out_pin_clear>
          stm32_port_e_out_pin_set(8);
 8000566:	2008      	movs	r0, #8
 8000568:	f000 fce4 	bl	8000f34 <stm32_port_e_out_pin_set>
      }
      // if up -> both on
      if (stm32_port_a_in_pin_set(3)) {
 800056c:	2003      	movs	r0, #3
 800056e:	f000 fc6e 	bl	8000e4e <stm32_port_a_in_pin_set>
 8000572:	4603      	mov	r3, r0
 8000574:	2b00      	cmp	r3, #0
 8000576:	d005      	beq.n	8000584 <main+0xc4>
          stm32_port_b_out_pin_set(2);
 8000578:	2002      	movs	r0, #2
 800057a:	f000 fc9b 	bl	8000eb4 <stm32_port_b_out_pin_set>
          stm32_port_e_out_pin_set(8);
 800057e:	2008      	movs	r0, #8
 8000580:	f000 fcd8 	bl	8000f34 <stm32_port_e_out_pin_set>
      }
      // if down -> both off
      if (stm32_port_a_in_pin_set(5)) {
 8000584:	2005      	movs	r0, #5
 8000586:	f000 fc62 	bl	8000e4e <stm32_port_a_in_pin_set>
 800058a:	4603      	mov	r3, r0
 800058c:	2b00      	cmp	r3, #0
 800058e:	d005      	beq.n	800059c <main+0xdc>
          stm32_port_b_out_pin_clear(2);
 8000590:	2002      	movs	r0, #2
 8000592:	f000 fc9f 	bl	8000ed4 <stm32_port_b_out_pin_clear>
          stm32_port_e_out_pin_clear(8);
 8000596:	2008      	movs	r0, #8
 8000598:	f000 fcdc 	bl	8000f54 <stm32_port_e_out_pin_clear>
      }
    /* Insert delay 100 ms */
    HAL_Delay(100);
 800059c:	2064      	movs	r0, #100	; 0x64
 800059e:	f001 f83f 	bl	8001620 <HAL_Delay>
      if (stm32_port_a_in_pin_set(0)) {
 80005a2:	e7bf      	b.n	8000524 <main+0x64>

080005a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80005a4:	b580      	push	{r7, lr}
 80005a6:	b096      	sub	sp, #88	; 0x58
 80005a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80005aa:	f107 0314 	add.w	r3, r7, #20
 80005ae:	2244      	movs	r2, #68	; 0x44
 80005b0:	2100      	movs	r1, #0
 80005b2:	4618      	mov	r0, r3
 80005b4:	f008 fae4 	bl	8008b80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005b8:	463b      	mov	r3, r7
 80005ba:	2200      	movs	r2, #0
 80005bc:	601a      	str	r2, [r3, #0]
 80005be:	605a      	str	r2, [r3, #4]
 80005c0:	609a      	str	r2, [r3, #8]
 80005c2:	60da      	str	r2, [r3, #12]
 80005c4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  if (HAL_PWREx_ControlVoltageScaling(PWR_REGULATOR_VOLTAGE_SCALE1) != HAL_OK)
 80005c6:	f44f 7000 	mov.w	r0, #512	; 0x200
 80005ca:	f002 ffc7 	bl	800355c <HAL_PWREx_ControlVoltageScaling>
 80005ce:	4603      	mov	r3, r0
 80005d0:	2b00      	cmp	r3, #0
 80005d2:	d001      	beq.n	80005d8 <SystemClock_Config+0x34>
  {
    Error_Handler();
 80005d4:	f000 fb48 	bl	8000c68 <Error_Handler>
  }
  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80005d8:	f002 ffa2 	bl	8003520 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_LOW);
 80005dc:	4b22      	ldr	r3, [pc, #136]	; (8000668 <SystemClock_Config+0xc4>)
 80005de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80005e2:	4a21      	ldr	r2, [pc, #132]	; (8000668 <SystemClock_Config+0xc4>)
 80005e4:	f023 0318 	bic.w	r3, r3, #24
 80005e8:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_LSI|RCC_OSCILLATORTYPE_LSE
 80005ec:	231c      	movs	r3, #28
 80005ee:	617b      	str	r3, [r7, #20]
                              |RCC_OSCILLATORTYPE_MSI;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80005f0:	2301      	movs	r3, #1
 80005f2:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.LSIState = RCC_LSI_ON;
 80005f4:	2301      	movs	r3, #1
 80005f6:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80005f8:	2301      	movs	r3, #1
 80005fa:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80005fc:	2300      	movs	r3, #0
 80005fe:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_6;
 8000600:	2360      	movs	r3, #96	; 0x60
 8000602:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000604:	2302      	movs	r3, #2
 8000606:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_MSI;
 8000608:	2301      	movs	r3, #1
 800060a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLM = 1;
 800060c:	2301      	movs	r3, #1
 800060e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLN = 20;
 8000610:	2314      	movs	r3, #20
 8000612:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV7;
 8000614:	2307      	movs	r3, #7
 8000616:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLQ = RCC_PLLQ_DIV2;
 8000618:	2302      	movs	r3, #2
 800061a:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLR = RCC_PLLR_DIV2;
 800061c:	2302      	movs	r3, #2
 800061e:	657b      	str	r3, [r7, #84]	; 0x54
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000620:	f107 0314 	add.w	r3, r7, #20
 8000624:	4618      	mov	r0, r3
 8000626:	f003 f8bb 	bl	80037a0 <HAL_RCC_OscConfig>
 800062a:	4603      	mov	r3, r0
 800062c:	2b00      	cmp	r3, #0
 800062e:	d001      	beq.n	8000634 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8000630:	f000 fb1a 	bl	8000c68 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000634:	230f      	movs	r3, #15
 8000636:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000638:	2303      	movs	r3, #3
 800063a:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV2;
 800063c:	2380      	movs	r3, #128	; 0x80
 800063e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8000640:	2300      	movs	r3, #0
 8000642:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000644:	2300      	movs	r3, #0
 8000646:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8000648:	463b      	mov	r3, r7
 800064a:	2101      	movs	r1, #1
 800064c:	4618      	mov	r0, r3
 800064e:	f003 fc81 	bl	8003f54 <HAL_RCC_ClockConfig>
 8000652:	4603      	mov	r3, r0
 8000654:	2b00      	cmp	r3, #0
 8000656:	d001      	beq.n	800065c <SystemClock_Config+0xb8>
  {
    Error_Handler();
 8000658:	f000 fb06 	bl	8000c68 <Error_Handler>
  }
  /** Enable MSI Auto calibration
  */
  HAL_RCCEx_EnableMSIPLLMode();
 800065c:	f004 fef2 	bl	8005444 <HAL_RCCEx_EnableMSIPLLMode>
}
 8000660:	bf00      	nop
 8000662:	3758      	adds	r7, #88	; 0x58
 8000664:	46bd      	mov	sp, r7
 8000666:	bd80      	pop	{r7, pc}
 8000668:	40021000 	.word	0x40021000

0800066c <PeriphCommonClock_Config>:
/**
  * @brief Peripherals Common Clock Configuration
  * @retval None
  */
void PeriphCommonClock_Config(void)
{
 800066c:	b580      	push	{r7, lr}
 800066e:	b0a2      	sub	sp, #136	; 0x88
 8000670:	af00      	add	r7, sp, #0
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000672:	463b      	mov	r3, r7
 8000674:	2288      	movs	r2, #136	; 0x88
 8000676:	2100      	movs	r1, #0
 8000678:	4618      	mov	r0, r3
 800067a:	f008 fa81 	bl	8008b80 <memset>

  /** Initializes the peripherals clock
  */
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_SAI1|RCC_PERIPHCLK_USB;
 800067e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 8000682:	603b      	str	r3, [r7, #0]
  PeriphClkInit.Sai1ClockSelection = RCC_SAI1CLKSOURCE_PLLSAI1;
 8000684:	2300      	movs	r3, #0
 8000686:	667b      	str	r3, [r7, #100]	; 0x64
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_PLLSAI1;
 8000688:	f04f 6380 	mov.w	r3, #67108864	; 0x4000000
 800068c:	66fb      	str	r3, [r7, #108]	; 0x6c
  PeriphClkInit.PLLSAI1.PLLSAI1Source = RCC_PLLSOURCE_MSI;
 800068e:	2301      	movs	r3, #1
 8000690:	607b      	str	r3, [r7, #4]
  PeriphClkInit.PLLSAI1.PLLSAI1M = 1;
 8000692:	2301      	movs	r3, #1
 8000694:	60bb      	str	r3, [r7, #8]
  PeriphClkInit.PLLSAI1.PLLSAI1N = 24;
 8000696:	2318      	movs	r3, #24
 8000698:	60fb      	str	r3, [r7, #12]
  PeriphClkInit.PLLSAI1.PLLSAI1P = RCC_PLLP_DIV7;
 800069a:	2307      	movs	r3, #7
 800069c:	613b      	str	r3, [r7, #16]
  PeriphClkInit.PLLSAI1.PLLSAI1Q = RCC_PLLQ_DIV2;
 800069e:	2302      	movs	r3, #2
 80006a0:	617b      	str	r3, [r7, #20]
  PeriphClkInit.PLLSAI1.PLLSAI1R = RCC_PLLR_DIV2;
 80006a2:	2302      	movs	r3, #2
 80006a4:	61bb      	str	r3, [r7, #24]
  PeriphClkInit.PLLSAI1.PLLSAI1ClockOut = RCC_PLLSAI1_SAI1CLK|RCC_PLLSAI1_48M2CLK;
 80006a6:	f44f 1388 	mov.w	r3, #1114112	; 0x110000
 80006aa:	61fb      	str	r3, [r7, #28]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 80006ac:	463b      	mov	r3, r7
 80006ae:	4618      	mov	r0, r3
 80006b0:	f003 fe74 	bl	800439c <HAL_RCCEx_PeriphCLKConfig>
 80006b4:	4603      	mov	r3, r0
 80006b6:	2b00      	cmp	r3, #0
 80006b8:	d001      	beq.n	80006be <PeriphCommonClock_Config+0x52>
  {
    Error_Handler();
 80006ba:	f000 fad5 	bl	8000c68 <Error_Handler>
  }
}
 80006be:	bf00      	nop
 80006c0:	3788      	adds	r7, #136	; 0x88
 80006c2:	46bd      	mov	sp, r7
 80006c4:	bd80      	pop	{r7, pc}
	...

080006c8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80006c8:	b580      	push	{r7, lr}
 80006ca:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80006cc:	4b1b      	ldr	r3, [pc, #108]	; (800073c <MX_I2C1_Init+0x74>)
 80006ce:	4a1c      	ldr	r2, [pc, #112]	; (8000740 <MX_I2C1_Init+0x78>)
 80006d0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00404C74;
 80006d2:	4b1a      	ldr	r3, [pc, #104]	; (800073c <MX_I2C1_Init+0x74>)
 80006d4:	4a1b      	ldr	r2, [pc, #108]	; (8000744 <MX_I2C1_Init+0x7c>)
 80006d6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 80006d8:	4b18      	ldr	r3, [pc, #96]	; (800073c <MX_I2C1_Init+0x74>)
 80006da:	2200      	movs	r2, #0
 80006dc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80006de:	4b17      	ldr	r3, [pc, #92]	; (800073c <MX_I2C1_Init+0x74>)
 80006e0:	2201      	movs	r2, #1
 80006e2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80006e4:	4b15      	ldr	r3, [pc, #84]	; (800073c <MX_I2C1_Init+0x74>)
 80006e6:	2200      	movs	r2, #0
 80006e8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 80006ea:	4b14      	ldr	r3, [pc, #80]	; (800073c <MX_I2C1_Init+0x74>)
 80006ec:	2200      	movs	r2, #0
 80006ee:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80006f0:	4b12      	ldr	r3, [pc, #72]	; (800073c <MX_I2C1_Init+0x74>)
 80006f2:	2200      	movs	r2, #0
 80006f4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80006f6:	4b11      	ldr	r3, [pc, #68]	; (800073c <MX_I2C1_Init+0x74>)
 80006f8:	2200      	movs	r2, #0
 80006fa:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80006fc:	4b0f      	ldr	r3, [pc, #60]	; (800073c <MX_I2C1_Init+0x74>)
 80006fe:	2200      	movs	r2, #0
 8000700:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000702:	480e      	ldr	r0, [pc, #56]	; (800073c <MX_I2C1_Init+0x74>)
 8000704:	f002 fde5 	bl	80032d2 <HAL_I2C_Init>
 8000708:	4603      	mov	r3, r0
 800070a:	2b00      	cmp	r3, #0
 800070c:	d001      	beq.n	8000712 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 800070e:	f000 faab 	bl	8000c68 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000712:	2100      	movs	r1, #0
 8000714:	4809      	ldr	r0, [pc, #36]	; (800073c <MX_I2C1_Init+0x74>)
 8000716:	f002 fe6b 	bl	80033f0 <HAL_I2CEx_ConfigAnalogFilter>
 800071a:	4603      	mov	r3, r0
 800071c:	2b00      	cmp	r3, #0
 800071e:	d001      	beq.n	8000724 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000720:	f000 faa2 	bl	8000c68 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000724:	2100      	movs	r1, #0
 8000726:	4805      	ldr	r0, [pc, #20]	; (800073c <MX_I2C1_Init+0x74>)
 8000728:	f002 fead 	bl	8003486 <HAL_I2CEx_ConfigDigitalFilter>
 800072c:	4603      	mov	r3, r0
 800072e:	2b00      	cmp	r3, #0
 8000730:	d001      	beq.n	8000736 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000732:	f000 fa99 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000736:	bf00      	nop
 8000738:	bd80      	pop	{r7, pc}
 800073a:	bf00      	nop
 800073c:	20000124 	.word	0x20000124
 8000740:	40005400 	.word	0x40005400
 8000744:	00404c74 	.word	0x00404c74

08000748 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8000748:	b580      	push	{r7, lr}
 800074a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 800074c:	4b1b      	ldr	r3, [pc, #108]	; (80007bc <MX_I2C2_Init+0x74>)
 800074e:	4a1c      	ldr	r2, [pc, #112]	; (80007c0 <MX_I2C2_Init+0x78>)
 8000750:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00404C74;
 8000752:	4b1a      	ldr	r3, [pc, #104]	; (80007bc <MX_I2C2_Init+0x74>)
 8000754:	4a1b      	ldr	r2, [pc, #108]	; (80007c4 <MX_I2C2_Init+0x7c>)
 8000756:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000758:	4b18      	ldr	r3, [pc, #96]	; (80007bc <MX_I2C2_Init+0x74>)
 800075a:	2200      	movs	r2, #0
 800075c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 800075e:	4b17      	ldr	r3, [pc, #92]	; (80007bc <MX_I2C2_Init+0x74>)
 8000760:	2201      	movs	r2, #1
 8000762:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000764:	4b15      	ldr	r3, [pc, #84]	; (80007bc <MX_I2C2_Init+0x74>)
 8000766:	2200      	movs	r2, #0
 8000768:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 800076a:	4b14      	ldr	r3, [pc, #80]	; (80007bc <MX_I2C2_Init+0x74>)
 800076c:	2200      	movs	r2, #0
 800076e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000770:	4b12      	ldr	r3, [pc, #72]	; (80007bc <MX_I2C2_Init+0x74>)
 8000772:	2200      	movs	r2, #0
 8000774:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000776:	4b11      	ldr	r3, [pc, #68]	; (80007bc <MX_I2C2_Init+0x74>)
 8000778:	2200      	movs	r2, #0
 800077a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800077c:	4b0f      	ldr	r3, [pc, #60]	; (80007bc <MX_I2C2_Init+0x74>)
 800077e:	2200      	movs	r2, #0
 8000780:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000782:	480e      	ldr	r0, [pc, #56]	; (80007bc <MX_I2C2_Init+0x74>)
 8000784:	f002 fda5 	bl	80032d2 <HAL_I2C_Init>
 8000788:	4603      	mov	r3, r0
 800078a:	2b00      	cmp	r3, #0
 800078c:	d001      	beq.n	8000792 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 800078e:	f000 fa6b 	bl	8000c68 <Error_Handler>
  }
  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000792:	2100      	movs	r1, #0
 8000794:	4809      	ldr	r0, [pc, #36]	; (80007bc <MX_I2C2_Init+0x74>)
 8000796:	f002 fe2b 	bl	80033f0 <HAL_I2CEx_ConfigAnalogFilter>
 800079a:	4603      	mov	r3, r0
 800079c:	2b00      	cmp	r3, #0
 800079e:	d001      	beq.n	80007a4 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 80007a0:	f000 fa62 	bl	8000c68 <Error_Handler>
  }
  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 80007a4:	2100      	movs	r1, #0
 80007a6:	4805      	ldr	r0, [pc, #20]	; (80007bc <MX_I2C2_Init+0x74>)
 80007a8:	f002 fe6d 	bl	8003486 <HAL_I2CEx_ConfigDigitalFilter>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 80007b2:	f000 fa59 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80007b6:	bf00      	nop
 80007b8:	bd80      	pop	{r7, pc}
 80007ba:	bf00      	nop
 80007bc:	20000178 	.word	0x20000178
 80007c0:	40005800 	.word	0x40005800
 80007c4:	00404c74 	.word	0x00404c74

080007c8 <MX_QUADSPI_Init>:
  * @brief QUADSPI Initialization Function
  * @param None
  * @retval None
  */
static void MX_QUADSPI_Init(void)
{
 80007c8:	b580      	push	{r7, lr}
 80007ca:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN QUADSPI_Init 1 */

  /* USER CODE END QUADSPI_Init 1 */
  /* QUADSPI parameter configuration*/
  hqspi.Instance = QUADSPI;
 80007cc:	4b0f      	ldr	r3, [pc, #60]	; (800080c <MX_QUADSPI_Init+0x44>)
 80007ce:	4a10      	ldr	r2, [pc, #64]	; (8000810 <MX_QUADSPI_Init+0x48>)
 80007d0:	601a      	str	r2, [r3, #0]
  hqspi.Init.ClockPrescaler = 1;
 80007d2:	4b0e      	ldr	r3, [pc, #56]	; (800080c <MX_QUADSPI_Init+0x44>)
 80007d4:	2201      	movs	r2, #1
 80007d6:	605a      	str	r2, [r3, #4]
  hqspi.Init.FifoThreshold = 4;
 80007d8:	4b0c      	ldr	r3, [pc, #48]	; (800080c <MX_QUADSPI_Init+0x44>)
 80007da:	2204      	movs	r2, #4
 80007dc:	609a      	str	r2, [r3, #8]
  hqspi.Init.SampleShifting = QSPI_SAMPLE_SHIFTING_HALFCYCLE;
 80007de:	4b0b      	ldr	r3, [pc, #44]	; (800080c <MX_QUADSPI_Init+0x44>)
 80007e0:	2210      	movs	r2, #16
 80007e2:	60da      	str	r2, [r3, #12]
  hqspi.Init.FlashSize = 24;
 80007e4:	4b09      	ldr	r3, [pc, #36]	; (800080c <MX_QUADSPI_Init+0x44>)
 80007e6:	2218      	movs	r2, #24
 80007e8:	611a      	str	r2, [r3, #16]
  hqspi.Init.ChipSelectHighTime = QSPI_CS_HIGH_TIME_1_CYCLE;
 80007ea:	4b08      	ldr	r3, [pc, #32]	; (800080c <MX_QUADSPI_Init+0x44>)
 80007ec:	2200      	movs	r2, #0
 80007ee:	615a      	str	r2, [r3, #20]
  hqspi.Init.ClockMode = QSPI_CLOCK_MODE_0;
 80007f0:	4b06      	ldr	r3, [pc, #24]	; (800080c <MX_QUADSPI_Init+0x44>)
 80007f2:	2200      	movs	r2, #0
 80007f4:	619a      	str	r2, [r3, #24]
  if (HAL_QSPI_Init(&hqspi) != HAL_OK)
 80007f6:	4805      	ldr	r0, [pc, #20]	; (800080c <MX_QUADSPI_Init+0x44>)
 80007f8:	f002 ff16 	bl	8003628 <HAL_QSPI_Init>
 80007fc:	4603      	mov	r3, r0
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d001      	beq.n	8000806 <MX_QUADSPI_Init+0x3e>
  {
    Error_Handler();
 8000802:	f000 fa31 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN QUADSPI_Init 2 */

  /* USER CODE END QUADSPI_Init 2 */

}
 8000806:	bf00      	nop
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	20000394 	.word	0x20000394
 8000810:	a0001000 	.word	0xa0001000

08000814 <MX_SAI1_Init>:
  * @brief SAI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SAI1_Init(void)
{
 8000814:	b580      	push	{r7, lr}
 8000816:	af00      	add	r7, sp, #0
  /* USER CODE END SAI1_Init 0 */

  /* USER CODE BEGIN SAI1_Init 1 */

  /* USER CODE END SAI1_Init 1 */
  hsai_BlockA1.Instance = SAI1_Block_A;
 8000818:	4b4d      	ldr	r3, [pc, #308]	; (8000950 <MX_SAI1_Init+0x13c>)
 800081a:	4a4e      	ldr	r2, [pc, #312]	; (8000954 <MX_SAI1_Init+0x140>)
 800081c:	601a      	str	r2, [r3, #0]
  hsai_BlockA1.Init.Protocol = SAI_FREE_PROTOCOL;
 800081e:	4b4c      	ldr	r3, [pc, #304]	; (8000950 <MX_SAI1_Init+0x13c>)
 8000820:	2200      	movs	r2, #0
 8000822:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockA1.Init.AudioMode = SAI_MODEMASTER_TX;
 8000824:	4b4a      	ldr	r3, [pc, #296]	; (8000950 <MX_SAI1_Init+0x13c>)
 8000826:	2200      	movs	r2, #0
 8000828:	605a      	str	r2, [r3, #4]
  hsai_BlockA1.Init.DataSize = SAI_DATASIZE_8;
 800082a:	4b49      	ldr	r3, [pc, #292]	; (8000950 <MX_SAI1_Init+0x13c>)
 800082c:	2240      	movs	r2, #64	; 0x40
 800082e:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockA1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 8000830:	4b47      	ldr	r3, [pc, #284]	; (8000950 <MX_SAI1_Init+0x13c>)
 8000832:	2200      	movs	r2, #0
 8000834:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockA1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 8000836:	4b46      	ldr	r3, [pc, #280]	; (8000950 <MX_SAI1_Init+0x13c>)
 8000838:	2200      	movs	r2, #0
 800083a:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockA1.Init.Synchro = SAI_ASYNCHRONOUS;
 800083c:	4b44      	ldr	r3, [pc, #272]	; (8000950 <MX_SAI1_Init+0x13c>)
 800083e:	2200      	movs	r2, #0
 8000840:	609a      	str	r2, [r3, #8]
  hsai_BlockA1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 8000842:	4b43      	ldr	r3, [pc, #268]	; (8000950 <MX_SAI1_Init+0x13c>)
 8000844:	2200      	movs	r2, #0
 8000846:	611a      	str	r2, [r3, #16]
  hsai_BlockA1.Init.NoDivider = SAI_MASTERDIVIDER_ENABLE;
 8000848:	4b41      	ldr	r3, [pc, #260]	; (8000950 <MX_SAI1_Init+0x13c>)
 800084a:	2200      	movs	r2, #0
 800084c:	615a      	str	r2, [r3, #20]
  hsai_BlockA1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 800084e:	4b40      	ldr	r3, [pc, #256]	; (8000950 <MX_SAI1_Init+0x13c>)
 8000850:	2200      	movs	r2, #0
 8000852:	619a      	str	r2, [r3, #24]
  hsai_BlockA1.Init.AudioFrequency = SAI_AUDIO_FREQUENCY_192K;
 8000854:	4b3e      	ldr	r3, [pc, #248]	; (8000950 <MX_SAI1_Init+0x13c>)
 8000856:	4a40      	ldr	r2, [pc, #256]	; (8000958 <MX_SAI1_Init+0x144>)
 8000858:	61da      	str	r2, [r3, #28]
  hsai_BlockA1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 800085a:	4b3d      	ldr	r3, [pc, #244]	; (8000950 <MX_SAI1_Init+0x13c>)
 800085c:	2200      	movs	r2, #0
 800085e:	60da      	str	r2, [r3, #12]
  hsai_BlockA1.Init.MonoStereoMode = SAI_STEREOMODE;
 8000860:	4b3b      	ldr	r3, [pc, #236]	; (8000950 <MX_SAI1_Init+0x13c>)
 8000862:	2200      	movs	r2, #0
 8000864:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockA1.Init.CompandingMode = SAI_NOCOMPANDING;
 8000866:	4b3a      	ldr	r3, [pc, #232]	; (8000950 <MX_SAI1_Init+0x13c>)
 8000868:	2200      	movs	r2, #0
 800086a:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockA1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 800086c:	4b38      	ldr	r3, [pc, #224]	; (8000950 <MX_SAI1_Init+0x13c>)
 800086e:	2200      	movs	r2, #0
 8000870:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockA1.FrameInit.FrameLength = 8;
 8000872:	4b37      	ldr	r3, [pc, #220]	; (8000950 <MX_SAI1_Init+0x13c>)
 8000874:	2208      	movs	r2, #8
 8000876:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockA1.FrameInit.ActiveFrameLength = 1;
 8000878:	4b35      	ldr	r3, [pc, #212]	; (8000950 <MX_SAI1_Init+0x13c>)
 800087a:	2201      	movs	r2, #1
 800087c:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockA1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 800087e:	4b34      	ldr	r3, [pc, #208]	; (8000950 <MX_SAI1_Init+0x13c>)
 8000880:	2200      	movs	r2, #0
 8000882:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockA1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000884:	4b32      	ldr	r3, [pc, #200]	; (8000950 <MX_SAI1_Init+0x13c>)
 8000886:	2200      	movs	r2, #0
 8000888:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockA1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800088a:	4b31      	ldr	r3, [pc, #196]	; (8000950 <MX_SAI1_Init+0x13c>)
 800088c:	2200      	movs	r2, #0
 800088e:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockA1.SlotInit.FirstBitOffset = 0;
 8000890:	4b2f      	ldr	r3, [pc, #188]	; (8000950 <MX_SAI1_Init+0x13c>)
 8000892:	2200      	movs	r2, #0
 8000894:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockA1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 8000896:	4b2e      	ldr	r3, [pc, #184]	; (8000950 <MX_SAI1_Init+0x13c>)
 8000898:	2200      	movs	r2, #0
 800089a:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockA1.SlotInit.SlotNumber = 1;
 800089c:	4b2c      	ldr	r3, [pc, #176]	; (8000950 <MX_SAI1_Init+0x13c>)
 800089e:	2201      	movs	r2, #1
 80008a0:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockA1.SlotInit.SlotActive = 0x00000000;
 80008a2:	4b2b      	ldr	r3, [pc, #172]	; (8000950 <MX_SAI1_Init+0x13c>)
 80008a4:	2200      	movs	r2, #0
 80008a6:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockA1) != HAL_OK)
 80008a8:	4829      	ldr	r0, [pc, #164]	; (8000950 <MX_SAI1_Init+0x13c>)
 80008aa:	f005 f89d 	bl	80059e8 <HAL_SAI_Init>
 80008ae:	4603      	mov	r3, r0
 80008b0:	2b00      	cmp	r3, #0
 80008b2:	d001      	beq.n	80008b8 <MX_SAI1_Init+0xa4>
  {
    Error_Handler();
 80008b4:	f000 f9d8 	bl	8000c68 <Error_Handler>
  }
  hsai_BlockB1.Instance = SAI1_Block_B;
 80008b8:	4b28      	ldr	r3, [pc, #160]	; (800095c <MX_SAI1_Init+0x148>)
 80008ba:	4a29      	ldr	r2, [pc, #164]	; (8000960 <MX_SAI1_Init+0x14c>)
 80008bc:	601a      	str	r2, [r3, #0]
  hsai_BlockB1.Init.Protocol = SAI_FREE_PROTOCOL;
 80008be:	4b27      	ldr	r3, [pc, #156]	; (800095c <MX_SAI1_Init+0x148>)
 80008c0:	2200      	movs	r2, #0
 80008c2:	631a      	str	r2, [r3, #48]	; 0x30
  hsai_BlockB1.Init.AudioMode = SAI_MODESLAVE_RX;
 80008c4:	4b25      	ldr	r3, [pc, #148]	; (800095c <MX_SAI1_Init+0x148>)
 80008c6:	2203      	movs	r2, #3
 80008c8:	605a      	str	r2, [r3, #4]
  hsai_BlockB1.Init.DataSize = SAI_DATASIZE_8;
 80008ca:	4b24      	ldr	r3, [pc, #144]	; (800095c <MX_SAI1_Init+0x148>)
 80008cc:	2240      	movs	r2, #64	; 0x40
 80008ce:	635a      	str	r2, [r3, #52]	; 0x34
  hsai_BlockB1.Init.FirstBit = SAI_FIRSTBIT_MSB;
 80008d0:	4b22      	ldr	r3, [pc, #136]	; (800095c <MX_SAI1_Init+0x148>)
 80008d2:	2200      	movs	r2, #0
 80008d4:	639a      	str	r2, [r3, #56]	; 0x38
  hsai_BlockB1.Init.ClockStrobing = SAI_CLOCKSTROBING_FALLINGEDGE;
 80008d6:	4b21      	ldr	r3, [pc, #132]	; (800095c <MX_SAI1_Init+0x148>)
 80008d8:	2200      	movs	r2, #0
 80008da:	63da      	str	r2, [r3, #60]	; 0x3c
  hsai_BlockB1.Init.Synchro = SAI_SYNCHRONOUS;
 80008dc:	4b1f      	ldr	r3, [pc, #124]	; (800095c <MX_SAI1_Init+0x148>)
 80008de:	2201      	movs	r2, #1
 80008e0:	609a      	str	r2, [r3, #8]
  hsai_BlockB1.Init.OutputDrive = SAI_OUTPUTDRIVE_DISABLE;
 80008e2:	4b1e      	ldr	r3, [pc, #120]	; (800095c <MX_SAI1_Init+0x148>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	611a      	str	r2, [r3, #16]
  hsai_BlockB1.Init.FIFOThreshold = SAI_FIFOTHRESHOLD_EMPTY;
 80008e8:	4b1c      	ldr	r3, [pc, #112]	; (800095c <MX_SAI1_Init+0x148>)
 80008ea:	2200      	movs	r2, #0
 80008ec:	619a      	str	r2, [r3, #24]
  hsai_BlockB1.Init.SynchroExt = SAI_SYNCEXT_DISABLE;
 80008ee:	4b1b      	ldr	r3, [pc, #108]	; (800095c <MX_SAI1_Init+0x148>)
 80008f0:	2200      	movs	r2, #0
 80008f2:	60da      	str	r2, [r3, #12]
  hsai_BlockB1.Init.MonoStereoMode = SAI_STEREOMODE;
 80008f4:	4b19      	ldr	r3, [pc, #100]	; (800095c <MX_SAI1_Init+0x148>)
 80008f6:	2200      	movs	r2, #0
 80008f8:	625a      	str	r2, [r3, #36]	; 0x24
  hsai_BlockB1.Init.CompandingMode = SAI_NOCOMPANDING;
 80008fa:	4b18      	ldr	r3, [pc, #96]	; (800095c <MX_SAI1_Init+0x148>)
 80008fc:	2200      	movs	r2, #0
 80008fe:	629a      	str	r2, [r3, #40]	; 0x28
  hsai_BlockB1.Init.TriState = SAI_OUTPUT_NOTRELEASED;
 8000900:	4b16      	ldr	r3, [pc, #88]	; (800095c <MX_SAI1_Init+0x148>)
 8000902:	2200      	movs	r2, #0
 8000904:	62da      	str	r2, [r3, #44]	; 0x2c
  hsai_BlockB1.FrameInit.FrameLength = 8;
 8000906:	4b15      	ldr	r3, [pc, #84]	; (800095c <MX_SAI1_Init+0x148>)
 8000908:	2208      	movs	r2, #8
 800090a:	641a      	str	r2, [r3, #64]	; 0x40
  hsai_BlockB1.FrameInit.ActiveFrameLength = 1;
 800090c:	4b13      	ldr	r3, [pc, #76]	; (800095c <MX_SAI1_Init+0x148>)
 800090e:	2201      	movs	r2, #1
 8000910:	645a      	str	r2, [r3, #68]	; 0x44
  hsai_BlockB1.FrameInit.FSDefinition = SAI_FS_STARTFRAME;
 8000912:	4b12      	ldr	r3, [pc, #72]	; (800095c <MX_SAI1_Init+0x148>)
 8000914:	2200      	movs	r2, #0
 8000916:	649a      	str	r2, [r3, #72]	; 0x48
  hsai_BlockB1.FrameInit.FSPolarity = SAI_FS_ACTIVE_LOW;
 8000918:	4b10      	ldr	r3, [pc, #64]	; (800095c <MX_SAI1_Init+0x148>)
 800091a:	2200      	movs	r2, #0
 800091c:	64da      	str	r2, [r3, #76]	; 0x4c
  hsai_BlockB1.FrameInit.FSOffset = SAI_FS_FIRSTBIT;
 800091e:	4b0f      	ldr	r3, [pc, #60]	; (800095c <MX_SAI1_Init+0x148>)
 8000920:	2200      	movs	r2, #0
 8000922:	651a      	str	r2, [r3, #80]	; 0x50
  hsai_BlockB1.SlotInit.FirstBitOffset = 0;
 8000924:	4b0d      	ldr	r3, [pc, #52]	; (800095c <MX_SAI1_Init+0x148>)
 8000926:	2200      	movs	r2, #0
 8000928:	655a      	str	r2, [r3, #84]	; 0x54
  hsai_BlockB1.SlotInit.SlotSize = SAI_SLOTSIZE_DATASIZE;
 800092a:	4b0c      	ldr	r3, [pc, #48]	; (800095c <MX_SAI1_Init+0x148>)
 800092c:	2200      	movs	r2, #0
 800092e:	659a      	str	r2, [r3, #88]	; 0x58
  hsai_BlockB1.SlotInit.SlotNumber = 1;
 8000930:	4b0a      	ldr	r3, [pc, #40]	; (800095c <MX_SAI1_Init+0x148>)
 8000932:	2201      	movs	r2, #1
 8000934:	65da      	str	r2, [r3, #92]	; 0x5c
  hsai_BlockB1.SlotInit.SlotActive = 0x00000000;
 8000936:	4b09      	ldr	r3, [pc, #36]	; (800095c <MX_SAI1_Init+0x148>)
 8000938:	2200      	movs	r2, #0
 800093a:	661a      	str	r2, [r3, #96]	; 0x60
  if (HAL_SAI_Init(&hsai_BlockB1) != HAL_OK)
 800093c:	4807      	ldr	r0, [pc, #28]	; (800095c <MX_SAI1_Init+0x148>)
 800093e:	f005 f853 	bl	80059e8 <HAL_SAI_Init>
 8000942:	4603      	mov	r3, r0
 8000944:	2b00      	cmp	r3, #0
 8000946:	d001      	beq.n	800094c <MX_SAI1_Init+0x138>
  {
    Error_Handler();
 8000948:	f000 f98e 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN SAI1_Init 2 */

  /* USER CODE END SAI1_Init 2 */

}
 800094c:	bf00      	nop
 800094e:	bd80      	pop	{r7, pc}
 8000950:	2000028c 	.word	0x2000028c
 8000954:	40015404 	.word	0x40015404
 8000958:	0002ee00 	.word	0x0002ee00
 800095c:	200001cc 	.word	0x200001cc
 8000960:	40015424 	.word	0x40015424

08000964 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8000964:	b580      	push	{r7, lr}
 8000966:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8000968:	4b1b      	ldr	r3, [pc, #108]	; (80009d8 <MX_SPI2_Init+0x74>)
 800096a:	4a1c      	ldr	r2, [pc, #112]	; (80009dc <MX_SPI2_Init+0x78>)
 800096c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800096e:	4b1a      	ldr	r3, [pc, #104]	; (80009d8 <MX_SPI2_Init+0x74>)
 8000970:	f44f 7282 	mov.w	r2, #260	; 0x104
 8000974:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8000976:	4b18      	ldr	r3, [pc, #96]	; (80009d8 <MX_SPI2_Init+0x74>)
 8000978:	2200      	movs	r2, #0
 800097a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_4BIT;
 800097c:	4b16      	ldr	r3, [pc, #88]	; (80009d8 <MX_SPI2_Init+0x74>)
 800097e:	f44f 7240 	mov.w	r2, #768	; 0x300
 8000982:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000984:	4b14      	ldr	r3, [pc, #80]	; (80009d8 <MX_SPI2_Init+0x74>)
 8000986:	2200      	movs	r2, #0
 8000988:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 800098a:	4b13      	ldr	r3, [pc, #76]	; (80009d8 <MX_SPI2_Init+0x74>)
 800098c:	2200      	movs	r2, #0
 800098e:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8000990:	4b11      	ldr	r3, [pc, #68]	; (80009d8 <MX_SPI2_Init+0x74>)
 8000992:	f44f 7200 	mov.w	r2, #512	; 0x200
 8000996:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8000998:	4b0f      	ldr	r3, [pc, #60]	; (80009d8 <MX_SPI2_Init+0x74>)
 800099a:	2200      	movs	r2, #0
 800099c:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800099e:	4b0e      	ldr	r3, [pc, #56]	; (80009d8 <MX_SPI2_Init+0x74>)
 80009a0:	2200      	movs	r2, #0
 80009a2:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80009a4:	4b0c      	ldr	r3, [pc, #48]	; (80009d8 <MX_SPI2_Init+0x74>)
 80009a6:	2200      	movs	r2, #0
 80009a8:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80009aa:	4b0b      	ldr	r3, [pc, #44]	; (80009d8 <MX_SPI2_Init+0x74>)
 80009ac:	2200      	movs	r2, #0
 80009ae:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80009b0:	4b09      	ldr	r3, [pc, #36]	; (80009d8 <MX_SPI2_Init+0x74>)
 80009b2:	2207      	movs	r2, #7
 80009b4:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80009b6:	4b08      	ldr	r3, [pc, #32]	; (80009d8 <MX_SPI2_Init+0x74>)
 80009b8:	2200      	movs	r2, #0
 80009ba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80009bc:	4b06      	ldr	r3, [pc, #24]	; (80009d8 <MX_SPI2_Init+0x74>)
 80009be:	2208      	movs	r2, #8
 80009c0:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80009c2:	4805      	ldr	r0, [pc, #20]	; (80009d8 <MX_SPI2_Init+0x74>)
 80009c4:	f005 f9bc 	bl	8005d40 <HAL_SPI_Init>
 80009c8:	4603      	mov	r3, r0
 80009ca:	2b00      	cmp	r3, #0
 80009cc:	d001      	beq.n	80009d2 <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 80009ce:	f000 f94b 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80009d2:	bf00      	nop
 80009d4:	bd80      	pop	{r7, pc}
 80009d6:	bf00      	nop
 80009d8:	200000c0 	.word	0x200000c0
 80009dc:	40003800 	.word	0x40003800

080009e0 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80009e0:	b580      	push	{r7, lr}
 80009e2:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80009e4:	4b14      	ldr	r3, [pc, #80]	; (8000a38 <MX_USART2_UART_Init+0x58>)
 80009e6:	4a15      	ldr	r2, [pc, #84]	; (8000a3c <MX_USART2_UART_Init+0x5c>)
 80009e8:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80009ea:	4b13      	ldr	r3, [pc, #76]	; (8000a38 <MX_USART2_UART_Init+0x58>)
 80009ec:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80009f0:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80009f2:	4b11      	ldr	r3, [pc, #68]	; (8000a38 <MX_USART2_UART_Init+0x58>)
 80009f4:	2200      	movs	r2, #0
 80009f6:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80009f8:	4b0f      	ldr	r3, [pc, #60]	; (8000a38 <MX_USART2_UART_Init+0x58>)
 80009fa:	2200      	movs	r2, #0
 80009fc:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80009fe:	4b0e      	ldr	r3, [pc, #56]	; (8000a38 <MX_USART2_UART_Init+0x58>)
 8000a00:	2200      	movs	r2, #0
 8000a02:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000a04:	4b0c      	ldr	r3, [pc, #48]	; (8000a38 <MX_USART2_UART_Init+0x58>)
 8000a06:	220c      	movs	r2, #12
 8000a08:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000a0a:	4b0b      	ldr	r3, [pc, #44]	; (8000a38 <MX_USART2_UART_Init+0x58>)
 8000a0c:	2200      	movs	r2, #0
 8000a0e:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8000a10:	4b09      	ldr	r3, [pc, #36]	; (8000a38 <MX_USART2_UART_Init+0x58>)
 8000a12:	2200      	movs	r2, #0
 8000a14:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000a16:	4b08      	ldr	r3, [pc, #32]	; (8000a38 <MX_USART2_UART_Init+0x58>)
 8000a18:	2200      	movs	r2, #0
 8000a1a:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000a1c:	4b06      	ldr	r3, [pc, #24]	; (8000a38 <MX_USART2_UART_Init+0x58>)
 8000a1e:	2200      	movs	r2, #0
 8000a20:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000a22:	4805      	ldr	r0, [pc, #20]	; (8000a38 <MX_USART2_UART_Init+0x58>)
 8000a24:	f005 fa2f 	bl	8005e86 <HAL_UART_Init>
 8000a28:	4603      	mov	r3, r0
 8000a2a:	2b00      	cmp	r3, #0
 8000a2c:	d001      	beq.n	8000a32 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8000a2e:	f000 f91b 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000a32:	bf00      	nop
 8000a34:	bd80      	pop	{r7, pc}
 8000a36:	bf00      	nop
 8000a38:	20000310 	.word	0x20000310
 8000a3c:	40004400 	.word	0x40004400

08000a40 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000a40:	b580      	push	{r7, lr}
 8000a42:	b08c      	sub	sp, #48	; 0x30
 8000a44:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000a46:	f107 031c 	add.w	r3, r7, #28
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	601a      	str	r2, [r3, #0]
 8000a4e:	605a      	str	r2, [r3, #4]
 8000a50:	609a      	str	r2, [r3, #8]
 8000a52:	60da      	str	r2, [r3, #12]
 8000a54:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000a56:	4b7f      	ldr	r3, [pc, #508]	; (8000c54 <MX_GPIO_Init+0x214>)
 8000a58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a5a:	4a7e      	ldr	r2, [pc, #504]	; (8000c54 <MX_GPIO_Init+0x214>)
 8000a5c:	f043 0310 	orr.w	r3, r3, #16
 8000a60:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a62:	4b7c      	ldr	r3, [pc, #496]	; (8000c54 <MX_GPIO_Init+0x214>)
 8000a64:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a66:	f003 0310 	and.w	r3, r3, #16
 8000a6a:	61bb      	str	r3, [r7, #24]
 8000a6c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a6e:	4b79      	ldr	r3, [pc, #484]	; (8000c54 <MX_GPIO_Init+0x214>)
 8000a70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a72:	4a78      	ldr	r2, [pc, #480]	; (8000c54 <MX_GPIO_Init+0x214>)
 8000a74:	f043 0304 	orr.w	r3, r3, #4
 8000a78:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a7a:	4b76      	ldr	r3, [pc, #472]	; (8000c54 <MX_GPIO_Init+0x214>)
 8000a7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a7e:	f003 0304 	and.w	r3, r3, #4
 8000a82:	617b      	str	r3, [r7, #20]
 8000a84:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000a86:	4b73      	ldr	r3, [pc, #460]	; (8000c54 <MX_GPIO_Init+0x214>)
 8000a88:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a8a:	4a72      	ldr	r2, [pc, #456]	; (8000c54 <MX_GPIO_Init+0x214>)
 8000a8c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000a90:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000a92:	4b70      	ldr	r3, [pc, #448]	; (8000c54 <MX_GPIO_Init+0x214>)
 8000a94:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000a96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000a9a:	613b      	str	r3, [r7, #16]
 8000a9c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a9e:	4b6d      	ldr	r3, [pc, #436]	; (8000c54 <MX_GPIO_Init+0x214>)
 8000aa0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aa2:	4a6c      	ldr	r2, [pc, #432]	; (8000c54 <MX_GPIO_Init+0x214>)
 8000aa4:	f043 0301 	orr.w	r3, r3, #1
 8000aa8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000aaa:	4b6a      	ldr	r3, [pc, #424]	; (8000c54 <MX_GPIO_Init+0x214>)
 8000aac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aae:	f003 0301 	and.w	r3, r3, #1
 8000ab2:	60fb      	str	r3, [r7, #12]
 8000ab4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab6:	4b67      	ldr	r3, [pc, #412]	; (8000c54 <MX_GPIO_Init+0x214>)
 8000ab8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000aba:	4a66      	ldr	r2, [pc, #408]	; (8000c54 <MX_GPIO_Init+0x214>)
 8000abc:	f043 0302 	orr.w	r3, r3, #2
 8000ac0:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ac2:	4b64      	ldr	r3, [pc, #400]	; (8000c54 <MX_GPIO_Init+0x214>)
 8000ac4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ac6:	f003 0302 	and.w	r3, r3, #2
 8000aca:	60bb      	str	r3, [r7, #8]
 8000acc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ace:	4b61      	ldr	r3, [pc, #388]	; (8000c54 <MX_GPIO_Init+0x214>)
 8000ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ad2:	4a60      	ldr	r2, [pc, #384]	; (8000c54 <MX_GPIO_Init+0x214>)
 8000ad4:	f043 0308 	orr.w	r3, r3, #8
 8000ad8:	64d3      	str	r3, [r2, #76]	; 0x4c
 8000ada:	4b5e      	ldr	r3, [pc, #376]	; (8000c54 <MX_GPIO_Init+0x214>)
 8000adc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8000ade:	f003 0308 	and.w	r3, r3, #8
 8000ae2:	607b      	str	r3, [r7, #4]
 8000ae4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, AUDIO_RST_Pin|LD_G_Pin|XL_CS_Pin, GPIO_PIN_RESET);
 8000ae6:	2200      	movs	r2, #0
 8000ae8:	f240 1109 	movw	r1, #265	; 0x109
 8000aec:	485a      	ldr	r0, [pc, #360]	; (8000c58 <MX_GPIO_Init+0x218>)
 8000aee:	f001 f877 	bl	8001be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD_R_Pin|M3V3_REG_ON_Pin, GPIO_PIN_RESET);
 8000af2:	2200      	movs	r2, #0
 8000af4:	210c      	movs	r1, #12
 8000af6:	4859      	ldr	r0, [pc, #356]	; (8000c5c <MX_GPIO_Init+0x21c>)
 8000af8:	f001 f872 	bl	8001be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_PowerSwitchOn_GPIO_Port, OTG_FS_PowerSwitchOn_Pin, GPIO_PIN_SET);
 8000afc:	2201      	movs	r2, #1
 8000afe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8000b02:	4857      	ldr	r0, [pc, #348]	; (8000c60 <MX_GPIO_Init+0x220>)
 8000b04:	f001 f86c 	bl	8001be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(OTG_FS_VBUS_GPIO_Port, OTG_FS_VBUS_Pin, GPIO_PIN_RESET);
 8000b08:	2200      	movs	r2, #0
 8000b0a:	f44f 6100 	mov.w	r1, #2048	; 0x800
 8000b0e:	4854      	ldr	r0, [pc, #336]	; (8000c60 <MX_GPIO_Init+0x220>)
 8000b10:	f001 f866 	bl	8001be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GYRO_CS_GPIO_Port, GYRO_CS_Pin, GPIO_PIN_RESET);
 8000b14:	2200      	movs	r2, #0
 8000b16:	2180      	movs	r1, #128	; 0x80
 8000b18:	4852      	ldr	r0, [pc, #328]	; (8000c64 <MX_GPIO_Init+0x224>)
 8000b1a:	f001 f861 	bl	8001be0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : AUDIO_RST_Pin */
  GPIO_InitStruct.Pin = AUDIO_RST_Pin;
 8000b1e:	2308      	movs	r3, #8
 8000b20:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b22:	2301      	movs	r3, #1
 8000b24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b26:	2300      	movs	r3, #0
 8000b28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000b2a:	2302      	movs	r3, #2
 8000b2c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(AUDIO_RST_GPIO_Port, &GPIO_InitStruct);
 8000b2e:	f107 031c 	add.w	r3, r7, #28
 8000b32:	4619      	mov	r1, r3
 8000b34:	4848      	ldr	r0, [pc, #288]	; (8000c58 <MX_GPIO_Init+0x218>)
 8000b36:	f000 fea9 	bl	800188c <HAL_GPIO_Init>

  /*Configure GPIO pins : MFX_IRQ_OUT_Pin OTG_FS_OverCurrent_Pin */
  GPIO_InitStruct.Pin = MFX_IRQ_OUT_Pin|OTG_FS_OverCurrent_Pin;
 8000b3a:	f44f 5310 	mov.w	r3, #9216	; 0x2400
 8000b3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b40:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b44:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b46:	2300      	movs	r3, #0
 8000b48:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b4a:	f107 031c 	add.w	r3, r7, #28
 8000b4e:	4619      	mov	r1, r3
 8000b50:	4843      	ldr	r0, [pc, #268]	; (8000c60 <MX_GPIO_Init+0x220>)
 8000b52:	f000 fe9b 	bl	800188c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC0 MAG_INT_Pin MAG_DRDY_Pin */
  GPIO_InitStruct.Pin = GPIO_PIN_0|MAG_INT_Pin|MAG_DRDY_Pin;
 8000b56:	2307      	movs	r3, #7
 8000b58:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000b5a:	2300      	movs	r3, #0
 8000b5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b5e:	2300      	movs	r3, #0
 8000b60:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b62:	f107 031c 	add.w	r3, r7, #28
 8000b66:	4619      	mov	r1, r3
 8000b68:	483d      	ldr	r0, [pc, #244]	; (8000c60 <MX_GPIO_Init+0x220>)
 8000b6a:	f000 fe8f 	bl	800188c <HAL_GPIO_Init>
//  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
//  GPIO_InitStruct.Pull = GPIO_PULLDOWN;
//  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : MFX_WAKEUP_Pin */
  GPIO_InitStruct.Pin = MFX_WAKEUP_Pin;
 8000b6e:	2310      	movs	r3, #16
 8000b70:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000b72:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000b76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b78:	2300      	movs	r3, #0
 8000b7a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(MFX_WAKEUP_GPIO_Port, &GPIO_InitStruct);
 8000b7c:	f107 031c 	add.w	r3, r7, #28
 8000b80:	4619      	mov	r1, r3
 8000b82:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 8000b86:	f000 fe81 	bl	800188c <HAL_GPIO_Init>
//  GPIO_InitStruct.Pull = GPIO_PULLUP;
//  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
//  HAL_GPIO_Init(LD_G_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : OTG_FS_PowerSwitchOn_Pin OTG_FS_VBUS_Pin */
  GPIO_InitStruct.Pin = OTG_FS_PowerSwitchOn_Pin|OTG_FS_VBUS_Pin;
 8000b8a:	f44f 6320 	mov.w	r3, #2560	; 0xa00
 8000b8e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b90:	2301      	movs	r3, #1
 8000b92:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b94:	2300      	movs	r3, #0
 8000b96:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b98:	2300      	movs	r3, #0
 8000b9a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000b9c:	f107 031c 	add.w	r3, r7, #28
 8000ba0:	4619      	mov	r1, r3
 8000ba2:	482f      	ldr	r0, [pc, #188]	; (8000c60 <MX_GPIO_Init+0x220>)
 8000ba4:	f000 fe72 	bl	800188c <HAL_GPIO_Init>

  /*Configure GPIO pins : EXT_RST_Pin GYRO_INT1_Pin */
  GPIO_InitStruct.Pin = EXT_RST_Pin|GYRO_INT1_Pin;
 8000ba8:	2305      	movs	r3, #5
 8000baa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000bac:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000bb0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bb2:	2300      	movs	r3, #0
 8000bb4:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000bb6:	f107 031c 	add.w	r3, r7, #28
 8000bba:	4619      	mov	r1, r3
 8000bbc:	4829      	ldr	r0, [pc, #164]	; (8000c64 <MX_GPIO_Init+0x224>)
 8000bbe:	f000 fe65 	bl	800188c <HAL_GPIO_Init>

  /*Configure GPIO pin : GYRO_CS_Pin */
  GPIO_InitStruct.Pin = GYRO_CS_Pin;
 8000bc2:	2380      	movs	r3, #128	; 0x80
 8000bc4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000bc6:	2301      	movs	r3, #1
 8000bc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bca:	2300      	movs	r3, #0
 8000bcc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000bce:	2303      	movs	r3, #3
 8000bd0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GYRO_CS_GPIO_Port, &GPIO_InitStruct);
 8000bd2:	f107 031c 	add.w	r3, r7, #28
 8000bd6:	4619      	mov	r1, r3
 8000bd8:	4822      	ldr	r0, [pc, #136]	; (8000c64 <MX_GPIO_Init+0x224>)
 8000bda:	f000 fe57 	bl	800188c <HAL_GPIO_Init>

  /*Configure GPIO pin : M3V3_REG_ON_Pin */
  GPIO_InitStruct.Pin = M3V3_REG_ON_Pin;
 8000bde:	2308      	movs	r3, #8
 8000be0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000be2:	2301      	movs	r3, #1
 8000be4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000be6:	2300      	movs	r3, #0
 8000be8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000bea:	2300      	movs	r3, #0
 8000bec:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(M3V3_REG_ON_GPIO_Port, &GPIO_InitStruct);
 8000bee:	f107 031c 	add.w	r3, r7, #28
 8000bf2:	4619      	mov	r1, r3
 8000bf4:	4819      	ldr	r0, [pc, #100]	; (8000c5c <MX_GPIO_Init+0x21c>)
 8000bf6:	f000 fe49 	bl	800188c <HAL_GPIO_Init>

  /*Configure GPIO pin : GYRO_INT2_Pin */
  GPIO_InitStruct.Pin = GYRO_INT2_Pin;
 8000bfa:	f44f 7380 	mov.w	r3, #256	; 0x100
 8000bfe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c00:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c04:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c06:	2300      	movs	r3, #0
 8000c08:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GYRO_INT2_GPIO_Port, &GPIO_InitStruct);
 8000c0a:	f107 031c 	add.w	r3, r7, #28
 8000c0e:	4619      	mov	r1, r3
 8000c10:	4812      	ldr	r0, [pc, #72]	; (8000c5c <MX_GPIO_Init+0x21c>)
 8000c12:	f000 fe3b 	bl	800188c <HAL_GPIO_Init>

  /*Configure GPIO pin : XL_CS_Pin */
  GPIO_InitStruct.Pin = XL_CS_Pin;
 8000c16:	2301      	movs	r3, #1
 8000c18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c1a:	2301      	movs	r3, #1
 8000c1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c1e:	2300      	movs	r3, #0
 8000c20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c22:	2300      	movs	r3, #0
 8000c24:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(XL_CS_GPIO_Port, &GPIO_InitStruct);
 8000c26:	f107 031c 	add.w	r3, r7, #28
 8000c2a:	4619      	mov	r1, r3
 8000c2c:	480a      	ldr	r0, [pc, #40]	; (8000c58 <MX_GPIO_Init+0x218>)
 8000c2e:	f000 fe2d 	bl	800188c <HAL_GPIO_Init>

  /*Configure GPIO pin : XL_INT_Pin */
  GPIO_InitStruct.Pin = XL_INT_Pin;
 8000c32:	2302      	movs	r3, #2
 8000c34:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_EVT_RISING;
 8000c36:	f44f 1390 	mov.w	r3, #1179648	; 0x120000
 8000c3a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(XL_INT_GPIO_Port, &GPIO_InitStruct);
 8000c40:	f107 031c 	add.w	r3, r7, #28
 8000c44:	4619      	mov	r1, r3
 8000c46:	4804      	ldr	r0, [pc, #16]	; (8000c58 <MX_GPIO_Init+0x218>)
 8000c48:	f000 fe20 	bl	800188c <HAL_GPIO_Init>

}
 8000c4c:	bf00      	nop
 8000c4e:	3730      	adds	r7, #48	; 0x30
 8000c50:	46bd      	mov	sp, r7
 8000c52:	bd80      	pop	{r7, pc}
 8000c54:	40021000 	.word	0x40021000
 8000c58:	48001000 	.word	0x48001000
 8000c5c:	48000400 	.word	0x48000400
 8000c60:	48000800 	.word	0x48000800
 8000c64:	48000c00 	.word	0x48000c00

08000c68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000c68:	b480      	push	{r7}
 8000c6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000c6c:	b672      	cpsid	i
}
 8000c6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000c70:	e7fe      	b.n	8000c70 <Error_Handler+0x8>

08000c72 <stm32_input_gpio_is_set>:
#include "stm32l476xx.h"

#define MAX_PINS_PER_PORT (16u)

bool stm32_input_gpio_is_set(GPIO_TypeDef *gpio, uint32_t pin_num)
{
 8000c72:	b480      	push	{r7}
 8000c74:	b085      	sub	sp, #20
 8000c76:	af00      	add	r7, sp, #0
 8000c78:	6078      	str	r0, [r7, #4]
 8000c7a:	6039      	str	r1, [r7, #0]
    bool set = false;
 8000c7c:	2300      	movs	r3, #0
 8000c7e:	73fb      	strb	r3, [r7, #15]
    if (pin_num < MAX_PINS_PER_PORT) {
 8000c80:	683b      	ldr	r3, [r7, #0]
 8000c82:	2b0f      	cmp	r3, #15
 8000c84:	d80b      	bhi.n	8000c9e <stm32_input_gpio_is_set+0x2c>
            set = (gpio->IDR & (1u << pin_num));
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	691a      	ldr	r2, [r3, #16]
 8000c8a:	2101      	movs	r1, #1
 8000c8c:	683b      	ldr	r3, [r7, #0]
 8000c8e:	fa01 f303 	lsl.w	r3, r1, r3
 8000c92:	4013      	ands	r3, r2
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	bf14      	ite	ne
 8000c98:	2301      	movne	r3, #1
 8000c9a:	2300      	moveq	r3, #0
 8000c9c:	73fb      	strb	r3, [r7, #15]
        }
    return set;
 8000c9e:	7bfb      	ldrb	r3, [r7, #15]
}
 8000ca0:	4618      	mov	r0, r3
 8000ca2:	3714      	adds	r7, #20
 8000ca4:	46bd      	mov	sp, r7
 8000ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000caa:	4770      	bx	lr

08000cac <stm32_output_gpio_set>:

void stm32_output_gpio_set(GPIO_TypeDef *gpio, uint32_t pin_num)
{
 8000cac:	b480      	push	{r7}
 8000cae:	b083      	sub	sp, #12
 8000cb0:	af00      	add	r7, sp, #0
 8000cb2:	6078      	str	r0, [r7, #4]
 8000cb4:	6039      	str	r1, [r7, #0]
    if (pin_num < MAX_PINS_PER_PORT) {
 8000cb6:	683b      	ldr	r3, [r7, #0]
 8000cb8:	2b0f      	cmp	r3, #15
 8000cba:	d808      	bhi.n	8000cce <stm32_output_gpio_set+0x22>
        gpio->BSRR |= (1u << pin_num);
 8000cbc:	687b      	ldr	r3, [r7, #4]
 8000cbe:	699a      	ldr	r2, [r3, #24]
 8000cc0:	2101      	movs	r1, #1
 8000cc2:	683b      	ldr	r3, [r7, #0]
 8000cc4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	619a      	str	r2, [r3, #24]
    }
}
 8000cce:	bf00      	nop
 8000cd0:	370c      	adds	r7, #12
 8000cd2:	46bd      	mov	sp, r7
 8000cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cd8:	4770      	bx	lr

08000cda <stm32_output_gpio_clear>:

void stm32_output_gpio_clear(GPIO_TypeDef *gpio, uint32_t pin_num)
{
 8000cda:	b480      	push	{r7}
 8000cdc:	b083      	sub	sp, #12
 8000cde:	af00      	add	r7, sp, #0
 8000ce0:	6078      	str	r0, [r7, #4]
 8000ce2:	6039      	str	r1, [r7, #0]
    if (pin_num < MAX_PINS_PER_PORT) {
 8000ce4:	683b      	ldr	r3, [r7, #0]
 8000ce6:	2b0f      	cmp	r3, #15
 8000ce8:	d809      	bhi.n	8000cfe <stm32_output_gpio_clear+0x24>
        gpio->BSRR |= (1u << (pin_num + MAX_PINS_PER_PORT));
 8000cea:	687b      	ldr	r3, [r7, #4]
 8000cec:	699a      	ldr	r2, [r3, #24]
 8000cee:	683b      	ldr	r3, [r7, #0]
 8000cf0:	3310      	adds	r3, #16
 8000cf2:	2101      	movs	r1, #1
 8000cf4:	fa01 f303 	lsl.w	r3, r1, r3
 8000cf8:	431a      	orrs	r2, r3
 8000cfa:	687b      	ldr	r3, [r7, #4]
 8000cfc:	619a      	str	r2, [r3, #24]
    }
}
 8000cfe:	bf00      	nop
 8000d00:	370c      	adds	r7, #12
 8000d02:	46bd      	mov	sp, r7
 8000d04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d08:	4770      	bx	lr

08000d0a <stm32_output_gpio_is_set>:

bool stm32_output_gpio_is_set(GPIO_TypeDef *gpio, uint32_t pin_num)
{
 8000d0a:	b480      	push	{r7}
 8000d0c:	b085      	sub	sp, #20
 8000d0e:	af00      	add	r7, sp, #0
 8000d10:	6078      	str	r0, [r7, #4]
 8000d12:	6039      	str	r1, [r7, #0]
    bool set = false;
 8000d14:	2300      	movs	r3, #0
 8000d16:	73fb      	strb	r3, [r7, #15]
    if (pin_num < MAX_PINS_PER_PORT) {
 8000d18:	683b      	ldr	r3, [r7, #0]
 8000d1a:	2b0f      	cmp	r3, #15
 8000d1c:	d80b      	bhi.n	8000d36 <stm32_output_gpio_is_set+0x2c>
        set = (gpio->ODR & (1u << pin_num));
 8000d1e:	687b      	ldr	r3, [r7, #4]
 8000d20:	695a      	ldr	r2, [r3, #20]
 8000d22:	2101      	movs	r1, #1
 8000d24:	683b      	ldr	r3, [r7, #0]
 8000d26:	fa01 f303 	lsl.w	r3, r1, r3
 8000d2a:	4013      	ands	r3, r2
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	bf14      	ite	ne
 8000d30:	2301      	movne	r3, #1
 8000d32:	2300      	moveq	r3, #0
 8000d34:	73fb      	strb	r3, [r7, #15]
    }
    return set;
 8000d36:	7bfb      	ldrb	r3, [r7, #15]
}
 8000d38:	4618      	mov	r0, r3
 8000d3a:	3714      	adds	r7, #20
 8000d3c:	46bd      	mov	sp, r7
 8000d3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d42:	4770      	bx	lr

08000d44 <stm32_configure_gpio_as_output>:

void stm32_configure_gpio_as_output(GPIO_TypeDef *gpio, uint32_t pin_num)
{
 8000d44:	b480      	push	{r7}
 8000d46:	b085      	sub	sp, #20
 8000d48:	af00      	add	r7, sp, #0
 8000d4a:	6078      	str	r0, [r7, #4]
 8000d4c:	6039      	str	r1, [r7, #0]
    uint32_t tmp;
    tmp = gpio->MODER;
 8000d4e:	687b      	ldr	r3, [r7, #4]
 8000d50:	681b      	ldr	r3, [r3, #0]
 8000d52:	60fb      	str	r3, [r7, #12]
    tmp &= ~(3 << (2 * pin_num));
 8000d54:	683b      	ldr	r3, [r7, #0]
 8000d56:	005b      	lsls	r3, r3, #1
 8000d58:	2203      	movs	r2, #3
 8000d5a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d5e:	43db      	mvns	r3, r3
 8000d60:	461a      	mov	r2, r3
 8000d62:	68fb      	ldr	r3, [r7, #12]
 8000d64:	4013      	ands	r3, r2
 8000d66:	60fb      	str	r3, [r7, #12]
    tmp |= (1 << (2 * pin_num)); // (2 * pin_num) == (1 << pin_num)
 8000d68:	683b      	ldr	r3, [r7, #0]
 8000d6a:	005b      	lsls	r3, r3, #1
 8000d6c:	2201      	movs	r2, #1
 8000d6e:	fa02 f303 	lsl.w	r3, r2, r3
 8000d72:	461a      	mov	r2, r3
 8000d74:	68fb      	ldr	r3, [r7, #12]
 8000d76:	4313      	orrs	r3, r2
 8000d78:	60fb      	str	r3, [r7, #12]
    gpio->MODER = tmp;
 8000d7a:	687b      	ldr	r3, [r7, #4]
 8000d7c:	68fa      	ldr	r2, [r7, #12]
 8000d7e:	601a      	str	r2, [r3, #0]
    tmp = gpio->OTYPER;
 8000d80:	687b      	ldr	r3, [r7, #4]
 8000d82:	685b      	ldr	r3, [r3, #4]
 8000d84:	60fb      	str	r3, [r7, #12]
    tmp &= ~(1 << pin_num);
 8000d86:	2201      	movs	r2, #1
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	fa02 f303 	lsl.w	r3, r2, r3
 8000d8e:	43db      	mvns	r3, r3
 8000d90:	461a      	mov	r2, r3
 8000d92:	68fb      	ldr	r3, [r7, #12]
 8000d94:	4013      	ands	r3, r2
 8000d96:	60fb      	str	r3, [r7, #12]
    gpio->OTYPER = tmp;
 8000d98:	687b      	ldr	r3, [r7, #4]
 8000d9a:	68fa      	ldr	r2, [r7, #12]
 8000d9c:	605a      	str	r2, [r3, #4]
}
 8000d9e:	bf00      	nop
 8000da0:	3714      	adds	r7, #20
 8000da2:	46bd      	mov	sp, r7
 8000da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000da8:	4770      	bx	lr

08000daa <stm32_configure_gpio_as_input>:

void stm32_configure_gpio_as_input(GPIO_TypeDef *gpio, uint32_t pin_num, GpioPullDir pull)
{
 8000daa:	b480      	push	{r7}
 8000dac:	b087      	sub	sp, #28
 8000dae:	af00      	add	r7, sp, #0
 8000db0:	60f8      	str	r0, [r7, #12]
 8000db2:	60b9      	str	r1, [r7, #8]
 8000db4:	4613      	mov	r3, r2
 8000db6:	71fb      	strb	r3, [r7, #7]
    uint32_t tmp;
    tmp = gpio->MODER;
 8000db8:	68fb      	ldr	r3, [r7, #12]
 8000dba:	681b      	ldr	r3, [r3, #0]
 8000dbc:	617b      	str	r3, [r7, #20]
    tmp &= ~(3 << (2 * pin_num));
 8000dbe:	68bb      	ldr	r3, [r7, #8]
 8000dc0:	005b      	lsls	r3, r3, #1
 8000dc2:	2203      	movs	r2, #3
 8000dc4:	fa02 f303 	lsl.w	r3, r2, r3
 8000dc8:	43db      	mvns	r3, r3
 8000dca:	461a      	mov	r2, r3
 8000dcc:	697b      	ldr	r3, [r7, #20]
 8000dce:	4013      	ands	r3, r2
 8000dd0:	617b      	str	r3, [r7, #20]
    gpio->MODER = tmp;
 8000dd2:	68fb      	ldr	r3, [r7, #12]
 8000dd4:	697a      	ldr	r2, [r7, #20]
 8000dd6:	601a      	str	r2, [r3, #0]
    tmp = gpio->PUPDR;
 8000dd8:	68fb      	ldr	r3, [r7, #12]
 8000dda:	68db      	ldr	r3, [r3, #12]
 8000ddc:	617b      	str	r3, [r7, #20]
    tmp &= ~(3 << (2 * pin_num));
 8000dde:	68bb      	ldr	r3, [r7, #8]
 8000de0:	005b      	lsls	r3, r3, #1
 8000de2:	2203      	movs	r2, #3
 8000de4:	fa02 f303 	lsl.w	r3, r2, r3
 8000de8:	43db      	mvns	r3, r3
 8000dea:	461a      	mov	r2, r3
 8000dec:	697b      	ldr	r3, [r7, #20]
 8000dee:	4013      	ands	r3, r2
 8000df0:	617b      	str	r3, [r7, #20]
    tmp |= (pull << (2 * pin_num)); // (2 * pin_num) == (1 << pin_num)
 8000df2:	79fa      	ldrb	r2, [r7, #7]
 8000df4:	68bb      	ldr	r3, [r7, #8]
 8000df6:	005b      	lsls	r3, r3, #1
 8000df8:	fa02 f303 	lsl.w	r3, r2, r3
 8000dfc:	461a      	mov	r2, r3
 8000dfe:	697b      	ldr	r3, [r7, #20]
 8000e00:	4313      	orrs	r3, r2
 8000e02:	617b      	str	r3, [r7, #20]
    gpio->PUPDR = tmp;
 8000e04:	68fb      	ldr	r3, [r7, #12]
 8000e06:	697a      	ldr	r2, [r7, #20]
 8000e08:	60da      	str	r2, [r3, #12]
}
 8000e0a:	bf00      	nop
 8000e0c:	371c      	adds	r7, #28
 8000e0e:	46bd      	mov	sp, r7
 8000e10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e14:	4770      	bx	lr

08000e16 <stm32_output_gpio_toggle>:

void stm32_output_gpio_toggle(GPIO_TypeDef *gpio, uint32_t pin_num)
{
 8000e16:	b580      	push	{r7, lr}
 8000e18:	b082      	sub	sp, #8
 8000e1a:	af00      	add	r7, sp, #0
 8000e1c:	6078      	str	r0, [r7, #4]
 8000e1e:	6039      	str	r1, [r7, #0]
    if (pin_num < MAX_PINS_PER_PORT) {
 8000e20:	683b      	ldr	r3, [r7, #0]
 8000e22:	2b0f      	cmp	r3, #15
 8000e24:	d80f      	bhi.n	8000e46 <stm32_output_gpio_toggle+0x30>
        if (stm32_output_gpio_is_set(gpio, pin_num)) {
 8000e26:	6839      	ldr	r1, [r7, #0]
 8000e28:	6878      	ldr	r0, [r7, #4]
 8000e2a:	f7ff ff6e 	bl	8000d0a <stm32_output_gpio_is_set>
 8000e2e:	4603      	mov	r3, r0
 8000e30:	2b00      	cmp	r3, #0
 8000e32:	d004      	beq.n	8000e3e <stm32_output_gpio_toggle+0x28>
            stm32_output_gpio_clear(gpio, pin_num);
 8000e34:	6839      	ldr	r1, [r7, #0]
 8000e36:	6878      	ldr	r0, [r7, #4]
 8000e38:	f7ff ff4f 	bl	8000cda <stm32_output_gpio_clear>
        } else {
            stm32_output_gpio_set(gpio, pin_num);
        }
    }
}
 8000e3c:	e003      	b.n	8000e46 <stm32_output_gpio_toggle+0x30>
            stm32_output_gpio_set(gpio, pin_num);
 8000e3e:	6839      	ldr	r1, [r7, #0]
 8000e40:	6878      	ldr	r0, [r7, #4]
 8000e42:	f7ff ff33 	bl	8000cac <stm32_output_gpio_set>
}
 8000e46:	bf00      	nop
 8000e48:	3708      	adds	r7, #8
 8000e4a:	46bd      	mov	sp, r7
 8000e4c:	bd80      	pop	{r7, pc}

08000e4e <stm32_port_a_in_pin_set>:

bool stm32_port_a_in_pin_set(uint32_t pin_num)
{
 8000e4e:	b580      	push	{r7, lr}
 8000e50:	b084      	sub	sp, #16
 8000e52:	af00      	add	r7, sp, #0
 8000e54:	6078      	str	r0, [r7, #4]
    GPIO_TypeDef *gpio;
    gpio = GPIOA;
 8000e56:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e5a:	60fb      	str	r3, [r7, #12]
    return stm32_input_gpio_is_set(gpio, pin_num);
 8000e5c:	6879      	ldr	r1, [r7, #4]
 8000e5e:	68f8      	ldr	r0, [r7, #12]
 8000e60:	f7ff ff07 	bl	8000c72 <stm32_input_gpio_is_set>
 8000e64:	4603      	mov	r3, r0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3710      	adds	r7, #16
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}

08000e6e <stm32_configure_port_a_pin_as_input>:

void stm32_configure_port_a_pin_as_input(uint32_t pin_num, GpioPullDir pull)
{
 8000e6e:	b580      	push	{r7, lr}
 8000e70:	b084      	sub	sp, #16
 8000e72:	af00      	add	r7, sp, #0
 8000e74:	6078      	str	r0, [r7, #4]
 8000e76:	460b      	mov	r3, r1
 8000e78:	70fb      	strb	r3, [r7, #3]
    GPIO_TypeDef *gpio;
    gpio = GPIOA;
 8000e7a:	f04f 4390 	mov.w	r3, #1207959552	; 0x48000000
 8000e7e:	60fb      	str	r3, [r7, #12]
    stm32_configure_gpio_as_input(gpio, pin_num, pull);
 8000e80:	78fb      	ldrb	r3, [r7, #3]
 8000e82:	461a      	mov	r2, r3
 8000e84:	6879      	ldr	r1, [r7, #4]
 8000e86:	68f8      	ldr	r0, [r7, #12]
 8000e88:	f7ff ff8f 	bl	8000daa <stm32_configure_gpio_as_input>
}
 8000e8c:	bf00      	nop
 8000e8e:	3710      	adds	r7, #16
 8000e90:	46bd      	mov	sp, r7
 8000e92:	bd80      	pop	{r7, pc}

08000e94 <stm32_configure_port_b_pin_as_output>:

void stm32_configure_port_b_pin_as_output(uint32_t pin_num)
{
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b084      	sub	sp, #16
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
    GPIO_TypeDef *gpio;
    gpio = GPIOB;
 8000e9c:	4b04      	ldr	r3, [pc, #16]	; (8000eb0 <stm32_configure_port_b_pin_as_output+0x1c>)
 8000e9e:	60fb      	str	r3, [r7, #12]
    stm32_configure_gpio_as_output(gpio, pin_num);
 8000ea0:	6879      	ldr	r1, [r7, #4]
 8000ea2:	68f8      	ldr	r0, [r7, #12]
 8000ea4:	f7ff ff4e 	bl	8000d44 <stm32_configure_gpio_as_output>
}
 8000ea8:	bf00      	nop
 8000eaa:	3710      	adds	r7, #16
 8000eac:	46bd      	mov	sp, r7
 8000eae:	bd80      	pop	{r7, pc}
 8000eb0:	48000400 	.word	0x48000400

08000eb4 <stm32_port_b_out_pin_set>:

void stm32_port_b_out_pin_set(uint32_t pin_num)
{
 8000eb4:	b580      	push	{r7, lr}
 8000eb6:	b084      	sub	sp, #16
 8000eb8:	af00      	add	r7, sp, #0
 8000eba:	6078      	str	r0, [r7, #4]
    GPIO_TypeDef *gpio;
    gpio = GPIOB;
 8000ebc:	4b04      	ldr	r3, [pc, #16]	; (8000ed0 <stm32_port_b_out_pin_set+0x1c>)
 8000ebe:	60fb      	str	r3, [r7, #12]
    return stm32_output_gpio_set(gpio, pin_num);
 8000ec0:	6879      	ldr	r1, [r7, #4]
 8000ec2:	68f8      	ldr	r0, [r7, #12]
 8000ec4:	f7ff fef2 	bl	8000cac <stm32_output_gpio_set>
}
 8000ec8:	3710      	adds	r7, #16
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}
 8000ece:	bf00      	nop
 8000ed0:	48000400 	.word	0x48000400

08000ed4 <stm32_port_b_out_pin_clear>:

void stm32_port_b_out_pin_clear(uint32_t pin_num)
{
 8000ed4:	b580      	push	{r7, lr}
 8000ed6:	b084      	sub	sp, #16
 8000ed8:	af00      	add	r7, sp, #0
 8000eda:	6078      	str	r0, [r7, #4]
    GPIO_TypeDef *gpio;
    gpio = GPIOB;
 8000edc:	4b04      	ldr	r3, [pc, #16]	; (8000ef0 <stm32_port_b_out_pin_clear+0x1c>)
 8000ede:	60fb      	str	r3, [r7, #12]
    return stm32_output_gpio_clear(gpio, pin_num);
 8000ee0:	6879      	ldr	r1, [r7, #4]
 8000ee2:	68f8      	ldr	r0, [r7, #12]
 8000ee4:	f7ff fef9 	bl	8000cda <stm32_output_gpio_clear>
}
 8000ee8:	3710      	adds	r7, #16
 8000eea:	46bd      	mov	sp, r7
 8000eec:	bd80      	pop	{r7, pc}
 8000eee:	bf00      	nop
 8000ef0:	48000400 	.word	0x48000400

08000ef4 <stm32_port_b_out_pin_toggle>:

void stm32_port_b_out_pin_toggle(uint32_t pin_num)
{
 8000ef4:	b580      	push	{r7, lr}
 8000ef6:	b084      	sub	sp, #16
 8000ef8:	af00      	add	r7, sp, #0
 8000efa:	6078      	str	r0, [r7, #4]
    GPIO_TypeDef *gpio;
    gpio = GPIOB;
 8000efc:	4b04      	ldr	r3, [pc, #16]	; (8000f10 <stm32_port_b_out_pin_toggle+0x1c>)
 8000efe:	60fb      	str	r3, [r7, #12]
    stm32_output_gpio_toggle(gpio, pin_num);
 8000f00:	6879      	ldr	r1, [r7, #4]
 8000f02:	68f8      	ldr	r0, [r7, #12]
 8000f04:	f7ff ff87 	bl	8000e16 <stm32_output_gpio_toggle>
}
 8000f08:	bf00      	nop
 8000f0a:	3710      	adds	r7, #16
 8000f0c:	46bd      	mov	sp, r7
 8000f0e:	bd80      	pop	{r7, pc}
 8000f10:	48000400 	.word	0x48000400

08000f14 <stm32_configure_port_e_pin_as_output>:

void stm32_configure_port_e_pin_as_output(uint32_t pin_num)
{
 8000f14:	b580      	push	{r7, lr}
 8000f16:	b084      	sub	sp, #16
 8000f18:	af00      	add	r7, sp, #0
 8000f1a:	6078      	str	r0, [r7, #4]
    GPIO_TypeDef *gpio;
    gpio = GPIOE;
 8000f1c:	4b04      	ldr	r3, [pc, #16]	; (8000f30 <stm32_configure_port_e_pin_as_output+0x1c>)
 8000f1e:	60fb      	str	r3, [r7, #12]
    stm32_configure_gpio_as_output(gpio, pin_num);
 8000f20:	6879      	ldr	r1, [r7, #4]
 8000f22:	68f8      	ldr	r0, [r7, #12]
 8000f24:	f7ff ff0e 	bl	8000d44 <stm32_configure_gpio_as_output>
}
 8000f28:	bf00      	nop
 8000f2a:	3710      	adds	r7, #16
 8000f2c:	46bd      	mov	sp, r7
 8000f2e:	bd80      	pop	{r7, pc}
 8000f30:	48001000 	.word	0x48001000

08000f34 <stm32_port_e_out_pin_set>:


void stm32_port_e_out_pin_set(uint32_t pin_num)
{
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b084      	sub	sp, #16
 8000f38:	af00      	add	r7, sp, #0
 8000f3a:	6078      	str	r0, [r7, #4]
    GPIO_TypeDef *gpio;
    gpio = GPIOE;
 8000f3c:	4b04      	ldr	r3, [pc, #16]	; (8000f50 <stm32_port_e_out_pin_set+0x1c>)
 8000f3e:	60fb      	str	r3, [r7, #12]
    return stm32_output_gpio_set(gpio, pin_num);
 8000f40:	6879      	ldr	r1, [r7, #4]
 8000f42:	68f8      	ldr	r0, [r7, #12]
 8000f44:	f7ff feb2 	bl	8000cac <stm32_output_gpio_set>
}
 8000f48:	3710      	adds	r7, #16
 8000f4a:	46bd      	mov	sp, r7
 8000f4c:	bd80      	pop	{r7, pc}
 8000f4e:	bf00      	nop
 8000f50:	48001000 	.word	0x48001000

08000f54 <stm32_port_e_out_pin_clear>:

void stm32_port_e_out_pin_clear(uint32_t pin_num)
{
 8000f54:	b580      	push	{r7, lr}
 8000f56:	b084      	sub	sp, #16
 8000f58:	af00      	add	r7, sp, #0
 8000f5a:	6078      	str	r0, [r7, #4]
    GPIO_TypeDef *gpio;
    gpio = GPIOE;
 8000f5c:	4b04      	ldr	r3, [pc, #16]	; (8000f70 <stm32_port_e_out_pin_clear+0x1c>)
 8000f5e:	60fb      	str	r3, [r7, #12]
    return stm32_output_gpio_clear(gpio, pin_num);
 8000f60:	6879      	ldr	r1, [r7, #4]
 8000f62:	68f8      	ldr	r0, [r7, #12]
 8000f64:	f7ff feb9 	bl	8000cda <stm32_output_gpio_clear>
}
 8000f68:	3710      	adds	r7, #16
 8000f6a:	46bd      	mov	sp, r7
 8000f6c:	bd80      	pop	{r7, pc}
 8000f6e:	bf00      	nop
 8000f70:	48001000 	.word	0x48001000

08000f74 <stm32_port_e_out_pin_toggle>:

void stm32_port_e_out_pin_toggle(uint32_t pin_num)
{
 8000f74:	b580      	push	{r7, lr}
 8000f76:	b084      	sub	sp, #16
 8000f78:	af00      	add	r7, sp, #0
 8000f7a:	6078      	str	r0, [r7, #4]
    GPIO_TypeDef *gpio;
    gpio = GPIOE;
 8000f7c:	4b04      	ldr	r3, [pc, #16]	; (8000f90 <stm32_port_e_out_pin_toggle+0x1c>)
 8000f7e:	60fb      	str	r3, [r7, #12]
    stm32_output_gpio_toggle(gpio, pin_num);
 8000f80:	6879      	ldr	r1, [r7, #4]
 8000f82:	68f8      	ldr	r0, [r7, #12]
 8000f84:	f7ff ff47 	bl	8000e16 <stm32_output_gpio_toggle>
}
 8000f88:	bf00      	nop
 8000f8a:	3710      	adds	r7, #16
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	48001000 	.word	0x48001000

08000f94 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000f94:	b480      	push	{r7}
 8000f96:	b083      	sub	sp, #12
 8000f98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f9a:	4b0f      	ldr	r3, [pc, #60]	; (8000fd8 <HAL_MspInit+0x44>)
 8000f9c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000f9e:	4a0e      	ldr	r2, [pc, #56]	; (8000fd8 <HAL_MspInit+0x44>)
 8000fa0:	f043 0301 	orr.w	r3, r3, #1
 8000fa4:	6613      	str	r3, [r2, #96]	; 0x60
 8000fa6:	4b0c      	ldr	r3, [pc, #48]	; (8000fd8 <HAL_MspInit+0x44>)
 8000fa8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8000faa:	f003 0301 	and.w	r3, r3, #1
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000fb2:	4b09      	ldr	r3, [pc, #36]	; (8000fd8 <HAL_MspInit+0x44>)
 8000fb4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fb6:	4a08      	ldr	r2, [pc, #32]	; (8000fd8 <HAL_MspInit+0x44>)
 8000fb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000fbc:	6593      	str	r3, [r2, #88]	; 0x58
 8000fbe:	4b06      	ldr	r3, [pc, #24]	; (8000fd8 <HAL_MspInit+0x44>)
 8000fc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8000fc2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000fc6:	603b      	str	r3, [r7, #0]
 8000fc8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000fca:	bf00      	nop
 8000fcc:	370c      	adds	r7, #12
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	40021000 	.word	0x40021000

08000fdc <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b0ae      	sub	sp, #184	; 0xb8
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000fe4:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8000fe8:	2200      	movs	r2, #0
 8000fea:	601a      	str	r2, [r3, #0]
 8000fec:	605a      	str	r2, [r3, #4]
 8000fee:	609a      	str	r2, [r3, #8]
 8000ff0:	60da      	str	r2, [r3, #12]
 8000ff2:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8000ff4:	f107 031c 	add.w	r3, r7, #28
 8000ff8:	2288      	movs	r2, #136	; 0x88
 8000ffa:	2100      	movs	r1, #0
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f007 fdbf 	bl	8008b80 <memset>
  if(hi2c->Instance==I2C1)
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	4a42      	ldr	r2, [pc, #264]	; (8001110 <HAL_I2C_MspInit+0x134>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d13b      	bne.n	8001084 <HAL_I2C_MspInit+0xa8>
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 800100c:	2340      	movs	r3, #64	; 0x40
 800100e:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001010:	2300      	movs	r3, #0
 8001012:	66fb      	str	r3, [r7, #108]	; 0x6c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001014:	f107 031c 	add.w	r3, r7, #28
 8001018:	4618      	mov	r0, r3
 800101a:	f003 f9bf 	bl	800439c <HAL_RCCEx_PeriphCLKConfig>
 800101e:	4603      	mov	r3, r0
 8001020:	2b00      	cmp	r3, #0
 8001022:	d001      	beq.n	8001028 <HAL_I2C_MspInit+0x4c>
    {
      Error_Handler();
 8001024:	f7ff fe20 	bl	8000c68 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001028:	4b3a      	ldr	r3, [pc, #232]	; (8001114 <HAL_I2C_MspInit+0x138>)
 800102a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800102c:	4a39      	ldr	r2, [pc, #228]	; (8001114 <HAL_I2C_MspInit+0x138>)
 800102e:	f043 0302 	orr.w	r3, r3, #2
 8001032:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001034:	4b37      	ldr	r3, [pc, #220]	; (8001114 <HAL_I2C_MspInit+0x138>)
 8001036:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001038:	f003 0302 	and.w	r3, r3, #2
 800103c:	61bb      	str	r3, [r7, #24]
 800103e:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = I2C1_SCL_Pin|I2C1_SDA_Pin;
 8001040:	23c0      	movs	r3, #192	; 0xc0
 8001042:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001046:	2312      	movs	r3, #18
 8001048:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800104c:	2301      	movs	r3, #1
 800104e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001052:	2303      	movs	r3, #3
 8001054:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001058:	2304      	movs	r3, #4
 800105a:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800105e:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 8001062:	4619      	mov	r1, r3
 8001064:	482c      	ldr	r0, [pc, #176]	; (8001118 <HAL_I2C_MspInit+0x13c>)
 8001066:	f000 fc11 	bl	800188c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800106a:	4b2a      	ldr	r3, [pc, #168]	; (8001114 <HAL_I2C_MspInit+0x138>)
 800106c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800106e:	4a29      	ldr	r2, [pc, #164]	; (8001114 <HAL_I2C_MspInit+0x138>)
 8001070:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001074:	6593      	str	r3, [r2, #88]	; 0x58
 8001076:	4b27      	ldr	r3, [pc, #156]	; (8001114 <HAL_I2C_MspInit+0x138>)
 8001078:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800107a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800107e:	617b      	str	r3, [r7, #20]
 8001080:	697b      	ldr	r3, [r7, #20]
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001082:	e040      	b.n	8001106 <HAL_I2C_MspInit+0x12a>
  else if(hi2c->Instance==I2C2)
 8001084:	687b      	ldr	r3, [r7, #4]
 8001086:	681b      	ldr	r3, [r3, #0]
 8001088:	4a24      	ldr	r2, [pc, #144]	; (800111c <HAL_I2C_MspInit+0x140>)
 800108a:	4293      	cmp	r3, r2
 800108c:	d13b      	bne.n	8001106 <HAL_I2C_MspInit+0x12a>
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 800108e:	2380      	movs	r3, #128	; 0x80
 8001090:	61fb      	str	r3, [r7, #28]
    PeriphClkInit.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8001092:	2300      	movs	r3, #0
 8001094:	673b      	str	r3, [r7, #112]	; 0x70
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001096:	f107 031c 	add.w	r3, r7, #28
 800109a:	4618      	mov	r0, r3
 800109c:	f003 f97e 	bl	800439c <HAL_RCCEx_PeriphCLKConfig>
 80010a0:	4603      	mov	r3, r0
 80010a2:	2b00      	cmp	r3, #0
 80010a4:	d001      	beq.n	80010aa <HAL_I2C_MspInit+0xce>
      Error_Handler();
 80010a6:	f7ff fddf 	bl	8000c68 <Error_Handler>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80010aa:	4b1a      	ldr	r3, [pc, #104]	; (8001114 <HAL_I2C_MspInit+0x138>)
 80010ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ae:	4a19      	ldr	r2, [pc, #100]	; (8001114 <HAL_I2C_MspInit+0x138>)
 80010b0:	f043 0302 	orr.w	r3, r3, #2
 80010b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80010b6:	4b17      	ldr	r3, [pc, #92]	; (8001114 <HAL_I2C_MspInit+0x138>)
 80010b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80010ba:	f003 0302 	and.w	r3, r3, #2
 80010be:	613b      	str	r3, [r7, #16]
 80010c0:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = MFX_I2C_SLC_Pin|MFX_I2C_SDA_Pin;
 80010c2:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80010c6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80010ca:	2312      	movs	r3, #18
 80010cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80010d0:	2301      	movs	r3, #1
 80010d2:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80010d6:	2303      	movs	r3, #3
 80010d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80010dc:	2304      	movs	r3, #4
 80010de:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80010e2:	f107 03a4 	add.w	r3, r7, #164	; 0xa4
 80010e6:	4619      	mov	r1, r3
 80010e8:	480b      	ldr	r0, [pc, #44]	; (8001118 <HAL_I2C_MspInit+0x13c>)
 80010ea:	f000 fbcf 	bl	800188c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80010ee:	4b09      	ldr	r3, [pc, #36]	; (8001114 <HAL_I2C_MspInit+0x138>)
 80010f0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010f2:	4a08      	ldr	r2, [pc, #32]	; (8001114 <HAL_I2C_MspInit+0x138>)
 80010f4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80010f8:	6593      	str	r3, [r2, #88]	; 0x58
 80010fa:	4b06      	ldr	r3, [pc, #24]	; (8001114 <HAL_I2C_MspInit+0x138>)
 80010fc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80010fe:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001102:	60fb      	str	r3, [r7, #12]
 8001104:	68fb      	ldr	r3, [r7, #12]
}
 8001106:	bf00      	nop
 8001108:	37b8      	adds	r7, #184	; 0xb8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	40005400 	.word	0x40005400
 8001114:	40021000 	.word	0x40021000
 8001118:	48000400 	.word	0x48000400
 800111c:	40005800 	.word	0x40005800

08001120 <HAL_QSPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hqspi: QSPI handle pointer
* @retval None
*/
void HAL_QSPI_MspInit(QSPI_HandleTypeDef* hqspi)
{
 8001120:	b580      	push	{r7, lr}
 8001122:	b08a      	sub	sp, #40	; 0x28
 8001124:	af00      	add	r7, sp, #0
 8001126:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001128:	f107 0314 	add.w	r3, r7, #20
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]
  if(hqspi->Instance==QUADSPI)
 8001138:	687b      	ldr	r3, [r7, #4]
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	4a17      	ldr	r2, [pc, #92]	; (800119c <HAL_QSPI_MspInit+0x7c>)
 800113e:	4293      	cmp	r3, r2
 8001140:	d128      	bne.n	8001194 <HAL_QSPI_MspInit+0x74>
  {
  /* USER CODE BEGIN QUADSPI_MspInit 0 */

  /* USER CODE END QUADSPI_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_QSPI_CLK_ENABLE();
 8001142:	4b17      	ldr	r3, [pc, #92]	; (80011a0 <HAL_QSPI_MspInit+0x80>)
 8001144:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001146:	4a16      	ldr	r2, [pc, #88]	; (80011a0 <HAL_QSPI_MspInit+0x80>)
 8001148:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800114c:	6513      	str	r3, [r2, #80]	; 0x50
 800114e:	4b14      	ldr	r3, [pc, #80]	; (80011a0 <HAL_QSPI_MspInit+0x80>)
 8001150:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8001152:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001156:	613b      	str	r3, [r7, #16]
 8001158:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOE_CLK_ENABLE();
 800115a:	4b11      	ldr	r3, [pc, #68]	; (80011a0 <HAL_QSPI_MspInit+0x80>)
 800115c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800115e:	4a10      	ldr	r2, [pc, #64]	; (80011a0 <HAL_QSPI_MspInit+0x80>)
 8001160:	f043 0310 	orr.w	r3, r3, #16
 8001164:	64d3      	str	r3, [r2, #76]	; 0x4c
 8001166:	4b0e      	ldr	r3, [pc, #56]	; (80011a0 <HAL_QSPI_MspInit+0x80>)
 8001168:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800116a:	f003 0310 	and.w	r3, r3, #16
 800116e:	60fb      	str	r3, [r7, #12]
 8001170:	68fb      	ldr	r3, [r7, #12]
    PE12     ------> QUADSPI_BK1_IO0
    PE13     ------> QUADSPI_BK1_IO1
    PE14     ------> QUADSPI_BK1_IO2
    PE15     ------> QUADSPI_BK1_IO3
    */
    GPIO_InitStruct.Pin = QSPI_CLK_Pin|QSPI_CS_Pin|QSPI_D0_Pin|QSPI_D1_Pin
 8001172:	f44f 437c 	mov.w	r3, #64512	; 0xfc00
 8001176:	617b      	str	r3, [r7, #20]
                          |QSPI_D2_Pin|QSPI_D3_Pin;
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001178:	2302      	movs	r3, #2
 800117a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001180:	2303      	movs	r3, #3
 8001182:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_QUADSPI;
 8001184:	230a      	movs	r3, #10
 8001186:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001188:	f107 0314 	add.w	r3, r7, #20
 800118c:	4619      	mov	r1, r3
 800118e:	4805      	ldr	r0, [pc, #20]	; (80011a4 <HAL_QSPI_MspInit+0x84>)
 8001190:	f000 fb7c 	bl	800188c <HAL_GPIO_Init>
  /* USER CODE BEGIN QUADSPI_MspInit 1 */

  /* USER CODE END QUADSPI_MspInit 1 */
  }

}
 8001194:	bf00      	nop
 8001196:	3728      	adds	r7, #40	; 0x28
 8001198:	46bd      	mov	sp, r7
 800119a:	bd80      	pop	{r7, pc}
 800119c:	a0001000 	.word	0xa0001000
 80011a0:	40021000 	.word	0x40021000
 80011a4:	48001000 	.word	0x48001000

080011a8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80011a8:	b580      	push	{r7, lr}
 80011aa:	b08a      	sub	sp, #40	; 0x28
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80011b0:	f107 0314 	add.w	r3, r7, #20
 80011b4:	2200      	movs	r2, #0
 80011b6:	601a      	str	r2, [r3, #0]
 80011b8:	605a      	str	r2, [r3, #4]
 80011ba:	609a      	str	r2, [r3, #8]
 80011bc:	60da      	str	r2, [r3, #12]
 80011be:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	681b      	ldr	r3, [r3, #0]
 80011c4:	4a17      	ldr	r2, [pc, #92]	; (8001224 <HAL_SPI_MspInit+0x7c>)
 80011c6:	4293      	cmp	r3, r2
 80011c8:	d127      	bne.n	800121a <HAL_SPI_MspInit+0x72>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 80011ca:	4b17      	ldr	r3, [pc, #92]	; (8001228 <HAL_SPI_MspInit+0x80>)
 80011cc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011ce:	4a16      	ldr	r2, [pc, #88]	; (8001228 <HAL_SPI_MspInit+0x80>)
 80011d0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80011d4:	6593      	str	r3, [r2, #88]	; 0x58
 80011d6:	4b14      	ldr	r3, [pc, #80]	; (8001228 <HAL_SPI_MspInit+0x80>)
 80011d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80011da:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80011de:	613b      	str	r3, [r7, #16]
 80011e0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 80011e2:	4b11      	ldr	r3, [pc, #68]	; (8001228 <HAL_SPI_MspInit+0x80>)
 80011e4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011e6:	4a10      	ldr	r2, [pc, #64]	; (8001228 <HAL_SPI_MspInit+0x80>)
 80011e8:	f043 0308 	orr.w	r3, r3, #8
 80011ec:	64d3      	str	r3, [r2, #76]	; 0x4c
 80011ee:	4b0e      	ldr	r3, [pc, #56]	; (8001228 <HAL_SPI_MspInit+0x80>)
 80011f0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80011f2:	f003 0308 	and.w	r3, r3, #8
 80011f6:	60fb      	str	r3, [r7, #12]
 80011f8:	68fb      	ldr	r3, [r7, #12]
    /**SPI2 GPIO Configuration
    PD1     ------> SPI2_SCK
    PD3     ------> SPI2_MISO
    PD4     ------> SPI2_MOSI
    */
    GPIO_InitStruct.Pin = MEMS_SCK_Pin|MEMS_MISO_Pin|MEMS_MOSI_Pin;
 80011fa:	231a      	movs	r3, #26
 80011fc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80011fe:	2302      	movs	r3, #2
 8001200:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001202:	2300      	movs	r3, #0
 8001204:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001206:	2303      	movs	r3, #3
 8001208:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 800120a:	2305      	movs	r3, #5
 800120c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800120e:	f107 0314 	add.w	r3, r7, #20
 8001212:	4619      	mov	r1, r3
 8001214:	4805      	ldr	r0, [pc, #20]	; (800122c <HAL_SPI_MspInit+0x84>)
 8001216:	f000 fb39 	bl	800188c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800121a:	bf00      	nop
 800121c:	3728      	adds	r7, #40	; 0x28
 800121e:	46bd      	mov	sp, r7
 8001220:	bd80      	pop	{r7, pc}
 8001222:	bf00      	nop
 8001224:	40003800 	.word	0x40003800
 8001228:	40021000 	.word	0x40021000
 800122c:	48000c00 	.word	0x48000c00

08001230 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b0ac      	sub	sp, #176	; 0xb0
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001238:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 800123c:	2200      	movs	r2, #0
 800123e:	601a      	str	r2, [r3, #0]
 8001240:	605a      	str	r2, [r3, #4]
 8001242:	609a      	str	r2, [r3, #8]
 8001244:	60da      	str	r2, [r3, #12]
 8001246:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001248:	f107 0314 	add.w	r3, r7, #20
 800124c:	2288      	movs	r2, #136	; 0x88
 800124e:	2100      	movs	r1, #0
 8001250:	4618      	mov	r0, r3
 8001252:	f007 fc95 	bl	8008b80 <memset>
  if(huart->Instance==USART2)
 8001256:	687b      	ldr	r3, [r7, #4]
 8001258:	681b      	ldr	r3, [r3, #0]
 800125a:	4a21      	ldr	r2, [pc, #132]	; (80012e0 <HAL_UART_MspInit+0xb0>)
 800125c:	4293      	cmp	r3, r2
 800125e:	d13a      	bne.n	80012d6 <HAL_UART_MspInit+0xa6>
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
  /** Initializes the peripherals clock
  */
    PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8001260:	2302      	movs	r3, #2
 8001262:	617b      	str	r3, [r7, #20]
    PeriphClkInit.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8001264:	2300      	movs	r3, #0
 8001266:	653b      	str	r3, [r7, #80]	; 0x50
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001268:	f107 0314 	add.w	r3, r7, #20
 800126c:	4618      	mov	r0, r3
 800126e:	f003 f895 	bl	800439c <HAL_RCCEx_PeriphCLKConfig>
 8001272:	4603      	mov	r3, r0
 8001274:	2b00      	cmp	r3, #0
 8001276:	d001      	beq.n	800127c <HAL_UART_MspInit+0x4c>
    {
      Error_Handler();
 8001278:	f7ff fcf6 	bl	8000c68 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800127c:	4b19      	ldr	r3, [pc, #100]	; (80012e4 <HAL_UART_MspInit+0xb4>)
 800127e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001280:	4a18      	ldr	r2, [pc, #96]	; (80012e4 <HAL_UART_MspInit+0xb4>)
 8001282:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001286:	6593      	str	r3, [r2, #88]	; 0x58
 8001288:	4b16      	ldr	r3, [pc, #88]	; (80012e4 <HAL_UART_MspInit+0xb4>)
 800128a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800128c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001290:	613b      	str	r3, [r7, #16]
 8001292:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8001294:	4b13      	ldr	r3, [pc, #76]	; (80012e4 <HAL_UART_MspInit+0xb4>)
 8001296:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001298:	4a12      	ldr	r2, [pc, #72]	; (80012e4 <HAL_UART_MspInit+0xb4>)
 800129a:	f043 0308 	orr.w	r3, r3, #8
 800129e:	64d3      	str	r3, [r2, #76]	; 0x4c
 80012a0:	4b10      	ldr	r3, [pc, #64]	; (80012e4 <HAL_UART_MspInit+0xb4>)
 80012a2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80012a4:	f003 0308 	and.w	r3, r3, #8
 80012a8:	60fb      	str	r3, [r7, #12]
 80012aa:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PD5     ------> USART2_TX
    PD6     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80012ac:	2360      	movs	r3, #96	; 0x60
 80012ae:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80012b2:	2302      	movs	r3, #2
 80012b4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80012b8:	2301      	movs	r3, #1
 80012ba:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80012be:	2303      	movs	r3, #3
 80012c0:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80012c4:	2307      	movs	r3, #7
 80012c6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80012ca:	f107 039c 	add.w	r3, r7, #156	; 0x9c
 80012ce:	4619      	mov	r1, r3
 80012d0:	4805      	ldr	r0, [pc, #20]	; (80012e8 <HAL_UART_MspInit+0xb8>)
 80012d2:	f000 fadb 	bl	800188c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80012d6:	bf00      	nop
 80012d8:	37b0      	adds	r7, #176	; 0xb0
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	40004400 	.word	0x40004400
 80012e4:	40021000 	.word	0x40021000
 80012e8:	48000c00 	.word	0x48000c00

080012ec <HAL_SAI_MspInit>:
}

static uint32_t SAI1_client =0;

void HAL_SAI_MspInit(SAI_HandleTypeDef* hsai)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	b08a      	sub	sp, #40	; 0x28
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct;
/* SAI1 */
    if(hsai->Instance==SAI1_Block_A)
 80012f4:	687b      	ldr	r3, [r7, #4]
 80012f6:	681b      	ldr	r3, [r3, #0]
 80012f8:	4a33      	ldr	r2, [pc, #204]	; (80013c8 <HAL_SAI_MspInit+0xdc>)
 80012fa:	4293      	cmp	r3, r2
 80012fc:	d135      	bne.n	800136a <HAL_SAI_MspInit+0x7e>
    {
    /* Peripheral clock enable */
    if (SAI1_client == 0)
 80012fe:	4b33      	ldr	r3, [pc, #204]	; (80013cc <HAL_SAI_MspInit+0xe0>)
 8001300:	681b      	ldr	r3, [r3, #0]
 8001302:	2b00      	cmp	r3, #0
 8001304:	d10b      	bne.n	800131e <HAL_SAI_MspInit+0x32>
    {
       __HAL_RCC_SAI1_CLK_ENABLE();
 8001306:	4b32      	ldr	r3, [pc, #200]	; (80013d0 <HAL_SAI_MspInit+0xe4>)
 8001308:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800130a:	4a31      	ldr	r2, [pc, #196]	; (80013d0 <HAL_SAI_MspInit+0xe4>)
 800130c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001310:	6613      	str	r3, [r2, #96]	; 0x60
 8001312:	4b2f      	ldr	r3, [pc, #188]	; (80013d0 <HAL_SAI_MspInit+0xe4>)
 8001314:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001316:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800131a:	613b      	str	r3, [r7, #16]
 800131c:	693b      	ldr	r3, [r7, #16]
    }
    SAI1_client ++;
 800131e:	4b2b      	ldr	r3, [pc, #172]	; (80013cc <HAL_SAI_MspInit+0xe0>)
 8001320:	681b      	ldr	r3, [r3, #0]
 8001322:	3301      	adds	r3, #1
 8001324:	4a29      	ldr	r2, [pc, #164]	; (80013cc <HAL_SAI_MspInit+0xe0>)
 8001326:	6013      	str	r3, [r2, #0]
    PE4     ------> SAI1_FS_A
    PE5     ------> SAI1_SCK_A
    PE6     ------> SAI1_SD_A
    PE9     ------> SAI1_FS_B
    */
    GPIO_InitStruct.Pin = SAI1_MCK_Pin|SAI1_FS_Pin|SAI1_SCK_Pin|SAI1_SD_Pin;
 8001328:	2374      	movs	r3, #116	; 0x74
 800132a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800132c:	2302      	movs	r3, #2
 800132e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001330:	2300      	movs	r3, #0
 8001332:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001334:	2303      	movs	r3, #3
 8001336:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 8001338:	230d      	movs	r3, #13
 800133a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800133c:	f107 0314 	add.w	r3, r7, #20
 8001340:	4619      	mov	r1, r3
 8001342:	4824      	ldr	r0, [pc, #144]	; (80013d4 <HAL_SAI_MspInit+0xe8>)
 8001344:	f000 faa2 	bl	800188c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = AUDIO_CLK_Pin;
 8001348:	f44f 7300 	mov.w	r3, #512	; 0x200
 800134c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800134e:	2302      	movs	r3, #2
 8001350:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001352:	2300      	movs	r3, #0
 8001354:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001356:	2300      	movs	r3, #0
 8001358:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 800135a:	230d      	movs	r3, #13
 800135c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUDIO_CLK_GPIO_Port, &GPIO_InitStruct);
 800135e:	f107 0314 	add.w	r3, r7, #20
 8001362:	4619      	mov	r1, r3
 8001364:	481b      	ldr	r0, [pc, #108]	; (80013d4 <HAL_SAI_MspInit+0xe8>)
 8001366:	f000 fa91 	bl	800188c <HAL_GPIO_Init>

    }
    if(hsai->Instance==SAI1_Block_B)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	4a1a      	ldr	r2, [pc, #104]	; (80013d8 <HAL_SAI_MspInit+0xec>)
 8001370:	4293      	cmp	r3, r2
 8001372:	d124      	bne.n	80013be <HAL_SAI_MspInit+0xd2>
    {
      /* Peripheral clock enable */
      if (SAI1_client == 0)
 8001374:	4b15      	ldr	r3, [pc, #84]	; (80013cc <HAL_SAI_MspInit+0xe0>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	2b00      	cmp	r3, #0
 800137a:	d10b      	bne.n	8001394 <HAL_SAI_MspInit+0xa8>
      {
       __HAL_RCC_SAI1_CLK_ENABLE();
 800137c:	4b14      	ldr	r3, [pc, #80]	; (80013d0 <HAL_SAI_MspInit+0xe4>)
 800137e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001380:	4a13      	ldr	r2, [pc, #76]	; (80013d0 <HAL_SAI_MspInit+0xe4>)
 8001382:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001386:	6613      	str	r3, [r2, #96]	; 0x60
 8001388:	4b11      	ldr	r3, [pc, #68]	; (80013d0 <HAL_SAI_MspInit+0xe4>)
 800138a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800138c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001390:	60fb      	str	r3, [r7, #12]
 8001392:	68fb      	ldr	r3, [r7, #12]
      }
    SAI1_client ++;
 8001394:	4b0d      	ldr	r3, [pc, #52]	; (80013cc <HAL_SAI_MspInit+0xe0>)
 8001396:	681b      	ldr	r3, [r3, #0]
 8001398:	3301      	adds	r3, #1
 800139a:	4a0c      	ldr	r2, [pc, #48]	; (80013cc <HAL_SAI_MspInit+0xe0>)
 800139c:	6013      	str	r3, [r2, #0]

    /**SAI1_B_Block_B GPIO Configuration
    PE7     ------> SAI1_SD_B
    */
    GPIO_InitStruct.Pin = AUDIO_DIN_Pin;
 800139e:	2380      	movs	r3, #128	; 0x80
 80013a0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a2:	2302      	movs	r3, #2
 80013a4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a6:	2300      	movs	r3, #0
 80013a8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013aa:	2303      	movs	r3, #3
 80013ac:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF13_SAI1;
 80013ae:	230d      	movs	r3, #13
 80013b0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(AUDIO_DIN_GPIO_Port, &GPIO_InitStruct);
 80013b2:	f107 0314 	add.w	r3, r7, #20
 80013b6:	4619      	mov	r1, r3
 80013b8:	4806      	ldr	r0, [pc, #24]	; (80013d4 <HAL_SAI_MspInit+0xe8>)
 80013ba:	f000 fa67 	bl	800188c <HAL_GPIO_Init>

    }
}
 80013be:	bf00      	nop
 80013c0:	3728      	adds	r7, #40	; 0x28
 80013c2:	46bd      	mov	sp, r7
 80013c4:	bd80      	pop	{r7, pc}
 80013c6:	bf00      	nop
 80013c8:	40015404 	.word	0x40015404
 80013cc:	200000ac 	.word	0x200000ac
 80013d0:	40021000 	.word	0x40021000
 80013d4:	48001000 	.word	0x48001000
 80013d8:	40015424 	.word	0x40015424

080013dc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80013dc:	b480      	push	{r7}
 80013de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80013e0:	e7fe      	b.n	80013e0 <NMI_Handler+0x4>

080013e2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80013e2:	b480      	push	{r7}
 80013e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80013e6:	e7fe      	b.n	80013e6 <HardFault_Handler+0x4>

080013e8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80013e8:	b480      	push	{r7}
 80013ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80013ec:	e7fe      	b.n	80013ec <MemManage_Handler+0x4>

080013ee <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80013ee:	b480      	push	{r7}
 80013f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80013f2:	e7fe      	b.n	80013f2 <BusFault_Handler+0x4>

080013f4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80013f4:	b480      	push	{r7}
 80013f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80013f8:	e7fe      	b.n	80013f8 <UsageFault_Handler+0x4>

080013fa <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80013fa:	b480      	push	{r7}
 80013fc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80013fe:	bf00      	nop
 8001400:	46bd      	mov	sp, r7
 8001402:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001406:	4770      	bx	lr

08001408 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001408:	b480      	push	{r7}
 800140a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800140c:	bf00      	nop
 800140e:	46bd      	mov	sp, r7
 8001410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001414:	4770      	bx	lr

08001416 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001416:	b480      	push	{r7}
 8001418:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800141a:	bf00      	nop
 800141c:	46bd      	mov	sp, r7
 800141e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001422:	4770      	bx	lr

08001424 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001424:	b580      	push	{r7, lr}
 8001426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001428:	f000 f8da 	bl	80015e0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800142c:	bf00      	nop
 800142e:	bd80      	pop	{r7, pc}

08001430 <OTG_FS_IRQHandler>:

/**
  * @brief This function handles USB OTG FS global interrupt.
  */
void OTG_FS_IRQHandler(void)
{
 8001430:	b580      	push	{r7, lr}
 8001432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN OTG_FS_IRQn 0 */

  /* USER CODE END OTG_FS_IRQn 0 */
  HAL_HCD_IRQHandler(&hhcd_USB_OTG_FS);
 8001434:	4802      	ldr	r0, [pc, #8]	; (8001440 <OTG_FS_IRQHandler+0x10>)
 8001436:	f000 fe51 	bl	80020dc <HAL_HCD_IRQHandler>
  /* USER CODE BEGIN OTG_FS_IRQn 1 */

  /* USER CODE END OTG_FS_IRQn 1 */
}
 800143a:	bf00      	nop
 800143c:	bd80      	pop	{r7, pc}
 800143e:	bf00      	nop
 8001440:	200007b4 	.word	0x200007b4

08001444 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001444:	b580      	push	{r7, lr}
 8001446:	b086      	sub	sp, #24
 8001448:	af00      	add	r7, sp, #0
 800144a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800144c:	4a14      	ldr	r2, [pc, #80]	; (80014a0 <_sbrk+0x5c>)
 800144e:	4b15      	ldr	r3, [pc, #84]	; (80014a4 <_sbrk+0x60>)
 8001450:	1ad3      	subs	r3, r2, r3
 8001452:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001454:	697b      	ldr	r3, [r7, #20]
 8001456:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001458:	4b13      	ldr	r3, [pc, #76]	; (80014a8 <_sbrk+0x64>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	2b00      	cmp	r3, #0
 800145e:	d102      	bne.n	8001466 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001460:	4b11      	ldr	r3, [pc, #68]	; (80014a8 <_sbrk+0x64>)
 8001462:	4a12      	ldr	r2, [pc, #72]	; (80014ac <_sbrk+0x68>)
 8001464:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001466:	4b10      	ldr	r3, [pc, #64]	; (80014a8 <_sbrk+0x64>)
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	687b      	ldr	r3, [r7, #4]
 800146c:	4413      	add	r3, r2
 800146e:	693a      	ldr	r2, [r7, #16]
 8001470:	429a      	cmp	r2, r3
 8001472:	d207      	bcs.n	8001484 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001474:	f007 fb4a 	bl	8008b0c <__errno>
 8001478:	4603      	mov	r3, r0
 800147a:	220c      	movs	r2, #12
 800147c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800147e:	f04f 33ff 	mov.w	r3, #4294967295
 8001482:	e009      	b.n	8001498 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001484:	4b08      	ldr	r3, [pc, #32]	; (80014a8 <_sbrk+0x64>)
 8001486:	681b      	ldr	r3, [r3, #0]
 8001488:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800148a:	4b07      	ldr	r3, [pc, #28]	; (80014a8 <_sbrk+0x64>)
 800148c:	681a      	ldr	r2, [r3, #0]
 800148e:	687b      	ldr	r3, [r7, #4]
 8001490:	4413      	add	r3, r2
 8001492:	4a05      	ldr	r2, [pc, #20]	; (80014a8 <_sbrk+0x64>)
 8001494:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001496:	68fb      	ldr	r3, [r7, #12]
}
 8001498:	4618      	mov	r0, r3
 800149a:	3718      	adds	r7, #24
 800149c:	46bd      	mov	sp, r7
 800149e:	bd80      	pop	{r7, pc}
 80014a0:	20018000 	.word	0x20018000
 80014a4:	00000400 	.word	0x00000400
 80014a8:	200000b0 	.word	0x200000b0
 80014ac:	20000ac8 	.word	0x20000ac8

080014b0 <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @retval None
  */

void SystemInit(void)
{
 80014b0:	b480      	push	{r7}
 80014b2:	af00      	add	r7, sp, #0
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET;
#endif

  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 20U)|(3UL << 22U));  /* set CP10 and CP11 Full Access */
 80014b4:	4b06      	ldr	r3, [pc, #24]	; (80014d0 <SystemInit+0x20>)
 80014b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80014ba:	4a05      	ldr	r2, [pc, #20]	; (80014d0 <SystemInit+0x20>)
 80014bc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80014c0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
#endif
}
 80014c4:	bf00      	nop
 80014c6:	46bd      	mov	sp, r7
 80014c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014cc:	4770      	bx	lr
 80014ce:	bf00      	nop
 80014d0:	e000ed00 	.word	0xe000ed00

080014d4 <Reset_Handler>:

    .section	.text.Reset_Handler
	.weak	Reset_Handler
	.type	Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack    /* Set stack pointer */
 80014d4:	f8df d034 	ldr.w	sp, [pc, #52]	; 800150c <LoopForever+0x2>

/* Call the clock system initialization function.*/
    bl  SystemInit
 80014d8:	f7ff ffea 	bl	80014b0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 80014dc:	480c      	ldr	r0, [pc, #48]	; (8001510 <LoopForever+0x6>)
  ldr r1, =_edata
 80014de:	490d      	ldr	r1, [pc, #52]	; (8001514 <LoopForever+0xa>)
  ldr r2, =_sidata
 80014e0:	4a0d      	ldr	r2, [pc, #52]	; (8001518 <LoopForever+0xe>)
  movs r3, #0
 80014e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80014e4:	e002      	b.n	80014ec <LoopCopyDataInit>

080014e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80014e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80014e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80014ea:	3304      	adds	r3, #4

080014ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80014ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80014ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80014f0:	d3f9      	bcc.n	80014e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80014f2:	4a0a      	ldr	r2, [pc, #40]	; (800151c <LoopForever+0x12>)
  ldr r4, =_ebss
 80014f4:	4c0a      	ldr	r4, [pc, #40]	; (8001520 <LoopForever+0x16>)
  movs r3, #0
 80014f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80014f8:	e001      	b.n	80014fe <LoopFillZerobss>

080014fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80014fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80014fc:	3204      	adds	r2, #4

080014fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80014fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001500:	d3fb      	bcc.n	80014fa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001502:	f007 fb09 	bl	8008b18 <__libc_init_array>
/* Call the application's entry point.*/
	bl	main
 8001506:	f7fe ffdb 	bl	80004c0 <main>

0800150a <LoopForever>:

LoopForever:
    b LoopForever
 800150a:	e7fe      	b.n	800150a <LoopForever>
  ldr   sp, =_estack    /* Set stack pointer */
 800150c:	20018000 	.word	0x20018000
  ldr r0, =_sdata
 8001510:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001514:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8001518:	08008d94 	.word	0x08008d94
  ldr r2, =_sbss
 800151c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8001520:	20000ac8 	.word	0x20000ac8

08001524 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section	.text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
	b	Infinite_Loop
 8001524:	e7fe      	b.n	8001524 <ADC1_2_IRQHandler>
	...

08001528 <HAL_Init>:
  *         each 1ms in the SysTick_Handler() interrupt handler.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b082      	sub	sp, #8
 800152c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800152e:	2300      	movs	r3, #0
 8001530:	71fb      	strb	r3, [r7, #7]
#if (DATA_CACHE_ENABLE == 0)
   __HAL_FLASH_DATA_CACHE_DISABLE();
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001532:	4b0c      	ldr	r3, [pc, #48]	; (8001564 <HAL_Init+0x3c>)
 8001534:	681b      	ldr	r3, [r3, #0]
 8001536:	4a0b      	ldr	r2, [pc, #44]	; (8001564 <HAL_Init+0x3c>)
 8001538:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800153c:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800153e:	2003      	movs	r0, #3
 8001540:	f000 f962 	bl	8001808 <HAL_NVIC_SetPriorityGrouping>

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8001544:	2000      	movs	r0, #0
 8001546:	f000 f80f 	bl	8001568 <HAL_InitTick>
 800154a:	4603      	mov	r3, r0
 800154c:	2b00      	cmp	r3, #0
 800154e:	d002      	beq.n	8001556 <HAL_Init+0x2e>
  {
    status = HAL_ERROR;
 8001550:	2301      	movs	r3, #1
 8001552:	71fb      	strb	r3, [r7, #7]
 8001554:	e001      	b.n	800155a <HAL_Init+0x32>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 8001556:	f7ff fd1d 	bl	8000f94 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800155a:	79fb      	ldrb	r3, [r7, #7]
}
 800155c:	4618      	mov	r0, r3
 800155e:	3708      	adds	r7, #8
 8001560:	46bd      	mov	sp, r7
 8001562:	bd80      	pop	{r7, pc}
 8001564:	40022000 	.word	0x40022000

08001568 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority  Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001568:	b580      	push	{r7, lr}
 800156a:	b084      	sub	sp, #16
 800156c:	af00      	add	r7, sp, #0
 800156e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 8001570:	2300      	movs	r3, #0
 8001572:	73fb      	strb	r3, [r7, #15]

  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that doesn't take the value zero)*/
  if ((uint32_t)uwTickFreq != 0U)
 8001574:	4b17      	ldr	r3, [pc, #92]	; (80015d4 <HAL_InitTick+0x6c>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d023      	beq.n	80015c4 <HAL_InitTick+0x5c>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / (uint32_t)uwTickFreq)) == 0U)
 800157c:	4b16      	ldr	r3, [pc, #88]	; (80015d8 <HAL_InitTick+0x70>)
 800157e:	681a      	ldr	r2, [r3, #0]
 8001580:	4b14      	ldr	r3, [pc, #80]	; (80015d4 <HAL_InitTick+0x6c>)
 8001582:	781b      	ldrb	r3, [r3, #0]
 8001584:	4619      	mov	r1, r3
 8001586:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800158a:	fbb3 f3f1 	udiv	r3, r3, r1
 800158e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001592:	4618      	mov	r0, r3
 8001594:	f000 f96d 	bl	8001872 <HAL_SYSTICK_Config>
 8001598:	4603      	mov	r3, r0
 800159a:	2b00      	cmp	r3, #0
 800159c:	d10f      	bne.n	80015be <HAL_InitTick+0x56>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800159e:	687b      	ldr	r3, [r7, #4]
 80015a0:	2b0f      	cmp	r3, #15
 80015a2:	d809      	bhi.n	80015b8 <HAL_InitTick+0x50>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80015a4:	2200      	movs	r2, #0
 80015a6:	6879      	ldr	r1, [r7, #4]
 80015a8:	f04f 30ff 	mov.w	r0, #4294967295
 80015ac:	f000 f937 	bl	800181e <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 80015b0:	4a0a      	ldr	r2, [pc, #40]	; (80015dc <HAL_InitTick+0x74>)
 80015b2:	687b      	ldr	r3, [r7, #4]
 80015b4:	6013      	str	r3, [r2, #0]
 80015b6:	e007      	b.n	80015c8 <HAL_InitTick+0x60>
      }
      else
      {
        status = HAL_ERROR;
 80015b8:	2301      	movs	r3, #1
 80015ba:	73fb      	strb	r3, [r7, #15]
 80015bc:	e004      	b.n	80015c8 <HAL_InitTick+0x60>
      }
    }
    else
    {
      status = HAL_ERROR;
 80015be:	2301      	movs	r3, #1
 80015c0:	73fb      	strb	r3, [r7, #15]
 80015c2:	e001      	b.n	80015c8 <HAL_InitTick+0x60>
    }
  }
  else
  {
    status = HAL_ERROR;
 80015c4:	2301      	movs	r3, #1
 80015c6:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 80015c8:	7bfb      	ldrb	r3, [r7, #15]
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3710      	adds	r7, #16
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	20000008 	.word	0x20000008
 80015d8:	20000000 	.word	0x20000000
 80015dc:	20000004 	.word	0x20000004

080015e0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80015e0:	b480      	push	{r7}
 80015e2:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 80015e4:	4b06      	ldr	r3, [pc, #24]	; (8001600 <HAL_IncTick+0x20>)
 80015e6:	781b      	ldrb	r3, [r3, #0]
 80015e8:	461a      	mov	r2, r3
 80015ea:	4b06      	ldr	r3, [pc, #24]	; (8001604 <HAL_IncTick+0x24>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	4413      	add	r3, r2
 80015f0:	4a04      	ldr	r2, [pc, #16]	; (8001604 <HAL_IncTick+0x24>)
 80015f2:	6013      	str	r3, [r2, #0]
}
 80015f4:	bf00      	nop
 80015f6:	46bd      	mov	sp, r7
 80015f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80015fc:	4770      	bx	lr
 80015fe:	bf00      	nop
 8001600:	20000008 	.word	0x20000008
 8001604:	200003d8 	.word	0x200003d8

08001608 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001608:	b480      	push	{r7}
 800160a:	af00      	add	r7, sp, #0
  return uwTick;
 800160c:	4b03      	ldr	r3, [pc, #12]	; (800161c <HAL_GetTick+0x14>)
 800160e:	681b      	ldr	r3, [r3, #0]
}
 8001610:	4618      	mov	r0, r3
 8001612:	46bd      	mov	sp, r7
 8001614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	200003d8 	.word	0x200003d8

08001620 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001620:	b580      	push	{r7, lr}
 8001622:	b084      	sub	sp, #16
 8001624:	af00      	add	r7, sp, #0
 8001626:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001628:	f7ff ffee 	bl	8001608 <HAL_GetTick>
 800162c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	60fb      	str	r3, [r7, #12]

  /* Add a period to guaranty minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001638:	d005      	beq.n	8001646 <HAL_Delay+0x26>
  {
    wait += (uint32_t)uwTickFreq;
 800163a:	4b0a      	ldr	r3, [pc, #40]	; (8001664 <HAL_Delay+0x44>)
 800163c:	781b      	ldrb	r3, [r3, #0]
 800163e:	461a      	mov	r2, r3
 8001640:	68fb      	ldr	r3, [r7, #12]
 8001642:	4413      	add	r3, r2
 8001644:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001646:	bf00      	nop
 8001648:	f7ff ffde 	bl	8001608 <HAL_GetTick>
 800164c:	4602      	mov	r2, r0
 800164e:	68bb      	ldr	r3, [r7, #8]
 8001650:	1ad3      	subs	r3, r2, r3
 8001652:	68fa      	ldr	r2, [r7, #12]
 8001654:	429a      	cmp	r2, r3
 8001656:	d8f7      	bhi.n	8001648 <HAL_Delay+0x28>
  {
  }
}
 8001658:	bf00      	nop
 800165a:	bf00      	nop
 800165c:	3710      	adds	r7, #16
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20000008 	.word	0x20000008

08001668 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001668:	b480      	push	{r7}
 800166a:	b085      	sub	sp, #20
 800166c:	af00      	add	r7, sp, #0
 800166e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001670:	687b      	ldr	r3, [r7, #4]
 8001672:	f003 0307 	and.w	r3, r3, #7
 8001676:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001678:	4b0c      	ldr	r3, [pc, #48]	; (80016ac <__NVIC_SetPriorityGrouping+0x44>)
 800167a:	68db      	ldr	r3, [r3, #12]
 800167c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800167e:	68ba      	ldr	r2, [r7, #8]
 8001680:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001684:	4013      	ands	r3, r2
 8001686:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800168c:	68bb      	ldr	r3, [r7, #8]
 800168e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001690:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001694:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001698:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800169a:	4a04      	ldr	r2, [pc, #16]	; (80016ac <__NVIC_SetPriorityGrouping+0x44>)
 800169c:	68bb      	ldr	r3, [r7, #8]
 800169e:	60d3      	str	r3, [r2, #12]
}
 80016a0:	bf00      	nop
 80016a2:	3714      	adds	r7, #20
 80016a4:	46bd      	mov	sp, r7
 80016a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016aa:	4770      	bx	lr
 80016ac:	e000ed00 	.word	0xe000ed00

080016b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80016b0:	b480      	push	{r7}
 80016b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80016b4:	4b04      	ldr	r3, [pc, #16]	; (80016c8 <__NVIC_GetPriorityGrouping+0x18>)
 80016b6:	68db      	ldr	r3, [r3, #12]
 80016b8:	0a1b      	lsrs	r3, r3, #8
 80016ba:	f003 0307 	and.w	r3, r3, #7
}
 80016be:	4618      	mov	r0, r3
 80016c0:	46bd      	mov	sp, r7
 80016c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016c6:	4770      	bx	lr
 80016c8:	e000ed00 	.word	0xe000ed00

080016cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80016cc:	b480      	push	{r7}
 80016ce:	b083      	sub	sp, #12
 80016d0:	af00      	add	r7, sp, #0
 80016d2:	4603      	mov	r3, r0
 80016d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80016d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016da:	2b00      	cmp	r3, #0
 80016dc:	db0b      	blt.n	80016f6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80016de:	79fb      	ldrb	r3, [r7, #7]
 80016e0:	f003 021f 	and.w	r2, r3, #31
 80016e4:	4907      	ldr	r1, [pc, #28]	; (8001704 <__NVIC_EnableIRQ+0x38>)
 80016e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80016ea:	095b      	lsrs	r3, r3, #5
 80016ec:	2001      	movs	r0, #1
 80016ee:	fa00 f202 	lsl.w	r2, r0, r2
 80016f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 80016f6:	bf00      	nop
 80016f8:	370c      	adds	r7, #12
 80016fa:	46bd      	mov	sp, r7
 80016fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001700:	4770      	bx	lr
 8001702:	bf00      	nop
 8001704:	e000e100 	.word	0xe000e100

08001708 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001708:	b480      	push	{r7}
 800170a:	b083      	sub	sp, #12
 800170c:	af00      	add	r7, sp, #0
 800170e:	4603      	mov	r3, r0
 8001710:	6039      	str	r1, [r7, #0]
 8001712:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001714:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001718:	2b00      	cmp	r3, #0
 800171a:	db0a      	blt.n	8001732 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800171c:	683b      	ldr	r3, [r7, #0]
 800171e:	b2da      	uxtb	r2, r3
 8001720:	490c      	ldr	r1, [pc, #48]	; (8001754 <__NVIC_SetPriority+0x4c>)
 8001722:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001726:	0112      	lsls	r2, r2, #4
 8001728:	b2d2      	uxtb	r2, r2
 800172a:	440b      	add	r3, r1
 800172c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001730:	e00a      	b.n	8001748 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001732:	683b      	ldr	r3, [r7, #0]
 8001734:	b2da      	uxtb	r2, r3
 8001736:	4908      	ldr	r1, [pc, #32]	; (8001758 <__NVIC_SetPriority+0x50>)
 8001738:	79fb      	ldrb	r3, [r7, #7]
 800173a:	f003 030f 	and.w	r3, r3, #15
 800173e:	3b04      	subs	r3, #4
 8001740:	0112      	lsls	r2, r2, #4
 8001742:	b2d2      	uxtb	r2, r2
 8001744:	440b      	add	r3, r1
 8001746:	761a      	strb	r2, [r3, #24]
}
 8001748:	bf00      	nop
 800174a:	370c      	adds	r7, #12
 800174c:	46bd      	mov	sp, r7
 800174e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001752:	4770      	bx	lr
 8001754:	e000e100 	.word	0xe000e100
 8001758:	e000ed00 	.word	0xe000ed00

0800175c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800175c:	b480      	push	{r7}
 800175e:	b089      	sub	sp, #36	; 0x24
 8001760:	af00      	add	r7, sp, #0
 8001762:	60f8      	str	r0, [r7, #12]
 8001764:	60b9      	str	r1, [r7, #8]
 8001766:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001768:	68fb      	ldr	r3, [r7, #12]
 800176a:	f003 0307 	and.w	r3, r3, #7
 800176e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001770:	69fb      	ldr	r3, [r7, #28]
 8001772:	f1c3 0307 	rsb	r3, r3, #7
 8001776:	2b04      	cmp	r3, #4
 8001778:	bf28      	it	cs
 800177a:	2304      	movcs	r3, #4
 800177c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800177e:	69fb      	ldr	r3, [r7, #28]
 8001780:	3304      	adds	r3, #4
 8001782:	2b06      	cmp	r3, #6
 8001784:	d902      	bls.n	800178c <NVIC_EncodePriority+0x30>
 8001786:	69fb      	ldr	r3, [r7, #28]
 8001788:	3b03      	subs	r3, #3
 800178a:	e000      	b.n	800178e <NVIC_EncodePriority+0x32>
 800178c:	2300      	movs	r3, #0
 800178e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001790:	f04f 32ff 	mov.w	r2, #4294967295
 8001794:	69bb      	ldr	r3, [r7, #24]
 8001796:	fa02 f303 	lsl.w	r3, r2, r3
 800179a:	43da      	mvns	r2, r3
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	401a      	ands	r2, r3
 80017a0:	697b      	ldr	r3, [r7, #20]
 80017a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80017a4:	f04f 31ff 	mov.w	r1, #4294967295
 80017a8:	697b      	ldr	r3, [r7, #20]
 80017aa:	fa01 f303 	lsl.w	r3, r1, r3
 80017ae:	43d9      	mvns	r1, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80017b4:	4313      	orrs	r3, r2
         );
}
 80017b6:	4618      	mov	r0, r3
 80017b8:	3724      	adds	r7, #36	; 0x24
 80017ba:	46bd      	mov	sp, r7
 80017bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c0:	4770      	bx	lr
	...

080017c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80017c4:	b580      	push	{r7, lr}
 80017c6:	b082      	sub	sp, #8
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80017cc:	687b      	ldr	r3, [r7, #4]
 80017ce:	3b01      	subs	r3, #1
 80017d0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80017d4:	d301      	bcc.n	80017da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80017d6:	2301      	movs	r3, #1
 80017d8:	e00f      	b.n	80017fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80017da:	4a0a      	ldr	r2, [pc, #40]	; (8001804 <SysTick_Config+0x40>)
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	3b01      	subs	r3, #1
 80017e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80017e2:	210f      	movs	r1, #15
 80017e4:	f04f 30ff 	mov.w	r0, #4294967295
 80017e8:	f7ff ff8e 	bl	8001708 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80017ec:	4b05      	ldr	r3, [pc, #20]	; (8001804 <SysTick_Config+0x40>)
 80017ee:	2200      	movs	r2, #0
 80017f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80017f2:	4b04      	ldr	r3, [pc, #16]	; (8001804 <SysTick_Config+0x40>)
 80017f4:	2207      	movs	r2, #7
 80017f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80017f8:	2300      	movs	r3, #0
}
 80017fa:	4618      	mov	r0, r3
 80017fc:	3708      	adds	r7, #8
 80017fe:	46bd      	mov	sp, r7
 8001800:	bd80      	pop	{r7, pc}
 8001802:	bf00      	nop
 8001804:	e000e010 	.word	0xe000e010

08001808 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001808:	b580      	push	{r7, lr}
 800180a:	b082      	sub	sp, #8
 800180c:	af00      	add	r7, sp, #0
 800180e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001810:	6878      	ldr	r0, [r7, #4]
 8001812:	f7ff ff29 	bl	8001668 <__NVIC_SetPriorityGrouping>
}
 8001816:	bf00      	nop
 8001818:	3708      	adds	r7, #8
 800181a:	46bd      	mov	sp, r7
 800181c:	bd80      	pop	{r7, pc}

0800181e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800181e:	b580      	push	{r7, lr}
 8001820:	b086      	sub	sp, #24
 8001822:	af00      	add	r7, sp, #0
 8001824:	4603      	mov	r3, r0
 8001826:	60b9      	str	r1, [r7, #8]
 8001828:	607a      	str	r2, [r7, #4]
 800182a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 800182c:	2300      	movs	r3, #0
 800182e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8001830:	f7ff ff3e 	bl	80016b0 <__NVIC_GetPriorityGrouping>
 8001834:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001836:	687a      	ldr	r2, [r7, #4]
 8001838:	68b9      	ldr	r1, [r7, #8]
 800183a:	6978      	ldr	r0, [r7, #20]
 800183c:	f7ff ff8e 	bl	800175c <NVIC_EncodePriority>
 8001840:	4602      	mov	r2, r0
 8001842:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001846:	4611      	mov	r1, r2
 8001848:	4618      	mov	r0, r3
 800184a:	f7ff ff5d 	bl	8001708 <__NVIC_SetPriority>
}
 800184e:	bf00      	nop
 8001850:	3718      	adds	r7, #24
 8001852:	46bd      	mov	sp, r7
 8001854:	bd80      	pop	{r7, pc}

08001856 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001856:	b580      	push	{r7, lr}
 8001858:	b082      	sub	sp, #8
 800185a:	af00      	add	r7, sp, #0
 800185c:	4603      	mov	r3, r0
 800185e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001860:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001864:	4618      	mov	r0, r3
 8001866:	f7ff ff31 	bl	80016cc <__NVIC_EnableIRQ>
}
 800186a:	bf00      	nop
 800186c:	3708      	adds	r7, #8
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b082      	sub	sp, #8
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800187a:	6878      	ldr	r0, [r7, #4]
 800187c:	f7ff ffa2 	bl	80017c4 <SysTick_Config>
 8001880:	4603      	mov	r3, r0
}
 8001882:	4618      	mov	r0, r3
 8001884:	3708      	adds	r7, #8
 8001886:	46bd      	mov	sp, r7
 8001888:	bd80      	pop	{r7, pc}
	...

0800188c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800188c:	b480      	push	{r7}
 800188e:	b087      	sub	sp, #28
 8001890:	af00      	add	r7, sp, #0
 8001892:	6078      	str	r0, [r7, #4]
 8001894:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001896:	2300      	movs	r3, #0
 8001898:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800189a:	e17f      	b.n	8001b9c <HAL_GPIO_Init+0x310>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1uL << position);
 800189c:	683b      	ldr	r3, [r7, #0]
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	2101      	movs	r1, #1
 80018a2:	697b      	ldr	r3, [r7, #20]
 80018a4:	fa01 f303 	lsl.w	r3, r1, r3
 80018a8:	4013      	ands	r3, r2
 80018aa:	60fb      	str	r3, [r7, #12]

    if (iocurrent != 0x00u)
 80018ac:	68fb      	ldr	r3, [r7, #12]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	f000 8171 	beq.w	8001b96 <HAL_GPIO_Init+0x30a>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 80018b4:	683b      	ldr	r3, [r7, #0]
 80018b6:	685b      	ldr	r3, [r3, #4]
 80018b8:	f003 0303 	and.w	r3, r3, #3
 80018bc:	2b01      	cmp	r3, #1
 80018be:	d005      	beq.n	80018cc <HAL_GPIO_Init+0x40>
 80018c0:	683b      	ldr	r3, [r7, #0]
 80018c2:	685b      	ldr	r3, [r3, #4]
 80018c4:	f003 0303 	and.w	r3, r3, #3
 80018c8:	2b02      	cmp	r3, #2
 80018ca:	d130      	bne.n	800192e <HAL_GPIO_Init+0xa2>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 80018cc:	687b      	ldr	r3, [r7, #4]
 80018ce:	689b      	ldr	r3, [r3, #8]
 80018d0:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2u));
 80018d2:	697b      	ldr	r3, [r7, #20]
 80018d4:	005b      	lsls	r3, r3, #1
 80018d6:	2203      	movs	r2, #3
 80018d8:	fa02 f303 	lsl.w	r3, r2, r3
 80018dc:	43db      	mvns	r3, r3
 80018de:	693a      	ldr	r2, [r7, #16]
 80018e0:	4013      	ands	r3, r2
 80018e2:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2u));
 80018e4:	683b      	ldr	r3, [r7, #0]
 80018e6:	68da      	ldr	r2, [r3, #12]
 80018e8:	697b      	ldr	r3, [r7, #20]
 80018ea:	005b      	lsls	r3, r3, #1
 80018ec:	fa02 f303 	lsl.w	r3, r2, r3
 80018f0:	693a      	ldr	r2, [r7, #16]
 80018f2:	4313      	orrs	r3, r2
 80018f4:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	693a      	ldr	r2, [r7, #16]
 80018fa:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80018fc:	687b      	ldr	r3, [r7, #4]
 80018fe:	685b      	ldr	r3, [r3, #4]
 8001900:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8001902:	2201      	movs	r2, #1
 8001904:	697b      	ldr	r3, [r7, #20]
 8001906:	fa02 f303 	lsl.w	r3, r2, r3
 800190a:	43db      	mvns	r3, r3
 800190c:	693a      	ldr	r2, [r7, #16]
 800190e:	4013      	ands	r3, r2
 8001910:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001912:	683b      	ldr	r3, [r7, #0]
 8001914:	685b      	ldr	r3, [r3, #4]
 8001916:	091b      	lsrs	r3, r3, #4
 8001918:	f003 0201 	and.w	r2, r3, #1
 800191c:	697b      	ldr	r3, [r7, #20]
 800191e:	fa02 f303 	lsl.w	r3, r2, r3
 8001922:	693a      	ldr	r2, [r7, #16]
 8001924:	4313      	orrs	r3, r2
 8001926:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	693a      	ldr	r2, [r7, #16]
 800192c:	605a      	str	r2, [r3, #4]
      }

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx)

      /* In case of Analog mode, check if ADC control mode is selected */
      if((GPIO_Init->Mode & GPIO_MODE_ANALOG) == GPIO_MODE_ANALOG)
 800192e:	683b      	ldr	r3, [r7, #0]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	f003 0303 	and.w	r3, r3, #3
 8001936:	2b03      	cmp	r3, #3
 8001938:	d118      	bne.n	800196c <HAL_GPIO_Init+0xe0>
      {
        /* Configure the IO Output Type */
        temp = GPIOx->ASCR;
 800193a:	687b      	ldr	r3, [r7, #4]
 800193c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800193e:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_ASCR_ASC0 << position) ;
 8001940:	2201      	movs	r2, #1
 8001942:	697b      	ldr	r3, [r7, #20]
 8001944:	fa02 f303 	lsl.w	r3, r2, r3
 8001948:	43db      	mvns	r3, r3
 800194a:	693a      	ldr	r2, [r7, #16]
 800194c:	4013      	ands	r3, r2
 800194e:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & GPIO_MODE_ANALOG_ADC_CONTROL) >> 3) << position);
 8001950:	683b      	ldr	r3, [r7, #0]
 8001952:	685b      	ldr	r3, [r3, #4]
 8001954:	08db      	lsrs	r3, r3, #3
 8001956:	f003 0201 	and.w	r2, r3, #1
 800195a:	697b      	ldr	r3, [r7, #20]
 800195c:	fa02 f303 	lsl.w	r3, r2, r3
 8001960:	693a      	ldr	r2, [r7, #16]
 8001962:	4313      	orrs	r3, r2
 8001964:	613b      	str	r3, [r7, #16]
        GPIOx->ASCR = temp;
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	693a      	ldr	r2, [r7, #16]
 800196a:	62da      	str	r2, [r3, #44]	; 0x2c
      }

#endif /* STM32L471xx || STM32L475xx || STM32L476xx || STM32L485xx || STM32L486xx */

      /* Activate the Pull-up or Pull down resistor for the current IO */
      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800196c:	683b      	ldr	r3, [r7, #0]
 800196e:	685b      	ldr	r3, [r3, #4]
 8001970:	f003 0303 	and.w	r3, r3, #3
 8001974:	2b03      	cmp	r3, #3
 8001976:	d017      	beq.n	80019a8 <HAL_GPIO_Init+0x11c>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        temp = GPIOx->PUPDR;
 8001978:	687b      	ldr	r3, [r7, #4]
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800197e:	697b      	ldr	r3, [r7, #20]
 8001980:	005b      	lsls	r3, r3, #1
 8001982:	2203      	movs	r2, #3
 8001984:	fa02 f303 	lsl.w	r3, r2, r3
 8001988:	43db      	mvns	r3, r3
 800198a:	693a      	ldr	r2, [r7, #16]
 800198c:	4013      	ands	r3, r2
 800198e:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8001990:	683b      	ldr	r3, [r7, #0]
 8001992:	689a      	ldr	r2, [r3, #8]
 8001994:	697b      	ldr	r3, [r7, #20]
 8001996:	005b      	lsls	r3, r3, #1
 8001998:	fa02 f303 	lsl.w	r3, r2, r3
 800199c:	693a      	ldr	r2, [r7, #16]
 800199e:	4313      	orrs	r3, r2
 80019a0:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	693a      	ldr	r2, [r7, #16]
 80019a6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80019a8:	683b      	ldr	r3, [r7, #0]
 80019aa:	685b      	ldr	r3, [r3, #4]
 80019ac:	f003 0303 	and.w	r3, r3, #3
 80019b0:	2b02      	cmp	r3, #2
 80019b2:	d123      	bne.n	80019fc <HAL_GPIO_Init+0x170>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3u];
 80019b4:	697b      	ldr	r3, [r7, #20]
 80019b6:	08da      	lsrs	r2, r3, #3
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	3208      	adds	r2, #8
 80019bc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80019c0:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFu << ((position & 0x07u) * 4u));
 80019c2:	697b      	ldr	r3, [r7, #20]
 80019c4:	f003 0307 	and.w	r3, r3, #7
 80019c8:	009b      	lsls	r3, r3, #2
 80019ca:	220f      	movs	r2, #15
 80019cc:	fa02 f303 	lsl.w	r3, r2, r3
 80019d0:	43db      	mvns	r3, r3
 80019d2:	693a      	ldr	r2, [r7, #16]
 80019d4:	4013      	ands	r3, r2
 80019d6:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07u) * 4u));
 80019d8:	683b      	ldr	r3, [r7, #0]
 80019da:	691a      	ldr	r2, [r3, #16]
 80019dc:	697b      	ldr	r3, [r7, #20]
 80019de:	f003 0307 	and.w	r3, r3, #7
 80019e2:	009b      	lsls	r3, r3, #2
 80019e4:	fa02 f303 	lsl.w	r3, r2, r3
 80019e8:	693a      	ldr	r2, [r7, #16]
 80019ea:	4313      	orrs	r3, r2
 80019ec:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3u] = temp;
 80019ee:	697b      	ldr	r3, [r7, #20]
 80019f0:	08da      	lsrs	r2, r3, #3
 80019f2:	687b      	ldr	r3, [r7, #4]
 80019f4:	3208      	adds	r2, #8
 80019f6:	6939      	ldr	r1, [r7, #16]
 80019f8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2u));
 8001a02:	697b      	ldr	r3, [r7, #20]
 8001a04:	005b      	lsls	r3, r3, #1
 8001a06:	2203      	movs	r2, #3
 8001a08:	fa02 f303 	lsl.w	r3, r2, r3
 8001a0c:	43db      	mvns	r3, r3
 8001a0e:	693a      	ldr	r2, [r7, #16]
 8001a10:	4013      	ands	r3, r2
 8001a12:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2u));
 8001a14:	683b      	ldr	r3, [r7, #0]
 8001a16:	685b      	ldr	r3, [r3, #4]
 8001a18:	f003 0203 	and.w	r2, r3, #3
 8001a1c:	697b      	ldr	r3, [r7, #20]
 8001a1e:	005b      	lsls	r3, r3, #1
 8001a20:	fa02 f303 	lsl.w	r3, r2, r3
 8001a24:	693a      	ldr	r2, [r7, #16]
 8001a26:	4313      	orrs	r3, r2
 8001a28:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	693a      	ldr	r2, [r7, #16]
 8001a2e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8001a30:	683b      	ldr	r3, [r7, #0]
 8001a32:	685b      	ldr	r3, [r3, #4]
 8001a34:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8001a38:	2b00      	cmp	r3, #0
 8001a3a:	f000 80ac 	beq.w	8001b96 <HAL_GPIO_Init+0x30a>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001a3e:	4b5f      	ldr	r3, [pc, #380]	; (8001bbc <HAL_GPIO_Init+0x330>)
 8001a40:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a42:	4a5e      	ldr	r2, [pc, #376]	; (8001bbc <HAL_GPIO_Init+0x330>)
 8001a44:	f043 0301 	orr.w	r3, r3, #1
 8001a48:	6613      	str	r3, [r2, #96]	; 0x60
 8001a4a:	4b5c      	ldr	r3, [pc, #368]	; (8001bbc <HAL_GPIO_Init+0x330>)
 8001a4c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001a4e:	f003 0301 	and.w	r3, r3, #1
 8001a52:	60bb      	str	r3, [r7, #8]
 8001a54:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2u];
 8001a56:	4a5a      	ldr	r2, [pc, #360]	; (8001bc0 <HAL_GPIO_Init+0x334>)
 8001a58:	697b      	ldr	r3, [r7, #20]
 8001a5a:	089b      	lsrs	r3, r3, #2
 8001a5c:	3302      	adds	r3, #2
 8001a5e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001a62:	613b      	str	r3, [r7, #16]
        temp &= ~(0x0FuL << (4u * (position & 0x03u)));
 8001a64:	697b      	ldr	r3, [r7, #20]
 8001a66:	f003 0303 	and.w	r3, r3, #3
 8001a6a:	009b      	lsls	r3, r3, #2
 8001a6c:	220f      	movs	r2, #15
 8001a6e:	fa02 f303 	lsl.w	r3, r2, r3
 8001a72:	43db      	mvns	r3, r3
 8001a74:	693a      	ldr	r2, [r7, #16]
 8001a76:	4013      	ands	r3, r2
 8001a78:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4u * (position & 0x03u)));
 8001a7a:	687b      	ldr	r3, [r7, #4]
 8001a7c:	f1b3 4f90 	cmp.w	r3, #1207959552	; 0x48000000
 8001a80:	d025      	beq.n	8001ace <HAL_GPIO_Init+0x242>
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	4a4f      	ldr	r2, [pc, #316]	; (8001bc4 <HAL_GPIO_Init+0x338>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	d01f      	beq.n	8001aca <HAL_GPIO_Init+0x23e>
 8001a8a:	687b      	ldr	r3, [r7, #4]
 8001a8c:	4a4e      	ldr	r2, [pc, #312]	; (8001bc8 <HAL_GPIO_Init+0x33c>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d019      	beq.n	8001ac6 <HAL_GPIO_Init+0x23a>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	4a4d      	ldr	r2, [pc, #308]	; (8001bcc <HAL_GPIO_Init+0x340>)
 8001a96:	4293      	cmp	r3, r2
 8001a98:	d013      	beq.n	8001ac2 <HAL_GPIO_Init+0x236>
 8001a9a:	687b      	ldr	r3, [r7, #4]
 8001a9c:	4a4c      	ldr	r2, [pc, #304]	; (8001bd0 <HAL_GPIO_Init+0x344>)
 8001a9e:	4293      	cmp	r3, r2
 8001aa0:	d00d      	beq.n	8001abe <HAL_GPIO_Init+0x232>
 8001aa2:	687b      	ldr	r3, [r7, #4]
 8001aa4:	4a4b      	ldr	r2, [pc, #300]	; (8001bd4 <HAL_GPIO_Init+0x348>)
 8001aa6:	4293      	cmp	r3, r2
 8001aa8:	d007      	beq.n	8001aba <HAL_GPIO_Init+0x22e>
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	4a4a      	ldr	r2, [pc, #296]	; (8001bd8 <HAL_GPIO_Init+0x34c>)
 8001aae:	4293      	cmp	r3, r2
 8001ab0:	d101      	bne.n	8001ab6 <HAL_GPIO_Init+0x22a>
 8001ab2:	2306      	movs	r3, #6
 8001ab4:	e00c      	b.n	8001ad0 <HAL_GPIO_Init+0x244>
 8001ab6:	2307      	movs	r3, #7
 8001ab8:	e00a      	b.n	8001ad0 <HAL_GPIO_Init+0x244>
 8001aba:	2305      	movs	r3, #5
 8001abc:	e008      	b.n	8001ad0 <HAL_GPIO_Init+0x244>
 8001abe:	2304      	movs	r3, #4
 8001ac0:	e006      	b.n	8001ad0 <HAL_GPIO_Init+0x244>
 8001ac2:	2303      	movs	r3, #3
 8001ac4:	e004      	b.n	8001ad0 <HAL_GPIO_Init+0x244>
 8001ac6:	2302      	movs	r3, #2
 8001ac8:	e002      	b.n	8001ad0 <HAL_GPIO_Init+0x244>
 8001aca:	2301      	movs	r3, #1
 8001acc:	e000      	b.n	8001ad0 <HAL_GPIO_Init+0x244>
 8001ace:	2300      	movs	r3, #0
 8001ad0:	697a      	ldr	r2, [r7, #20]
 8001ad2:	f002 0203 	and.w	r2, r2, #3
 8001ad6:	0092      	lsls	r2, r2, #2
 8001ad8:	4093      	lsls	r3, r2
 8001ada:	693a      	ldr	r2, [r7, #16]
 8001adc:	4313      	orrs	r3, r2
 8001ade:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2u] = temp;
 8001ae0:	4937      	ldr	r1, [pc, #220]	; (8001bc0 <HAL_GPIO_Init+0x334>)
 8001ae2:	697b      	ldr	r3, [r7, #20]
 8001ae4:	089b      	lsrs	r3, r3, #2
 8001ae6:	3302      	adds	r3, #2
 8001ae8:	693a      	ldr	r2, [r7, #16]
 8001aea:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8001aee:	4b3b      	ldr	r3, [pc, #236]	; (8001bdc <HAL_GPIO_Init+0x350>)
 8001af0:	689b      	ldr	r3, [r3, #8]
 8001af2:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001af4:	68fb      	ldr	r3, [r7, #12]
 8001af6:	43db      	mvns	r3, r3
 8001af8:	693a      	ldr	r2, [r7, #16]
 8001afa:	4013      	ands	r3, r2
 8001afc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8001afe:	683b      	ldr	r3, [r7, #0]
 8001b00:	685b      	ldr	r3, [r3, #4]
 8001b02:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d003      	beq.n	8001b12 <HAL_GPIO_Init+0x286>
        {
          temp |= iocurrent;
 8001b0a:	693a      	ldr	r2, [r7, #16]
 8001b0c:	68fb      	ldr	r3, [r7, #12]
 8001b0e:	4313      	orrs	r3, r2
 8001b10:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR1 = temp;
 8001b12:	4a32      	ldr	r2, [pc, #200]	; (8001bdc <HAL_GPIO_Init+0x350>)
 8001b14:	693b      	ldr	r3, [r7, #16]
 8001b16:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR1;
 8001b18:	4b30      	ldr	r3, [pc, #192]	; (8001bdc <HAL_GPIO_Init+0x350>)
 8001b1a:	68db      	ldr	r3, [r3, #12]
 8001b1c:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	43db      	mvns	r3, r3
 8001b22:	693a      	ldr	r2, [r7, #16]
 8001b24:	4013      	ands	r3, r2
 8001b26:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8001b28:	683b      	ldr	r3, [r7, #0]
 8001b2a:	685b      	ldr	r3, [r3, #4]
 8001b2c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001b30:	2b00      	cmp	r3, #0
 8001b32:	d003      	beq.n	8001b3c <HAL_GPIO_Init+0x2b0>
        {
          temp |= iocurrent;
 8001b34:	693a      	ldr	r2, [r7, #16]
 8001b36:	68fb      	ldr	r3, [r7, #12]
 8001b38:	4313      	orrs	r3, r2
 8001b3a:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR1 = temp;
 8001b3c:	4a27      	ldr	r2, [pc, #156]	; (8001bdc <HAL_GPIO_Init+0x350>)
 8001b3e:	693b      	ldr	r3, [r7, #16]
 8001b40:	60d3      	str	r3, [r2, #12]

        /* Clear EXTI line configuration */
        temp = EXTI->EMR1;
 8001b42:	4b26      	ldr	r3, [pc, #152]	; (8001bdc <HAL_GPIO_Init+0x350>)
 8001b44:	685b      	ldr	r3, [r3, #4]
 8001b46:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b48:	68fb      	ldr	r3, [r7, #12]
 8001b4a:	43db      	mvns	r3, r3
 8001b4c:	693a      	ldr	r2, [r7, #16]
 8001b4e:	4013      	ands	r3, r2
 8001b50:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8001b52:	683b      	ldr	r3, [r7, #0]
 8001b54:	685b      	ldr	r3, [r3, #4]
 8001b56:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001b5a:	2b00      	cmp	r3, #0
 8001b5c:	d003      	beq.n	8001b66 <HAL_GPIO_Init+0x2da>
        {
          temp |= iocurrent;
 8001b5e:	693a      	ldr	r2, [r7, #16]
 8001b60:	68fb      	ldr	r3, [r7, #12]
 8001b62:	4313      	orrs	r3, r2
 8001b64:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR1 = temp;
 8001b66:	4a1d      	ldr	r2, [pc, #116]	; (8001bdc <HAL_GPIO_Init+0x350>)
 8001b68:	693b      	ldr	r3, [r7, #16]
 8001b6a:	6053      	str	r3, [r2, #4]

        temp = EXTI->IMR1;
 8001b6c:	4b1b      	ldr	r3, [pc, #108]	; (8001bdc <HAL_GPIO_Init+0x350>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	613b      	str	r3, [r7, #16]
        temp &= ~(iocurrent);
 8001b72:	68fb      	ldr	r3, [r7, #12]
 8001b74:	43db      	mvns	r3, r3
 8001b76:	693a      	ldr	r2, [r7, #16]
 8001b78:	4013      	ands	r3, r2
 8001b7a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8001b7c:	683b      	ldr	r3, [r7, #0]
 8001b7e:	685b      	ldr	r3, [r3, #4]
 8001b80:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d003      	beq.n	8001b90 <HAL_GPIO_Init+0x304>
        {
          temp |= iocurrent;
 8001b88:	693a      	ldr	r2, [r7, #16]
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	4313      	orrs	r3, r2
 8001b8e:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR1 = temp;
 8001b90:	4a12      	ldr	r2, [pc, #72]	; (8001bdc <HAL_GPIO_Init+0x350>)
 8001b92:	693b      	ldr	r3, [r7, #16]
 8001b94:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	697b      	ldr	r3, [r7, #20]
 8001ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f47f ae78 	bne.w	800189c <HAL_GPIO_Init+0x10>
  }
}
 8001bac:	bf00      	nop
 8001bae:	bf00      	nop
 8001bb0:	371c      	adds	r7, #28
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb8:	4770      	bx	lr
 8001bba:	bf00      	nop
 8001bbc:	40021000 	.word	0x40021000
 8001bc0:	40010000 	.word	0x40010000
 8001bc4:	48000400 	.word	0x48000400
 8001bc8:	48000800 	.word	0x48000800
 8001bcc:	48000c00 	.word	0x48000c00
 8001bd0:	48001000 	.word	0x48001000
 8001bd4:	48001400 	.word	0x48001400
 8001bd8:	48001800 	.word	0x48001800
 8001bdc:	40010400 	.word	0x40010400

08001be0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001be0:	b480      	push	{r7}
 8001be2:	b083      	sub	sp, #12
 8001be4:	af00      	add	r7, sp, #0
 8001be6:	6078      	str	r0, [r7, #4]
 8001be8:	460b      	mov	r3, r1
 8001bea:	807b      	strh	r3, [r7, #2]
 8001bec:	4613      	mov	r3, r2
 8001bee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001bf0:	787b      	ldrb	r3, [r7, #1]
 8001bf2:	2b00      	cmp	r3, #0
 8001bf4:	d003      	beq.n	8001bfe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8001bf6:	887a      	ldrh	r2, [r7, #2]
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = (uint32_t)GPIO_Pin;
  }
}
 8001bfc:	e002      	b.n	8001c04 <HAL_GPIO_WritePin+0x24>
    GPIOx->BRR = (uint32_t)GPIO_Pin;
 8001bfe:	887a      	ldrh	r2, [r7, #2]
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	629a      	str	r2, [r3, #40]	; 0x28
}
 8001c04:	bf00      	nop
 8001c06:	370c      	adds	r7, #12
 8001c08:	46bd      	mov	sp, r7
 8001c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c0e:	4770      	bx	lr

08001c10 <HAL_HCD_Init>:
  * @brief  Initialize the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Init(HCD_HandleTypeDef *hhcd)
{
 8001c10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001c12:	b08f      	sub	sp, #60	; 0x3c
 8001c14:	af0a      	add	r7, sp, #40	; 0x28
 8001c16:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx;

  /* Check the HCD handle allocation */
  if (hhcd == NULL)
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2b00      	cmp	r3, #0
 8001c1c:	d101      	bne.n	8001c22 <HAL_HCD_Init+0x12>
  {
    return HAL_ERROR;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	e054      	b.n	8001ccc <HAL_HCD_Init+0xbc>
  }

  /* Check the parameters */
  assert_param(IS_HCD_ALL_INSTANCE(hhcd->Instance));

  USBx = hhcd->Instance;
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	60fb      	str	r3, [r7, #12]

  if (hhcd->State == HAL_HCD_STATE_RESET)
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	f893 32f9 	ldrb.w	r3, [r3, #761]	; 0x2f9
 8001c2e:	b2db      	uxtb	r3, r3
 8001c30:	2b00      	cmp	r3, #0
 8001c32:	d106      	bne.n	8001c42 <HAL_HCD_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hhcd->Lock = HAL_UNLOCKED;
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	2200      	movs	r2, #0
 8001c38:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

    /* Init the low level hardware */
    hhcd->MspInitCallback(hhcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_HCD_MspInit(hhcd);
 8001c3c:	6878      	ldr	r0, [r7, #4]
 8001c3e:	f006 fd05 	bl	800864c <HAL_HCD_MspInit>
#endif /* (USE_HAL_HCD_REGISTER_CALLBACKS) */
  }

  hhcd->State = HAL_HCD_STATE_BUSY;
 8001c42:	687b      	ldr	r3, [r7, #4]
 8001c44:	2203      	movs	r2, #3
 8001c46:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  /* Disable DMA mode for FS instance */
  if ((USBx->CID & (0x1U << 8)) == 0U)
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8001c4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001c52:	2b00      	cmp	r3, #0
 8001c54:	d102      	bne.n	8001c5c <HAL_HCD_Init+0x4c>
  {
    hhcd->Init.dma_enable = 0U;
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	2200      	movs	r2, #0
 8001c5a:	611a      	str	r2, [r3, #16]
  }

  /* Disable the Interrupts */
  __HAL_HCD_DISABLE(hhcd);
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	681b      	ldr	r3, [r3, #0]
 8001c60:	4618      	mov	r0, r3
 8001c62:	f004 fdd5 	bl	8006810 <USB_DisableGlobalInt>

  /* Init the Core (common init.) */
  (void)USB_CoreInit(hhcd->Instance, hhcd->Init);
 8001c66:	687b      	ldr	r3, [r7, #4]
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	603b      	str	r3, [r7, #0]
 8001c6c:	687e      	ldr	r6, [r7, #4]
 8001c6e:	466d      	mov	r5, sp
 8001c70:	f106 0410 	add.w	r4, r6, #16
 8001c74:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c76:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c78:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001c7a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001c7c:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001c80:	e885 0003 	stmia.w	r5, {r0, r1}
 8001c84:	1d33      	adds	r3, r6, #4
 8001c86:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001c88:	6838      	ldr	r0, [r7, #0]
 8001c8a:	f004 fd84 	bl	8006796 <USB_CoreInit>

  /* Force Host Mode*/
  (void)USB_SetCurrentMode(hhcd->Instance, USB_HOST_MODE);
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	2101      	movs	r1, #1
 8001c94:	4618      	mov	r0, r3
 8001c96:	f004 fdcc 	bl	8006832 <USB_SetCurrentMode>

  /* Init Host */
  (void)USB_HostInit(hhcd->Instance, hhcd->Init);
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	681b      	ldr	r3, [r3, #0]
 8001c9e:	603b      	str	r3, [r7, #0]
 8001ca0:	687e      	ldr	r6, [r7, #4]
 8001ca2:	466d      	mov	r5, sp
 8001ca4:	f106 0410 	add.w	r4, r6, #16
 8001ca8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001caa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001cae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001cb0:	e894 0003 	ldmia.w	r4, {r0, r1}
 8001cb4:	e885 0003 	stmia.w	r5, {r0, r1}
 8001cb8:	1d33      	adds	r3, r6, #4
 8001cba:	cb0e      	ldmia	r3, {r1, r2, r3}
 8001cbc:	6838      	ldr	r0, [r7, #0]
 8001cbe:	f004 ff51 	bl	8006b64 <USB_HostInit>

  hhcd->State = HAL_HCD_STATE_READY;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f883 22f9 	strb.w	r2, [r3, #761]	; 0x2f9

  return HAL_OK;
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3714      	adds	r7, #20
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08001cd4 <HAL_HCD_HC_Init>:
                                  uint8_t epnum,
                                  uint8_t dev_address,
                                  uint8_t speed,
                                  uint8_t ep_type,
                                  uint16_t mps)
{
 8001cd4:	b590      	push	{r4, r7, lr}
 8001cd6:	b089      	sub	sp, #36	; 0x24
 8001cd8:	af04      	add	r7, sp, #16
 8001cda:	6078      	str	r0, [r7, #4]
 8001cdc:	4608      	mov	r0, r1
 8001cde:	4611      	mov	r1, r2
 8001ce0:	461a      	mov	r2, r3
 8001ce2:	4603      	mov	r3, r0
 8001ce4:	70fb      	strb	r3, [r7, #3]
 8001ce6:	460b      	mov	r3, r1
 8001ce8:	70bb      	strb	r3, [r7, #2]
 8001cea:	4613      	mov	r3, r2
 8001cec:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef status;

  __HAL_LOCK(hhcd);
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001cf4:	2b01      	cmp	r3, #1
 8001cf6:	d101      	bne.n	8001cfc <HAL_HCD_HC_Init+0x28>
 8001cf8:	2302      	movs	r3, #2
 8001cfa:	e076      	b.n	8001dea <HAL_HCD_HC_Init+0x116>
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	2201      	movs	r2, #1
 8001d00:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  hhcd->hc[ch_num].do_ping = 0U;
 8001d04:	78fb      	ldrb	r3, [r7, #3]
 8001d06:	687a      	ldr	r2, [r7, #4]
 8001d08:	212c      	movs	r1, #44	; 0x2c
 8001d0a:	fb01 f303 	mul.w	r3, r1, r3
 8001d0e:	4413      	add	r3, r2
 8001d10:	333d      	adds	r3, #61	; 0x3d
 8001d12:	2200      	movs	r2, #0
 8001d14:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].dev_addr = dev_address;
 8001d16:	78fb      	ldrb	r3, [r7, #3]
 8001d18:	687a      	ldr	r2, [r7, #4]
 8001d1a:	212c      	movs	r1, #44	; 0x2c
 8001d1c:	fb01 f303 	mul.w	r3, r1, r3
 8001d20:	4413      	add	r3, r2
 8001d22:	3338      	adds	r3, #56	; 0x38
 8001d24:	787a      	ldrb	r2, [r7, #1]
 8001d26:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].max_packet = mps;
 8001d28:	78fb      	ldrb	r3, [r7, #3]
 8001d2a:	687a      	ldr	r2, [r7, #4]
 8001d2c:	212c      	movs	r1, #44	; 0x2c
 8001d2e:	fb01 f303 	mul.w	r3, r1, r3
 8001d32:	4413      	add	r3, r2
 8001d34:	3340      	adds	r3, #64	; 0x40
 8001d36:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8001d38:	801a      	strh	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8001d3a:	78fb      	ldrb	r3, [r7, #3]
 8001d3c:	687a      	ldr	r2, [r7, #4]
 8001d3e:	212c      	movs	r1, #44	; 0x2c
 8001d40:	fb01 f303 	mul.w	r3, r1, r3
 8001d44:	4413      	add	r3, r2
 8001d46:	3339      	adds	r3, #57	; 0x39
 8001d48:	78fa      	ldrb	r2, [r7, #3]
 8001d4a:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type = ep_type;
 8001d4c:	78fb      	ldrb	r3, [r7, #3]
 8001d4e:	687a      	ldr	r2, [r7, #4]
 8001d50:	212c      	movs	r1, #44	; 0x2c
 8001d52:	fb01 f303 	mul.w	r3, r1, r3
 8001d56:	4413      	add	r3, r2
 8001d58:	333f      	adds	r3, #63	; 0x3f
 8001d5a:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8001d5e:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_num = epnum & 0x7FU;
 8001d60:	78fb      	ldrb	r3, [r7, #3]
 8001d62:	78ba      	ldrb	r2, [r7, #2]
 8001d64:	f002 027f 	and.w	r2, r2, #127	; 0x7f
 8001d68:	b2d0      	uxtb	r0, r2
 8001d6a:	687a      	ldr	r2, [r7, #4]
 8001d6c:	212c      	movs	r1, #44	; 0x2c
 8001d6e:	fb01 f303 	mul.w	r3, r1, r3
 8001d72:	4413      	add	r3, r2
 8001d74:	333a      	adds	r3, #58	; 0x3a
 8001d76:	4602      	mov	r2, r0
 8001d78:	701a      	strb	r2, [r3, #0]

  if ((epnum & 0x80U) == 0x80U)
 8001d7a:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	da09      	bge.n	8001d96 <HAL_HCD_HC_Init+0xc2>
  {
    hhcd->hc[ch_num].ep_is_in = 1U;
 8001d82:	78fb      	ldrb	r3, [r7, #3]
 8001d84:	687a      	ldr	r2, [r7, #4]
 8001d86:	212c      	movs	r1, #44	; 0x2c
 8001d88:	fb01 f303 	mul.w	r3, r1, r3
 8001d8c:	4413      	add	r3, r2
 8001d8e:	333b      	adds	r3, #59	; 0x3b
 8001d90:	2201      	movs	r2, #1
 8001d92:	701a      	strb	r2, [r3, #0]
 8001d94:	e008      	b.n	8001da8 <HAL_HCD_HC_Init+0xd4>
  }
  else
  {
    hhcd->hc[ch_num].ep_is_in = 0U;
 8001d96:	78fb      	ldrb	r3, [r7, #3]
 8001d98:	687a      	ldr	r2, [r7, #4]
 8001d9a:	212c      	movs	r1, #44	; 0x2c
 8001d9c:	fb01 f303 	mul.w	r3, r1, r3
 8001da0:	4413      	add	r3, r2
 8001da2:	333b      	adds	r3, #59	; 0x3b
 8001da4:	2200      	movs	r2, #0
 8001da6:	701a      	strb	r2, [r3, #0]
  }

  hhcd->hc[ch_num].speed = speed;
 8001da8:	78fb      	ldrb	r3, [r7, #3]
 8001daa:	687a      	ldr	r2, [r7, #4]
 8001dac:	212c      	movs	r1, #44	; 0x2c
 8001dae:	fb01 f303 	mul.w	r3, r1, r3
 8001db2:	4413      	add	r3, r2
 8001db4:	333c      	adds	r3, #60	; 0x3c
 8001db6:	f897 2020 	ldrb.w	r2, [r7, #32]
 8001dba:	701a      	strb	r2, [r3, #0]

  status =  USB_HC_Init(hhcd->Instance,
 8001dbc:	687b      	ldr	r3, [r7, #4]
 8001dbe:	6818      	ldr	r0, [r3, #0]
 8001dc0:	787c      	ldrb	r4, [r7, #1]
 8001dc2:	78ba      	ldrb	r2, [r7, #2]
 8001dc4:	78f9      	ldrb	r1, [r7, #3]
 8001dc6:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001dc8:	9302      	str	r3, [sp, #8]
 8001dca:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001dce:	9301      	str	r3, [sp, #4]
 8001dd0:	f897 3020 	ldrb.w	r3, [r7, #32]
 8001dd4:	9300      	str	r3, [sp, #0]
 8001dd6:	4623      	mov	r3, r4
 8001dd8:	f004 ffe2 	bl	8006da0 <USB_HC_Init>
 8001ddc:	4603      	mov	r3, r0
 8001dde:	73fb      	strb	r3, [r7, #15]
                        epnum,
                        dev_address,
                        speed,
                        ep_type,
                        mps);
  __HAL_UNLOCK(hhcd);
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	2200      	movs	r2, #0
 8001de4:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001de8:	7bfb      	ldrb	r3, [r7, #15]
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3714      	adds	r7, #20
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd90      	pop	{r4, r7, pc}

08001df2 <HAL_HCD_HC_Halt>:
  * @param  ch_num Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_HC_Halt(HCD_HandleTypeDef *hhcd, uint8_t ch_num)
{
 8001df2:	b580      	push	{r7, lr}
 8001df4:	b084      	sub	sp, #16
 8001df6:	af00      	add	r7, sp, #0
 8001df8:	6078      	str	r0, [r7, #4]
 8001dfa:	460b      	mov	r3, r1
 8001dfc:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef status = HAL_OK;
 8001dfe:	2300      	movs	r3, #0
 8001e00:	73fb      	strb	r3, [r7, #15]

  __HAL_LOCK(hhcd);
 8001e02:	687b      	ldr	r3, [r7, #4]
 8001e04:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8001e08:	2b01      	cmp	r3, #1
 8001e0a:	d101      	bne.n	8001e10 <HAL_HCD_HC_Halt+0x1e>
 8001e0c:	2302      	movs	r3, #2
 8001e0e:	e00f      	b.n	8001e30 <HAL_HCD_HC_Halt+0x3e>
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	2201      	movs	r2, #1
 8001e14:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	78fa      	ldrb	r2, [r7, #3]
 8001e1e:	4611      	mov	r1, r2
 8001e20:	4618      	mov	r0, r3
 8001e22:	f005 f9d2 	bl	80071ca <USB_HC_Halt>
  __HAL_UNLOCK(hhcd);
 8001e26:	687b      	ldr	r3, [r7, #4]
 8001e28:	2200      	movs	r2, #0
 8001e2a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return status;
 8001e2e:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e30:	4618      	mov	r0, r3
 8001e32:	3710      	adds	r7, #16
 8001e34:	46bd      	mov	sp, r7
 8001e36:	bd80      	pop	{r7, pc}

08001e38 <HAL_HCD_HC_SubmitRequest>:
                                           uint8_t ep_type,
                                           uint8_t token,
                                           uint8_t *pbuff,
                                           uint16_t length,
                                           uint8_t do_ping)
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	b082      	sub	sp, #8
 8001e3c:	af00      	add	r7, sp, #0
 8001e3e:	6078      	str	r0, [r7, #4]
 8001e40:	4608      	mov	r0, r1
 8001e42:	4611      	mov	r1, r2
 8001e44:	461a      	mov	r2, r3
 8001e46:	4603      	mov	r3, r0
 8001e48:	70fb      	strb	r3, [r7, #3]
 8001e4a:	460b      	mov	r3, r1
 8001e4c:	70bb      	strb	r3, [r7, #2]
 8001e4e:	4613      	mov	r3, r2
 8001e50:	707b      	strb	r3, [r7, #1]
  hhcd->hc[ch_num].ep_is_in = direction;
 8001e52:	78fb      	ldrb	r3, [r7, #3]
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	212c      	movs	r1, #44	; 0x2c
 8001e58:	fb01 f303 	mul.w	r3, r1, r3
 8001e5c:	4413      	add	r3, r2
 8001e5e:	333b      	adds	r3, #59	; 0x3b
 8001e60:	78ba      	ldrb	r2, [r7, #2]
 8001e62:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].ep_type  = ep_type;
 8001e64:	78fb      	ldrb	r3, [r7, #3]
 8001e66:	687a      	ldr	r2, [r7, #4]
 8001e68:	212c      	movs	r1, #44	; 0x2c
 8001e6a:	fb01 f303 	mul.w	r3, r1, r3
 8001e6e:	4413      	add	r3, r2
 8001e70:	333f      	adds	r3, #63	; 0x3f
 8001e72:	787a      	ldrb	r2, [r7, #1]
 8001e74:	701a      	strb	r2, [r3, #0]

  if (token == 0U)
 8001e76:	7c3b      	ldrb	r3, [r7, #16]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d112      	bne.n	8001ea2 <HAL_HCD_HC_SubmitRequest+0x6a>
  {
    hhcd->hc[ch_num].data_pid = HC_PID_SETUP;
 8001e7c:	78fb      	ldrb	r3, [r7, #3]
 8001e7e:	687a      	ldr	r2, [r7, #4]
 8001e80:	212c      	movs	r1, #44	; 0x2c
 8001e82:	fb01 f303 	mul.w	r3, r1, r3
 8001e86:	4413      	add	r3, r2
 8001e88:	3342      	adds	r3, #66	; 0x42
 8001e8a:	2203      	movs	r2, #3
 8001e8c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = do_ping;
 8001e8e:	78fb      	ldrb	r3, [r7, #3]
 8001e90:	687a      	ldr	r2, [r7, #4]
 8001e92:	212c      	movs	r1, #44	; 0x2c
 8001e94:	fb01 f303 	mul.w	r3, r1, r3
 8001e98:	4413      	add	r3, r2
 8001e9a:	333d      	adds	r3, #61	; 0x3d
 8001e9c:	7f3a      	ldrb	r2, [r7, #28]
 8001e9e:	701a      	strb	r2, [r3, #0]
 8001ea0:	e008      	b.n	8001eb4 <HAL_HCD_HC_SubmitRequest+0x7c>
  }
  else
  {
    hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001ea2:	78fb      	ldrb	r3, [r7, #3]
 8001ea4:	687a      	ldr	r2, [r7, #4]
 8001ea6:	212c      	movs	r1, #44	; 0x2c
 8001ea8:	fb01 f303 	mul.w	r3, r1, r3
 8001eac:	4413      	add	r3, r2
 8001eae:	3342      	adds	r3, #66	; 0x42
 8001eb0:	2202      	movs	r2, #2
 8001eb2:	701a      	strb	r2, [r3, #0]
  }

  /* Manage Data Toggle */
  switch (ep_type)
 8001eb4:	787b      	ldrb	r3, [r7, #1]
 8001eb6:	2b03      	cmp	r3, #3
 8001eb8:	f200 80c6 	bhi.w	8002048 <HAL_HCD_HC_SubmitRequest+0x210>
 8001ebc:	a201      	add	r2, pc, #4	; (adr r2, 8001ec4 <HAL_HCD_HC_SubmitRequest+0x8c>)
 8001ebe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ec2:	bf00      	nop
 8001ec4:	08001ed5 	.word	0x08001ed5
 8001ec8:	08002035 	.word	0x08002035
 8001ecc:	08001f39 	.word	0x08001f39
 8001ed0:	08001fb7 	.word	0x08001fb7
  {
    case EP_TYPE_CTRL:
      if ((token == 1U) && (direction == 0U)) /*send data */
 8001ed4:	7c3b      	ldrb	r3, [r7, #16]
 8001ed6:	2b01      	cmp	r3, #1
 8001ed8:	f040 80b8 	bne.w	800204c <HAL_HCD_HC_SubmitRequest+0x214>
 8001edc:	78bb      	ldrb	r3, [r7, #2]
 8001ede:	2b00      	cmp	r3, #0
 8001ee0:	f040 80b4 	bne.w	800204c <HAL_HCD_HC_SubmitRequest+0x214>
      {
        if (length == 0U)
 8001ee4:	8b3b      	ldrh	r3, [r7, #24]
 8001ee6:	2b00      	cmp	r3, #0
 8001ee8:	d108      	bne.n	8001efc <HAL_HCD_HC_SubmitRequest+0xc4>
        {
          /* For Status OUT stage, Length==0, Status Out PID = 1 */
          hhcd->hc[ch_num].toggle_out = 1U;
 8001eea:	78fb      	ldrb	r3, [r7, #3]
 8001eec:	687a      	ldr	r2, [r7, #4]
 8001eee:	212c      	movs	r1, #44	; 0x2c
 8001ef0:	fb01 f303 	mul.w	r3, r1, r3
 8001ef4:	4413      	add	r3, r2
 8001ef6:	3355      	adds	r3, #85	; 0x55
 8001ef8:	2201      	movs	r2, #1
 8001efa:	701a      	strb	r2, [r3, #0]
        }

        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001efc:	78fb      	ldrb	r3, [r7, #3]
 8001efe:	687a      	ldr	r2, [r7, #4]
 8001f00:	212c      	movs	r1, #44	; 0x2c
 8001f02:	fb01 f303 	mul.w	r3, r1, r3
 8001f06:	4413      	add	r3, r2
 8001f08:	3355      	adds	r3, #85	; 0x55
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	d109      	bne.n	8001f24 <HAL_HCD_HC_SubmitRequest+0xec>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f10:	78fb      	ldrb	r3, [r7, #3]
 8001f12:	687a      	ldr	r2, [r7, #4]
 8001f14:	212c      	movs	r1, #44	; 0x2c
 8001f16:	fb01 f303 	mul.w	r3, r1, r3
 8001f1a:	4413      	add	r3, r2
 8001f1c:	3342      	adds	r3, #66	; 0x42
 8001f1e:	2200      	movs	r2, #0
 8001f20:	701a      	strb	r2, [r3, #0]
        {
          /* Put the PID 1 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001f22:	e093      	b.n	800204c <HAL_HCD_HC_SubmitRequest+0x214>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f24:	78fb      	ldrb	r3, [r7, #3]
 8001f26:	687a      	ldr	r2, [r7, #4]
 8001f28:	212c      	movs	r1, #44	; 0x2c
 8001f2a:	fb01 f303 	mul.w	r3, r1, r3
 8001f2e:	4413      	add	r3, r2
 8001f30:	3342      	adds	r3, #66	; 0x42
 8001f32:	2202      	movs	r2, #2
 8001f34:	701a      	strb	r2, [r3, #0]
      break;
 8001f36:	e089      	b.n	800204c <HAL_HCD_HC_SubmitRequest+0x214>

    case EP_TYPE_BULK:
      if (direction == 0U)
 8001f38:	78bb      	ldrb	r3, [r7, #2]
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d11d      	bne.n	8001f7a <HAL_HCD_HC_SubmitRequest+0x142>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001f3e:	78fb      	ldrb	r3, [r7, #3]
 8001f40:	687a      	ldr	r2, [r7, #4]
 8001f42:	212c      	movs	r1, #44	; 0x2c
 8001f44:	fb01 f303 	mul.w	r3, r1, r3
 8001f48:	4413      	add	r3, r2
 8001f4a:	3355      	adds	r3, #85	; 0x55
 8001f4c:	781b      	ldrb	r3, [r3, #0]
 8001f4e:	2b00      	cmp	r3, #0
 8001f50:	d109      	bne.n	8001f66 <HAL_HCD_HC_SubmitRequest+0x12e>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f52:	78fb      	ldrb	r3, [r7, #3]
 8001f54:	687a      	ldr	r2, [r7, #4]
 8001f56:	212c      	movs	r1, #44	; 0x2c
 8001f58:	fb01 f303 	mul.w	r3, r1, r3
 8001f5c:	4413      	add	r3, r2
 8001f5e:	3342      	adds	r3, #66	; 0x42
 8001f60:	2200      	movs	r2, #0
 8001f62:	701a      	strb	r2, [r3, #0]
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }

      break;
 8001f64:	e073      	b.n	800204e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001f66:	78fb      	ldrb	r3, [r7, #3]
 8001f68:	687a      	ldr	r2, [r7, #4]
 8001f6a:	212c      	movs	r1, #44	; 0x2c
 8001f6c:	fb01 f303 	mul.w	r3, r1, r3
 8001f70:	4413      	add	r3, r2
 8001f72:	3342      	adds	r3, #66	; 0x42
 8001f74:	2202      	movs	r2, #2
 8001f76:	701a      	strb	r2, [r3, #0]
      break;
 8001f78:	e069      	b.n	800204e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001f7a:	78fb      	ldrb	r3, [r7, #3]
 8001f7c:	687a      	ldr	r2, [r7, #4]
 8001f7e:	212c      	movs	r1, #44	; 0x2c
 8001f80:	fb01 f303 	mul.w	r3, r1, r3
 8001f84:	4413      	add	r3, r2
 8001f86:	3354      	adds	r3, #84	; 0x54
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	2b00      	cmp	r3, #0
 8001f8c:	d109      	bne.n	8001fa2 <HAL_HCD_HC_SubmitRequest+0x16a>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001f8e:	78fb      	ldrb	r3, [r7, #3]
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	212c      	movs	r1, #44	; 0x2c
 8001f94:	fb01 f303 	mul.w	r3, r1, r3
 8001f98:	4413      	add	r3, r2
 8001f9a:	3342      	adds	r3, #66	; 0x42
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	701a      	strb	r2, [r3, #0]
      break;
 8001fa0:	e055      	b.n	800204e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001fa2:	78fb      	ldrb	r3, [r7, #3]
 8001fa4:	687a      	ldr	r2, [r7, #4]
 8001fa6:	212c      	movs	r1, #44	; 0x2c
 8001fa8:	fb01 f303 	mul.w	r3, r1, r3
 8001fac:	4413      	add	r3, r2
 8001fae:	3342      	adds	r3, #66	; 0x42
 8001fb0:	2202      	movs	r2, #2
 8001fb2:	701a      	strb	r2, [r3, #0]
      break;
 8001fb4:	e04b      	b.n	800204e <HAL_HCD_HC_SubmitRequest+0x216>
    case EP_TYPE_INTR:
      if (direction == 0U)
 8001fb6:	78bb      	ldrb	r3, [r7, #2]
 8001fb8:	2b00      	cmp	r3, #0
 8001fba:	d11d      	bne.n	8001ff8 <HAL_HCD_HC_SubmitRequest+0x1c0>
      {
        /* Set the Data Toggle bit as per the Flag */
        if (hhcd->hc[ch_num].toggle_out == 0U)
 8001fbc:	78fb      	ldrb	r3, [r7, #3]
 8001fbe:	687a      	ldr	r2, [r7, #4]
 8001fc0:	212c      	movs	r1, #44	; 0x2c
 8001fc2:	fb01 f303 	mul.w	r3, r1, r3
 8001fc6:	4413      	add	r3, r2
 8001fc8:	3355      	adds	r3, #85	; 0x55
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d109      	bne.n	8001fe4 <HAL_HCD_HC_SubmitRequest+0x1ac>
        {
          /* Put the PID 0 */
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8001fd0:	78fb      	ldrb	r3, [r7, #3]
 8001fd2:	687a      	ldr	r2, [r7, #4]
 8001fd4:	212c      	movs	r1, #44	; 0x2c
 8001fd6:	fb01 f303 	mul.w	r3, r1, r3
 8001fda:	4413      	add	r3, r2
 8001fdc:	3342      	adds	r3, #66	; 0x42
 8001fde:	2200      	movs	r2, #0
 8001fe0:	701a      	strb	r2, [r3, #0]
        else
        {
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
        }
      }
      break;
 8001fe2:	e034      	b.n	800204e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8001fe4:	78fb      	ldrb	r3, [r7, #3]
 8001fe6:	687a      	ldr	r2, [r7, #4]
 8001fe8:	212c      	movs	r1, #44	; 0x2c
 8001fea:	fb01 f303 	mul.w	r3, r1, r3
 8001fee:	4413      	add	r3, r2
 8001ff0:	3342      	adds	r3, #66	; 0x42
 8001ff2:	2202      	movs	r2, #2
 8001ff4:	701a      	strb	r2, [r3, #0]
      break;
 8001ff6:	e02a      	b.n	800204e <HAL_HCD_HC_SubmitRequest+0x216>
        if (hhcd->hc[ch_num].toggle_in == 0U)
 8001ff8:	78fb      	ldrb	r3, [r7, #3]
 8001ffa:	687a      	ldr	r2, [r7, #4]
 8001ffc:	212c      	movs	r1, #44	; 0x2c
 8001ffe:	fb01 f303 	mul.w	r3, r1, r3
 8002002:	4413      	add	r3, r2
 8002004:	3354      	adds	r3, #84	; 0x54
 8002006:	781b      	ldrb	r3, [r3, #0]
 8002008:	2b00      	cmp	r3, #0
 800200a:	d109      	bne.n	8002020 <HAL_HCD_HC_SubmitRequest+0x1e8>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 800200c:	78fb      	ldrb	r3, [r7, #3]
 800200e:	687a      	ldr	r2, [r7, #4]
 8002010:	212c      	movs	r1, #44	; 0x2c
 8002012:	fb01 f303 	mul.w	r3, r1, r3
 8002016:	4413      	add	r3, r2
 8002018:	3342      	adds	r3, #66	; 0x42
 800201a:	2200      	movs	r2, #0
 800201c:	701a      	strb	r2, [r3, #0]
      break;
 800201e:	e016      	b.n	800204e <HAL_HCD_HC_SubmitRequest+0x216>
          hhcd->hc[ch_num].data_pid = HC_PID_DATA1;
 8002020:	78fb      	ldrb	r3, [r7, #3]
 8002022:	687a      	ldr	r2, [r7, #4]
 8002024:	212c      	movs	r1, #44	; 0x2c
 8002026:	fb01 f303 	mul.w	r3, r1, r3
 800202a:	4413      	add	r3, r2
 800202c:	3342      	adds	r3, #66	; 0x42
 800202e:	2202      	movs	r2, #2
 8002030:	701a      	strb	r2, [r3, #0]
      break;
 8002032:	e00c      	b.n	800204e <HAL_HCD_HC_SubmitRequest+0x216>

    case EP_TYPE_ISOC:
      hhcd->hc[ch_num].data_pid = HC_PID_DATA0;
 8002034:	78fb      	ldrb	r3, [r7, #3]
 8002036:	687a      	ldr	r2, [r7, #4]
 8002038:	212c      	movs	r1, #44	; 0x2c
 800203a:	fb01 f303 	mul.w	r3, r1, r3
 800203e:	4413      	add	r3, r2
 8002040:	3342      	adds	r3, #66	; 0x42
 8002042:	2200      	movs	r2, #0
 8002044:	701a      	strb	r2, [r3, #0]
      break;
 8002046:	e002      	b.n	800204e <HAL_HCD_HC_SubmitRequest+0x216>

    default:
      break;
 8002048:	bf00      	nop
 800204a:	e000      	b.n	800204e <HAL_HCD_HC_SubmitRequest+0x216>
      break;
 800204c:	bf00      	nop
  }

  hhcd->hc[ch_num].xfer_buff = pbuff;
 800204e:	78fb      	ldrb	r3, [r7, #3]
 8002050:	687a      	ldr	r2, [r7, #4]
 8002052:	212c      	movs	r1, #44	; 0x2c
 8002054:	fb01 f303 	mul.w	r3, r1, r3
 8002058:	4413      	add	r3, r2
 800205a:	3344      	adds	r3, #68	; 0x44
 800205c:	697a      	ldr	r2, [r7, #20]
 800205e:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_len  = length;
 8002060:	78fb      	ldrb	r3, [r7, #3]
 8002062:	8b3a      	ldrh	r2, [r7, #24]
 8002064:	6879      	ldr	r1, [r7, #4]
 8002066:	202c      	movs	r0, #44	; 0x2c
 8002068:	fb00 f303 	mul.w	r3, r0, r3
 800206c:	440b      	add	r3, r1
 800206e:	334c      	adds	r3, #76	; 0x4c
 8002070:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].urb_state = URB_IDLE;
 8002072:	78fb      	ldrb	r3, [r7, #3]
 8002074:	687a      	ldr	r2, [r7, #4]
 8002076:	212c      	movs	r1, #44	; 0x2c
 8002078:	fb01 f303 	mul.w	r3, r1, r3
 800207c:	4413      	add	r3, r2
 800207e:	3360      	adds	r3, #96	; 0x60
 8002080:	2200      	movs	r2, #0
 8002082:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].xfer_count = 0U;
 8002084:	78fb      	ldrb	r3, [r7, #3]
 8002086:	687a      	ldr	r2, [r7, #4]
 8002088:	212c      	movs	r1, #44	; 0x2c
 800208a:	fb01 f303 	mul.w	r3, r1, r3
 800208e:	4413      	add	r3, r2
 8002090:	3350      	adds	r3, #80	; 0x50
 8002092:	2200      	movs	r2, #0
 8002094:	601a      	str	r2, [r3, #0]
  hhcd->hc[ch_num].ch_num = ch_num;
 8002096:	78fb      	ldrb	r3, [r7, #3]
 8002098:	687a      	ldr	r2, [r7, #4]
 800209a:	212c      	movs	r1, #44	; 0x2c
 800209c:	fb01 f303 	mul.w	r3, r1, r3
 80020a0:	4413      	add	r3, r2
 80020a2:	3339      	adds	r3, #57	; 0x39
 80020a4:	78fa      	ldrb	r2, [r7, #3]
 80020a6:	701a      	strb	r2, [r3, #0]
  hhcd->hc[ch_num].state = HC_IDLE;
 80020a8:	78fb      	ldrb	r3, [r7, #3]
 80020aa:	687a      	ldr	r2, [r7, #4]
 80020ac:	212c      	movs	r1, #44	; 0x2c
 80020ae:	fb01 f303 	mul.w	r3, r1, r3
 80020b2:	4413      	add	r3, r2
 80020b4:	3361      	adds	r3, #97	; 0x61
 80020b6:	2200      	movs	r2, #0
 80020b8:	701a      	strb	r2, [r3, #0]

  return USB_HC_StartXfer(hhcd->Instance, &hhcd->hc[ch_num]);
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	6818      	ldr	r0, [r3, #0]
 80020be:	78fb      	ldrb	r3, [r7, #3]
 80020c0:	222c      	movs	r2, #44	; 0x2c
 80020c2:	fb02 f303 	mul.w	r3, r2, r3
 80020c6:	3338      	adds	r3, #56	; 0x38
 80020c8:	687a      	ldr	r2, [r7, #4]
 80020ca:	4413      	add	r3, r2
 80020cc:	4619      	mov	r1, r3
 80020ce:	f004 ff73 	bl	8006fb8 <USB_HC_StartXfer>
 80020d2:	4603      	mov	r3, r0
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}

080020dc <HAL_HCD_IRQHandler>:
  * @brief  Handle HCD interrupt request.
  * @param  hhcd HCD handle
  * @retval None
  */
void HAL_HCD_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	b086      	sub	sp, #24
 80020e0:	af00      	add	r7, sp, #0
 80020e2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80020e4:	687b      	ldr	r3, [r7, #4]
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	613b      	str	r3, [r7, #16]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80020ea:	693b      	ldr	r3, [r7, #16]
 80020ec:	60fb      	str	r3, [r7, #12]
  uint32_t i;
  uint32_t interrupt;

  /* Ensure that we are in device mode */
  if (USB_GetMode(hhcd->Instance) == USB_OTG_MODE_HOST)
 80020ee:	687b      	ldr	r3, [r7, #4]
 80020f0:	681b      	ldr	r3, [r3, #0]
 80020f2:	4618      	mov	r0, r3
 80020f4:	f004 fcf3 	bl	8006ade <USB_GetMode>
 80020f8:	4603      	mov	r3, r0
 80020fa:	2b01      	cmp	r3, #1
 80020fc:	f040 80f6 	bne.w	80022ec <HAL_HCD_IRQHandler+0x210>
  {
    /* Avoid spurious interrupt */
    if (__HAL_HCD_IS_INVALID_INTERRUPT(hhcd))
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	681b      	ldr	r3, [r3, #0]
 8002104:	4618      	mov	r0, r3
 8002106:	f004 fcd7 	bl	8006ab8 <USB_ReadInterrupts>
 800210a:	4603      	mov	r3, r0
 800210c:	2b00      	cmp	r3, #0
 800210e:	f000 80ec 	beq.w	80022ea <HAL_HCD_IRQHandler+0x20e>
    {
      return;
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT))
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	4618      	mov	r0, r3
 8002118:	f004 fcce 	bl	8006ab8 <USB_ReadInterrupts>
 800211c:	4603      	mov	r3, r0
 800211e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002122:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002126:	d104      	bne.n	8002132 <HAL_HCD_IRQHandler+0x56>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PXFR_INCOMPISOOUT);
 8002128:	687b      	ldr	r3, [r7, #4]
 800212a:	681b      	ldr	r3, [r3, #0]
 800212c:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 8002130:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR))
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	681b      	ldr	r3, [r3, #0]
 8002136:	4618      	mov	r0, r3
 8002138:	f004 fcbe 	bl	8006ab8 <USB_ReadInterrupts>
 800213c:	4603      	mov	r3, r0
 800213e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002142:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002146:	d104      	bne.n	8002152 <HAL_HCD_IRQHandler+0x76>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_IISOIXFR);
 8002148:	687b      	ldr	r3, [r7, #4]
 800214a:	681b      	ldr	r3, [r3, #0]
 800214c:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8002150:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE))
 8002152:	687b      	ldr	r3, [r7, #4]
 8002154:	681b      	ldr	r3, [r3, #0]
 8002156:	4618      	mov	r0, r3
 8002158:	f004 fcae 	bl	8006ab8 <USB_ReadInterrupts>
 800215c:	4603      	mov	r3, r0
 800215e:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8002162:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8002166:	d104      	bne.n	8002172 <HAL_HCD_IRQHandler+0x96>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_PTXFE);
 8002168:	687b      	ldr	r3, [r7, #4]
 800216a:	681b      	ldr	r3, [r3, #0]
 800216c:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002170:	615a      	str	r2, [r3, #20]
    }

    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_MMIS))
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	4618      	mov	r0, r3
 8002178:	f004 fc9e 	bl	8006ab8 <USB_ReadInterrupts>
 800217c:	4603      	mov	r3, r0
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b02      	cmp	r3, #2
 8002184:	d103      	bne.n	800218e <HAL_HCD_IRQHandler+0xb2>
    {
      /* Incorrect mode, acknowledge the interrupt */
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_MMIS);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	2202      	movs	r2, #2
 800218c:	615a      	str	r2, [r3, #20]
    }

    /* Handle Host Disconnect Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT))
 800218e:	687b      	ldr	r3, [r7, #4]
 8002190:	681b      	ldr	r3, [r3, #0]
 8002192:	4618      	mov	r0, r3
 8002194:	f004 fc90 	bl	8006ab8 <USB_ReadInterrupts>
 8002198:	4603      	mov	r3, r0
 800219a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800219e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80021a2:	d11c      	bne.n	80021de <HAL_HCD_IRQHandler+0x102>
    {
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_DISCINT);
 80021a4:	687b      	ldr	r3, [r7, #4]
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
 80021ac:	615a      	str	r2, [r3, #20]

      if ((USBx_HPRT0 & USB_OTG_HPRT_PCSTS) == 0U)
 80021ae:	68fb      	ldr	r3, [r7, #12]
 80021b0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80021b4:	681b      	ldr	r3, [r3, #0]
 80021b6:	f003 0301 	and.w	r3, r3, #1
 80021ba:	2b00      	cmp	r3, #0
 80021bc:	d10f      	bne.n	80021de <HAL_HCD_IRQHandler+0x102>
      {
        /* Flush USB Fifo */
        (void)USB_FlushTxFifo(USBx, 0x10U);
 80021be:	2110      	movs	r1, #16
 80021c0:	6938      	ldr	r0, [r7, #16]
 80021c2:	f004 fb83 	bl	80068cc <USB_FlushTxFifo>
        (void)USB_FlushRxFifo(USBx);
 80021c6:	6938      	ldr	r0, [r7, #16]
 80021c8:	f004 fbb4 	bl	8006934 <USB_FlushRxFifo>

        /* Restore FS Clock */
        (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	2101      	movs	r1, #1
 80021d2:	4618      	mov	r0, r3
 80021d4:	f004 fd48 	bl	8006c68 <USB_InitFSLSPClkSel>

        /* Handle Host Port Disconnect Interrupt */
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
        hhcd->DisconnectCallback(hhcd);
#else
        HAL_HCD_Disconnect_Callback(hhcd);
 80021d8:	6878      	ldr	r0, [r7, #4]
 80021da:	f006 fab9 	bl	8008750 <HAL_HCD_Disconnect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
      }
    }

    /* Handle Host Port Interrupts */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HPRTINT))
 80021de:	687b      	ldr	r3, [r7, #4]
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f004 fc68 	bl	8006ab8 <USB_ReadInterrupts>
 80021e8:	4603      	mov	r3, r0
 80021ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80021ee:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80021f2:	d102      	bne.n	80021fa <HAL_HCD_IRQHandler+0x11e>
    {
      HCD_Port_IRQHandler(hhcd);
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f000 fff9 	bl	80031ec <HCD_Port_IRQHandler>
    }

    /* Handle Host SOF Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_SOF))
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	681b      	ldr	r3, [r3, #0]
 80021fe:	4618      	mov	r0, r3
 8002200:	f004 fc5a 	bl	8006ab8 <USB_ReadInterrupts>
 8002204:	4603      	mov	r3, r0
 8002206:	f003 0308 	and.w	r3, r3, #8
 800220a:	2b08      	cmp	r3, #8
 800220c:	d106      	bne.n	800221c <HAL_HCD_IRQHandler+0x140>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->SOFCallback(hhcd);
#else
      HAL_HCD_SOF_Callback(hhcd);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f006 fa82 	bl	8008718 <HAL_HCD_SOF_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */

      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_SOF);
 8002214:	687b      	ldr	r3, [r7, #4]
 8002216:	681b      	ldr	r3, [r3, #0]
 8002218:	2208      	movs	r2, #8
 800221a:	615a      	str	r2, [r3, #20]
    }

    /* Handle Rx Queue Level Interrupts */
    if ((__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_RXFLVL)) != 0U)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4618      	mov	r0, r3
 8002222:	f004 fc49 	bl	8006ab8 <USB_ReadInterrupts>
 8002226:	4603      	mov	r3, r0
 8002228:	f003 0310 	and.w	r3, r3, #16
 800222c:	2b10      	cmp	r3, #16
 800222e:	d101      	bne.n	8002234 <HAL_HCD_IRQHandler+0x158>
 8002230:	2301      	movs	r3, #1
 8002232:	e000      	b.n	8002236 <HAL_HCD_IRQHandler+0x15a>
 8002234:	2300      	movs	r3, #0
 8002236:	2b00      	cmp	r3, #0
 8002238:	d012      	beq.n	8002260 <HAL_HCD_IRQHandler+0x184>
    {
      USB_MASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	681b      	ldr	r3, [r3, #0]
 800223e:	699a      	ldr	r2, [r3, #24]
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	681b      	ldr	r3, [r3, #0]
 8002244:	f022 0210 	bic.w	r2, r2, #16
 8002248:	619a      	str	r2, [r3, #24]

      HCD_RXQLVL_IRQHandler(hhcd);
 800224a:	6878      	ldr	r0, [r7, #4]
 800224c:	f000 fefc 	bl	8003048 <HCD_RXQLVL_IRQHandler>

      USB_UNMASK_INTERRUPT(hhcd->Instance, USB_OTG_GINTSTS_RXFLVL);
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	681b      	ldr	r3, [r3, #0]
 8002254:	699a      	ldr	r2, [r3, #24]
 8002256:	687b      	ldr	r3, [r7, #4]
 8002258:	681b      	ldr	r3, [r3, #0]
 800225a:	f042 0210 	orr.w	r2, r2, #16
 800225e:	619a      	str	r2, [r3, #24]
    }

    /* Handle Host channel Interrupt */
    if (__HAL_HCD_GET_FLAG(hhcd, USB_OTG_GINTSTS_HCINT))
 8002260:	687b      	ldr	r3, [r7, #4]
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4618      	mov	r0, r3
 8002266:	f004 fc27 	bl	8006ab8 <USB_ReadInterrupts>
 800226a:	4603      	mov	r3, r0
 800226c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002270:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8002274:	d13a      	bne.n	80022ec <HAL_HCD_IRQHandler+0x210>
    {
      interrupt = USB_HC_ReadInterrupt(hhcd->Instance);
 8002276:	687b      	ldr	r3, [r7, #4]
 8002278:	681b      	ldr	r3, [r3, #0]
 800227a:	4618      	mov	r0, r3
 800227c:	f004 ff94 	bl	80071a8 <USB_HC_ReadInterrupt>
 8002280:	60b8      	str	r0, [r7, #8]
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 8002282:	2300      	movs	r3, #0
 8002284:	617b      	str	r3, [r7, #20]
 8002286:	e025      	b.n	80022d4 <HAL_HCD_IRQHandler+0x1f8>
      {
        if ((interrupt & (1UL << (i & 0xFU))) != 0U)
 8002288:	697b      	ldr	r3, [r7, #20]
 800228a:	f003 030f 	and.w	r3, r3, #15
 800228e:	68ba      	ldr	r2, [r7, #8]
 8002290:	fa22 f303 	lsr.w	r3, r2, r3
 8002294:	f003 0301 	and.w	r3, r3, #1
 8002298:	2b00      	cmp	r3, #0
 800229a:	d018      	beq.n	80022ce <HAL_HCD_IRQHandler+0x1f2>
        {
          if ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_EPDIR) == USB_OTG_HCCHAR_EPDIR)
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	015a      	lsls	r2, r3, #5
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	4413      	add	r3, r2
 80022a4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80022ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80022b2:	d106      	bne.n	80022c2 <HAL_HCD_IRQHandler+0x1e6>
          {
            HCD_HC_IN_IRQHandler(hhcd, (uint8_t)i);
 80022b4:	697b      	ldr	r3, [r7, #20]
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	4619      	mov	r1, r3
 80022ba:	6878      	ldr	r0, [r7, #4]
 80022bc:	f000 f88f 	bl	80023de <HCD_HC_IN_IRQHandler>
 80022c0:	e005      	b.n	80022ce <HAL_HCD_IRQHandler+0x1f2>
          }
          else
          {
            HCD_HC_OUT_IRQHandler(hhcd, (uint8_t)i);
 80022c2:	697b      	ldr	r3, [r7, #20]
 80022c4:	b2db      	uxtb	r3, r3
 80022c6:	4619      	mov	r1, r3
 80022c8:	6878      	ldr	r0, [r7, #4]
 80022ca:	f000 fbbb 	bl	8002a44 <HCD_HC_OUT_IRQHandler>
      for (i = 0U; i < hhcd->Init.Host_channels; i++)
 80022ce:	697b      	ldr	r3, [r7, #20]
 80022d0:	3301      	adds	r3, #1
 80022d2:	617b      	str	r3, [r7, #20]
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	689b      	ldr	r3, [r3, #8]
 80022d8:	697a      	ldr	r2, [r7, #20]
 80022da:	429a      	cmp	r2, r3
 80022dc:	d3d4      	bcc.n	8002288 <HAL_HCD_IRQHandler+0x1ac>
          }
        }
      }
      __HAL_HCD_CLEAR_FLAG(hhcd, USB_OTG_GINTSTS_HCINT);
 80022de:	687b      	ldr	r3, [r7, #4]
 80022e0:	681b      	ldr	r3, [r3, #0]
 80022e2:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80022e6:	615a      	str	r2, [r3, #20]
 80022e8:	e000      	b.n	80022ec <HAL_HCD_IRQHandler+0x210>
      return;
 80022ea:	bf00      	nop
    }
  }
}
 80022ec:	3718      	adds	r7, #24
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bd80      	pop	{r7, pc}

080022f2 <HAL_HCD_Start>:
  * @brief  Start the host driver.
  * @param  hhcd HCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HCD_Start(HCD_HandleTypeDef *hhcd)
{
 80022f2:	b580      	push	{r7, lr}
 80022f4:	b082      	sub	sp, #8
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 80022fa:	687b      	ldr	r3, [r7, #4]
 80022fc:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002300:	2b01      	cmp	r3, #1
 8002302:	d101      	bne.n	8002308 <HAL_HCD_Start+0x16>
 8002304:	2302      	movs	r3, #2
 8002306:	e013      	b.n	8002330 <HAL_HCD_Start+0x3e>
 8002308:	687b      	ldr	r3, [r7, #4]
 800230a:	2201      	movs	r2, #1
 800230c:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  /* Enable port power */
  (void)USB_DriveVbus(hhcd->Instance, 1U);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	2101      	movs	r1, #1
 8002316:	4618      	mov	r0, r3
 8002318:	f004 fce0 	bl	8006cdc <USB_DriveVbus>

  /* Enable global interrupt */
  __HAL_HCD_ENABLE(hhcd);
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	681b      	ldr	r3, [r3, #0]
 8002320:	4618      	mov	r0, r3
 8002322:	f004 fa64 	bl	80067ee <USB_EnableGlobalInt>
  __HAL_UNLOCK(hhcd);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2200      	movs	r2, #0
 800232a:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 800232e:	2300      	movs	r3, #0
}
 8002330:	4618      	mov	r0, r3
 8002332:	3708      	adds	r7, #8
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <HAL_HCD_Stop>:
  * @param  hhcd HCD handle
  * @retval HAL status
  */

HAL_StatusTypeDef HAL_HCD_Stop(HCD_HandleTypeDef *hhcd)
{
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hhcd);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f893 32f8 	ldrb.w	r3, [r3, #760]	; 0x2f8
 8002346:	2b01      	cmp	r3, #1
 8002348:	d101      	bne.n	800234e <HAL_HCD_Stop+0x16>
 800234a:	2302      	movs	r3, #2
 800234c:	e00d      	b.n	800236a <HAL_HCD_Stop+0x32>
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	2201      	movs	r2, #1
 8002352:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8
  (void)USB_StopHost(hhcd->Instance);
 8002356:	687b      	ldr	r3, [r7, #4]
 8002358:	681b      	ldr	r3, [r3, #0]
 800235a:	4618      	mov	r0, r3
 800235c:	f005 f831 	bl	80073c2 <USB_StopHost>
  __HAL_UNLOCK(hhcd);
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	2200      	movs	r2, #0
 8002364:	f883 22f8 	strb.w	r2, [r3, #760]	; 0x2f8

  return HAL_OK;
 8002368:	2300      	movs	r3, #0
}
 800236a:	4618      	mov	r0, r3
 800236c:	3708      	adds	r7, #8
 800236e:	46bd      	mov	sp, r7
 8002370:	bd80      	pop	{r7, pc}

08002372 <HAL_HCD_HC_GetURBState>:
  *            URB_NYET/
  *            URB_ERROR/
  *            URB_STALL
  */
HCD_URBStateTypeDef HAL_HCD_HC_GetURBState(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002372:	b480      	push	{r7}
 8002374:	b083      	sub	sp, #12
 8002376:	af00      	add	r7, sp, #0
 8002378:	6078      	str	r0, [r7, #4]
 800237a:	460b      	mov	r3, r1
 800237c:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].urb_state;
 800237e:	78fb      	ldrb	r3, [r7, #3]
 8002380:	687a      	ldr	r2, [r7, #4]
 8002382:	212c      	movs	r1, #44	; 0x2c
 8002384:	fb01 f303 	mul.w	r3, r1, r3
 8002388:	4413      	add	r3, r2
 800238a:	3360      	adds	r3, #96	; 0x60
 800238c:	781b      	ldrb	r3, [r3, #0]
}
 800238e:	4618      	mov	r0, r3
 8002390:	370c      	adds	r7, #12
 8002392:	46bd      	mov	sp, r7
 8002394:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002398:	4770      	bx	lr

0800239a <HAL_HCD_HC_GetXferCount>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval last transfer size in byte
  */
uint32_t HAL_HCD_HC_GetXferCount(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 800239a:	b480      	push	{r7}
 800239c:	b083      	sub	sp, #12
 800239e:	af00      	add	r7, sp, #0
 80023a0:	6078      	str	r0, [r7, #4]
 80023a2:	460b      	mov	r3, r1
 80023a4:	70fb      	strb	r3, [r7, #3]
  return hhcd->hc[chnum].xfer_count;
 80023a6:	78fb      	ldrb	r3, [r7, #3]
 80023a8:	687a      	ldr	r2, [r7, #4]
 80023aa:	212c      	movs	r1, #44	; 0x2c
 80023ac:	fb01 f303 	mul.w	r3, r1, r3
 80023b0:	4413      	add	r3, r2
 80023b2:	3350      	adds	r3, #80	; 0x50
 80023b4:	681b      	ldr	r3, [r3, #0]
}
 80023b6:	4618      	mov	r0, r3
 80023b8:	370c      	adds	r7, #12
 80023ba:	46bd      	mov	sp, r7
 80023bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c0:	4770      	bx	lr

080023c2 <HAL_HCD_GetCurrentFrame>:
  * @brief  Return the current Host frame number.
  * @param  hhcd HCD handle
  * @retval Current Host frame number
  */
uint32_t HAL_HCD_GetCurrentFrame(HCD_HandleTypeDef *hhcd)
{
 80023c2:	b580      	push	{r7, lr}
 80023c4:	b082      	sub	sp, #8
 80023c6:	af00      	add	r7, sp, #0
 80023c8:	6078      	str	r0, [r7, #4]
  return (USB_GetCurrentFrame(hhcd->Instance));
 80023ca:	687b      	ldr	r3, [r7, #4]
 80023cc:	681b      	ldr	r3, [r3, #0]
 80023ce:	4618      	mov	r0, r3
 80023d0:	f004 fcd4 	bl	8006d7c <USB_GetCurrentFrame>
 80023d4:	4603      	mov	r3, r0
}
 80023d6:	4618      	mov	r0, r3
 80023d8:	3708      	adds	r7, #8
 80023da:	46bd      	mov	sp, r7
 80023dc:	bd80      	pop	{r7, pc}

080023de <HCD_HC_IN_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_IN_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 80023de:	b580      	push	{r7, lr}
 80023e0:	b086      	sub	sp, #24
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
 80023e6:	460b      	mov	r3, r1
 80023e8:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	681b      	ldr	r3, [r3, #0]
 80023ee:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	613b      	str	r3, [r7, #16]
  uint32_t ch_num = (uint32_t)chnum;
 80023f4:	78fb      	ldrb	r3, [r7, #3]
 80023f6:	60fb      	str	r3, [r7, #12]

  uint32_t tmpreg;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	015a      	lsls	r2, r3, #5
 80023fc:	693b      	ldr	r3, [r7, #16]
 80023fe:	4413      	add	r3, r2
 8002400:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f003 0304 	and.w	r3, r3, #4
 800240a:	2b04      	cmp	r3, #4
 800240c:	d11a      	bne.n	8002444 <HCD_HC_IN_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 800240e:	68fb      	ldr	r3, [r7, #12]
 8002410:	015a      	lsls	r2, r3, #5
 8002412:	693b      	ldr	r3, [r7, #16]
 8002414:	4413      	add	r3, r2
 8002416:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800241a:	461a      	mov	r2, r3
 800241c:	2304      	movs	r3, #4
 800241e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002420:	687a      	ldr	r2, [r7, #4]
 8002422:	68fb      	ldr	r3, [r7, #12]
 8002424:	212c      	movs	r1, #44	; 0x2c
 8002426:	fb01 f303 	mul.w	r3, r1, r3
 800242a:	4413      	add	r3, r2
 800242c:	3361      	adds	r3, #97	; 0x61
 800242e:	2206      	movs	r2, #6
 8002430:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	681b      	ldr	r3, [r3, #0]
 8002436:	68fa      	ldr	r2, [r7, #12]
 8002438:	b2d2      	uxtb	r2, r2
 800243a:	4611      	mov	r1, r2
 800243c:	4618      	mov	r0, r3
 800243e:	f004 fec4 	bl	80071ca <USB_HC_Halt>
 8002442:	e0af      	b.n	80025a4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_BBERR) == USB_OTG_HCINT_BBERR)
 8002444:	68fb      	ldr	r3, [r7, #12]
 8002446:	015a      	lsls	r2, r3, #5
 8002448:	693b      	ldr	r3, [r7, #16]
 800244a:	4413      	add	r3, r2
 800244c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002450:	689b      	ldr	r3, [r3, #8]
 8002452:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002456:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800245a:	d11b      	bne.n	8002494 <HCD_HC_IN_IRQHandler+0xb6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_BBERR);
 800245c:	68fb      	ldr	r3, [r7, #12]
 800245e:	015a      	lsls	r2, r3, #5
 8002460:	693b      	ldr	r3, [r7, #16]
 8002462:	4413      	add	r3, r2
 8002464:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002468:	461a      	mov	r2, r3
 800246a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800246e:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_BBLERR;
 8002470:	687a      	ldr	r2, [r7, #4]
 8002472:	68fb      	ldr	r3, [r7, #12]
 8002474:	212c      	movs	r1, #44	; 0x2c
 8002476:	fb01 f303 	mul.w	r3, r1, r3
 800247a:	4413      	add	r3, r2
 800247c:	3361      	adds	r3, #97	; 0x61
 800247e:	2207      	movs	r2, #7
 8002480:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	68fa      	ldr	r2, [r7, #12]
 8002488:	b2d2      	uxtb	r2, r2
 800248a:	4611      	mov	r1, r2
 800248c:	4618      	mov	r0, r3
 800248e:	f004 fe9c 	bl	80071ca <USB_HC_Halt>
 8002492:	e087      	b.n	80025a4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002494:	68fb      	ldr	r3, [r7, #12]
 8002496:	015a      	lsls	r2, r3, #5
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	4413      	add	r3, r2
 800249c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024a0:	689b      	ldr	r3, [r3, #8]
 80024a2:	f003 0320 	and.w	r3, r3, #32
 80024a6:	2b20      	cmp	r3, #32
 80024a8:	d109      	bne.n	80024be <HCD_HC_IN_IRQHandler+0xe0>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 80024aa:	68fb      	ldr	r3, [r7, #12]
 80024ac:	015a      	lsls	r2, r3, #5
 80024ae:	693b      	ldr	r3, [r7, #16]
 80024b0:	4413      	add	r3, r2
 80024b2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024b6:	461a      	mov	r2, r3
 80024b8:	2320      	movs	r3, #32
 80024ba:	6093      	str	r3, [r2, #8]
 80024bc:	e072      	b.n	80025a4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	015a      	lsls	r2, r3, #5
 80024c2:	693b      	ldr	r3, [r7, #16]
 80024c4:	4413      	add	r3, r2
 80024c6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024ca:	689b      	ldr	r3, [r3, #8]
 80024cc:	f003 0308 	and.w	r3, r3, #8
 80024d0:	2b08      	cmp	r3, #8
 80024d2:	d11a      	bne.n	800250a <HCD_HC_IN_IRQHandler+0x12c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	015a      	lsls	r2, r3, #5
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	4413      	add	r3, r2
 80024dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80024e0:	461a      	mov	r2, r3
 80024e2:	2308      	movs	r3, #8
 80024e4:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 80024e6:	687a      	ldr	r2, [r7, #4]
 80024e8:	68fb      	ldr	r3, [r7, #12]
 80024ea:	212c      	movs	r1, #44	; 0x2c
 80024ec:	fb01 f303 	mul.w	r3, r1, r3
 80024f0:	4413      	add	r3, r2
 80024f2:	3361      	adds	r3, #97	; 0x61
 80024f4:	2205      	movs	r2, #5
 80024f6:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	68fa      	ldr	r2, [r7, #12]
 80024fe:	b2d2      	uxtb	r2, r2
 8002500:	4611      	mov	r1, r2
 8002502:	4618      	mov	r0, r3
 8002504:	f004 fe61 	bl	80071ca <USB_HC_Halt>
 8002508:	e04c      	b.n	80025a4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 800250a:	68fb      	ldr	r3, [r7, #12]
 800250c:	015a      	lsls	r2, r3, #5
 800250e:	693b      	ldr	r3, [r7, #16]
 8002510:	4413      	add	r3, r2
 8002512:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002516:	689b      	ldr	r3, [r3, #8]
 8002518:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800251c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002520:	d11b      	bne.n	800255a <HCD_HC_IN_IRQHandler+0x17c>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002522:	68fb      	ldr	r3, [r7, #12]
 8002524:	015a      	lsls	r2, r3, #5
 8002526:	693b      	ldr	r3, [r7, #16]
 8002528:	4413      	add	r3, r2
 800252a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800252e:	461a      	mov	r2, r3
 8002530:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002534:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002536:	687a      	ldr	r2, [r7, #4]
 8002538:	68fb      	ldr	r3, [r7, #12]
 800253a:	212c      	movs	r1, #44	; 0x2c
 800253c:	fb01 f303 	mul.w	r3, r1, r3
 8002540:	4413      	add	r3, r2
 8002542:	3361      	adds	r3, #97	; 0x61
 8002544:	2208      	movs	r2, #8
 8002546:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	68fa      	ldr	r2, [r7, #12]
 800254e:	b2d2      	uxtb	r2, r2
 8002550:	4611      	mov	r1, r2
 8002552:	4618      	mov	r0, r3
 8002554:	f004 fe39 	bl	80071ca <USB_HC_Halt>
 8002558:	e024      	b.n	80025a4 <HCD_HC_IN_IRQHandler+0x1c6>
  }
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 800255a:	68fb      	ldr	r3, [r7, #12]
 800255c:	015a      	lsls	r2, r3, #5
 800255e:	693b      	ldr	r3, [r7, #16]
 8002560:	4413      	add	r3, r2
 8002562:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002566:	689b      	ldr	r3, [r3, #8]
 8002568:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800256c:	2b80      	cmp	r3, #128	; 0x80
 800256e:	d119      	bne.n	80025a4 <HCD_HC_IN_IRQHandler+0x1c6>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002570:	68fb      	ldr	r3, [r7, #12]
 8002572:	015a      	lsls	r2, r3, #5
 8002574:	693b      	ldr	r3, [r7, #16]
 8002576:	4413      	add	r3, r2
 8002578:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800257c:	461a      	mov	r2, r3
 800257e:	2380      	movs	r3, #128	; 0x80
 8002580:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002582:	687a      	ldr	r2, [r7, #4]
 8002584:	68fb      	ldr	r3, [r7, #12]
 8002586:	212c      	movs	r1, #44	; 0x2c
 8002588:	fb01 f303 	mul.w	r3, r1, r3
 800258c:	4413      	add	r3, r2
 800258e:	3361      	adds	r3, #97	; 0x61
 8002590:	2206      	movs	r2, #6
 8002592:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002594:	687b      	ldr	r3, [r7, #4]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	68fa      	ldr	r2, [r7, #12]
 800259a:	b2d2      	uxtb	r2, r2
 800259c:	4611      	mov	r1, r2
 800259e:	4618      	mov	r0, r3
 80025a0:	f004 fe13 	bl	80071ca <USB_HC_Halt>
  else
  {
    /* ... */
  }

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 80025a4:	68fb      	ldr	r3, [r7, #12]
 80025a6:	015a      	lsls	r2, r3, #5
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	4413      	add	r3, r2
 80025ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025b0:	689b      	ldr	r3, [r3, #8]
 80025b2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80025b6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025ba:	d112      	bne.n	80025e2 <HCD_HC_IN_IRQHandler+0x204>
  {
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80025bc:	687b      	ldr	r3, [r7, #4]
 80025be:	681b      	ldr	r3, [r3, #0]
 80025c0:	68fa      	ldr	r2, [r7, #12]
 80025c2:	b2d2      	uxtb	r2, r2
 80025c4:	4611      	mov	r1, r2
 80025c6:	4618      	mov	r0, r3
 80025c8:	f004 fdff 	bl	80071ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	015a      	lsls	r2, r3, #5
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	4413      	add	r3, r2
 80025d4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025d8:	461a      	mov	r2, r3
 80025da:	f44f 7300 	mov.w	r3, #512	; 0x200
 80025de:	6093      	str	r3, [r2, #8]
  }
  else
  {
    /* ... */
  }
}
 80025e0:	e22c      	b.n	8002a3c <HCD_HC_IN_IRQHandler+0x65e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	015a      	lsls	r2, r3, #5
 80025e6:	693b      	ldr	r3, [r7, #16]
 80025e8:	4413      	add	r3, r2
 80025ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80025ee:	689b      	ldr	r3, [r3, #8]
 80025f0:	f003 0301 	and.w	r3, r3, #1
 80025f4:	2b01      	cmp	r3, #1
 80025f6:	f040 80c1 	bne.w	800277c <HCD_HC_IN_IRQHandler+0x39e>
    hhcd->hc[ch_num].state = HC_XFRC;
 80025fa:	687a      	ldr	r2, [r7, #4]
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	212c      	movs	r1, #44	; 0x2c
 8002600:	fb01 f303 	mul.w	r3, r1, r3
 8002604:	4413      	add	r3, r2
 8002606:	3361      	adds	r3, #97	; 0x61
 8002608:	2201      	movs	r2, #1
 800260a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 800260c:	687a      	ldr	r2, [r7, #4]
 800260e:	68fb      	ldr	r3, [r7, #12]
 8002610:	212c      	movs	r1, #44	; 0x2c
 8002612:	fb01 f303 	mul.w	r3, r1, r3
 8002616:	4413      	add	r3, r2
 8002618:	335c      	adds	r3, #92	; 0x5c
 800261a:	2200      	movs	r2, #0
 800261c:	601a      	str	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	015a      	lsls	r2, r3, #5
 8002622:	693b      	ldr	r3, [r7, #16]
 8002624:	4413      	add	r3, r2
 8002626:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800262a:	461a      	mov	r2, r3
 800262c:	2301      	movs	r3, #1
 800262e:	6093      	str	r3, [r2, #8]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002630:	687a      	ldr	r2, [r7, #4]
 8002632:	68fb      	ldr	r3, [r7, #12]
 8002634:	212c      	movs	r1, #44	; 0x2c
 8002636:	fb01 f303 	mul.w	r3, r1, r3
 800263a:	4413      	add	r3, r2
 800263c:	333f      	adds	r3, #63	; 0x3f
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d009      	beq.n	8002658 <HCD_HC_IN_IRQHandler+0x27a>
        (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	68fb      	ldr	r3, [r7, #12]
 8002648:	212c      	movs	r1, #44	; 0x2c
 800264a:	fb01 f303 	mul.w	r3, r1, r3
 800264e:	4413      	add	r3, r2
 8002650:	333f      	adds	r3, #63	; 0x3f
 8002652:	781b      	ldrb	r3, [r3, #0]
    if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 8002654:	2b02      	cmp	r3, #2
 8002656:	d111      	bne.n	800267c <HCD_HC_IN_IRQHandler+0x29e>
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	68fa      	ldr	r2, [r7, #12]
 800265e:	b2d2      	uxtb	r2, r2
 8002660:	4611      	mov	r1, r2
 8002662:	4618      	mov	r0, r3
 8002664:	f004 fdb1 	bl	80071ca <USB_HC_Halt>
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002668:	68fb      	ldr	r3, [r7, #12]
 800266a:	015a      	lsls	r2, r3, #5
 800266c:	693b      	ldr	r3, [r7, #16]
 800266e:	4413      	add	r3, r2
 8002670:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002674:	461a      	mov	r2, r3
 8002676:	2310      	movs	r3, #16
 8002678:	6093      	str	r3, [r2, #8]
 800267a:	e03a      	b.n	80026f2 <HCD_HC_IN_IRQHandler+0x314>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 800267c:	687a      	ldr	r2, [r7, #4]
 800267e:	68fb      	ldr	r3, [r7, #12]
 8002680:	212c      	movs	r1, #44	; 0x2c
 8002682:	fb01 f303 	mul.w	r3, r1, r3
 8002686:	4413      	add	r3, r2
 8002688:	333f      	adds	r3, #63	; 0x3f
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	2b03      	cmp	r3, #3
 800268e:	d009      	beq.n	80026a4 <HCD_HC_IN_IRQHandler+0x2c6>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_ISOC))
 8002690:	687a      	ldr	r2, [r7, #4]
 8002692:	68fb      	ldr	r3, [r7, #12]
 8002694:	212c      	movs	r1, #44	; 0x2c
 8002696:	fb01 f303 	mul.w	r3, r1, r3
 800269a:	4413      	add	r3, r2
 800269c:	333f      	adds	r3, #63	; 0x3f
 800269e:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_INTR) ||
 80026a0:	2b01      	cmp	r3, #1
 80026a2:	d126      	bne.n	80026f2 <HCD_HC_IN_IRQHandler+0x314>
      USBx_HC(ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 80026a4:	68fb      	ldr	r3, [r7, #12]
 80026a6:	015a      	lsls	r2, r3, #5
 80026a8:	693b      	ldr	r3, [r7, #16]
 80026aa:	4413      	add	r3, r2
 80026ac:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	68fa      	ldr	r2, [r7, #12]
 80026b4:	0151      	lsls	r1, r2, #5
 80026b6:	693a      	ldr	r2, [r7, #16]
 80026b8:	440a      	add	r2, r1
 80026ba:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80026be:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 80026c2:	6013      	str	r3, [r2, #0]
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80026c4:	687a      	ldr	r2, [r7, #4]
 80026c6:	68fb      	ldr	r3, [r7, #12]
 80026c8:	212c      	movs	r1, #44	; 0x2c
 80026ca:	fb01 f303 	mul.w	r3, r1, r3
 80026ce:	4413      	add	r3, r2
 80026d0:	3360      	adds	r3, #96	; 0x60
 80026d2:	2201      	movs	r2, #1
 80026d4:	701a      	strb	r2, [r3, #0]
      HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 80026d6:	68fb      	ldr	r3, [r7, #12]
 80026d8:	b2d9      	uxtb	r1, r3
 80026da:	687a      	ldr	r2, [r7, #4]
 80026dc:	68fb      	ldr	r3, [r7, #12]
 80026de:	202c      	movs	r0, #44	; 0x2c
 80026e0:	fb00 f303 	mul.w	r3, r0, r3
 80026e4:	4413      	add	r3, r2
 80026e6:	3360      	adds	r3, #96	; 0x60
 80026e8:	781b      	ldrb	r3, [r3, #0]
 80026ea:	461a      	mov	r2, r3
 80026ec:	6878      	ldr	r0, [r7, #4]
 80026ee:	f006 f83d 	bl	800876c <HAL_HCD_HC_NotifyURBChange_Callback>
    if (hhcd->Init.dma_enable == 1U)
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	691b      	ldr	r3, [r3, #16]
 80026f6:	2b01      	cmp	r3, #1
 80026f8:	d12b      	bne.n	8002752 <HCD_HC_IN_IRQHandler+0x374>
      if (((hhcd->hc[ch_num].XferSize / hhcd->hc[ch_num].max_packet) & 1U) != 0U)
 80026fa:	687a      	ldr	r2, [r7, #4]
 80026fc:	68fb      	ldr	r3, [r7, #12]
 80026fe:	212c      	movs	r1, #44	; 0x2c
 8002700:	fb01 f303 	mul.w	r3, r1, r3
 8002704:	4413      	add	r3, r2
 8002706:	3348      	adds	r3, #72	; 0x48
 8002708:	681b      	ldr	r3, [r3, #0]
 800270a:	6879      	ldr	r1, [r7, #4]
 800270c:	68fa      	ldr	r2, [r7, #12]
 800270e:	202c      	movs	r0, #44	; 0x2c
 8002710:	fb00 f202 	mul.w	r2, r0, r2
 8002714:	440a      	add	r2, r1
 8002716:	3240      	adds	r2, #64	; 0x40
 8002718:	8812      	ldrh	r2, [r2, #0]
 800271a:	fbb3 f3f2 	udiv	r3, r3, r2
 800271e:	f003 0301 	and.w	r3, r3, #1
 8002722:	2b00      	cmp	r3, #0
 8002724:	f000 818a 	beq.w	8002a3c <HCD_HC_IN_IRQHandler+0x65e>
        hhcd->hc[ch_num].toggle_in ^= 1U;
 8002728:	687a      	ldr	r2, [r7, #4]
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	212c      	movs	r1, #44	; 0x2c
 800272e:	fb01 f303 	mul.w	r3, r1, r3
 8002732:	4413      	add	r3, r2
 8002734:	3354      	adds	r3, #84	; 0x54
 8002736:	781b      	ldrb	r3, [r3, #0]
 8002738:	f083 0301 	eor.w	r3, r3, #1
 800273c:	b2d8      	uxtb	r0, r3
 800273e:	687a      	ldr	r2, [r7, #4]
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	212c      	movs	r1, #44	; 0x2c
 8002744:	fb01 f303 	mul.w	r3, r1, r3
 8002748:	4413      	add	r3, r2
 800274a:	3354      	adds	r3, #84	; 0x54
 800274c:	4602      	mov	r2, r0
 800274e:	701a      	strb	r2, [r3, #0]
}
 8002750:	e174      	b.n	8002a3c <HCD_HC_IN_IRQHandler+0x65e>
      hhcd->hc[ch_num].toggle_in ^= 1U;
 8002752:	687a      	ldr	r2, [r7, #4]
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	212c      	movs	r1, #44	; 0x2c
 8002758:	fb01 f303 	mul.w	r3, r1, r3
 800275c:	4413      	add	r3, r2
 800275e:	3354      	adds	r3, #84	; 0x54
 8002760:	781b      	ldrb	r3, [r3, #0]
 8002762:	f083 0301 	eor.w	r3, r3, #1
 8002766:	b2d8      	uxtb	r0, r3
 8002768:	687a      	ldr	r2, [r7, #4]
 800276a:	68fb      	ldr	r3, [r7, #12]
 800276c:	212c      	movs	r1, #44	; 0x2c
 800276e:	fb01 f303 	mul.w	r3, r1, r3
 8002772:	4413      	add	r3, r2
 8002774:	3354      	adds	r3, #84	; 0x54
 8002776:	4602      	mov	r2, r0
 8002778:	701a      	strb	r2, [r3, #0]
}
 800277a:	e15f      	b.n	8002a3c <HCD_HC_IN_IRQHandler+0x65e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 800277c:	68fb      	ldr	r3, [r7, #12]
 800277e:	015a      	lsls	r2, r3, #5
 8002780:	693b      	ldr	r3, [r7, #16]
 8002782:	4413      	add	r3, r2
 8002784:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002788:	689b      	ldr	r3, [r3, #8]
 800278a:	f003 0302 	and.w	r3, r3, #2
 800278e:	2b02      	cmp	r3, #2
 8002790:	f040 80f6 	bne.w	8002980 <HCD_HC_IN_IRQHandler+0x5a2>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002794:	687a      	ldr	r2, [r7, #4]
 8002796:	68fb      	ldr	r3, [r7, #12]
 8002798:	212c      	movs	r1, #44	; 0x2c
 800279a:	fb01 f303 	mul.w	r3, r1, r3
 800279e:	4413      	add	r3, r2
 80027a0:	3361      	adds	r3, #97	; 0x61
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	2b01      	cmp	r3, #1
 80027a6:	d109      	bne.n	80027bc <HCD_HC_IN_IRQHandler+0x3de>
      hhcd->hc[ch_num].urb_state = URB_DONE;
 80027a8:	687a      	ldr	r2, [r7, #4]
 80027aa:	68fb      	ldr	r3, [r7, #12]
 80027ac:	212c      	movs	r1, #44	; 0x2c
 80027ae:	fb01 f303 	mul.w	r3, r1, r3
 80027b2:	4413      	add	r3, r2
 80027b4:	3360      	adds	r3, #96	; 0x60
 80027b6:	2201      	movs	r2, #1
 80027b8:	701a      	strb	r2, [r3, #0]
 80027ba:	e0c9      	b.n	8002950 <HCD_HC_IN_IRQHandler+0x572>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 80027bc:	687a      	ldr	r2, [r7, #4]
 80027be:	68fb      	ldr	r3, [r7, #12]
 80027c0:	212c      	movs	r1, #44	; 0x2c
 80027c2:	fb01 f303 	mul.w	r3, r1, r3
 80027c6:	4413      	add	r3, r2
 80027c8:	3361      	adds	r3, #97	; 0x61
 80027ca:	781b      	ldrb	r3, [r3, #0]
 80027cc:	2b05      	cmp	r3, #5
 80027ce:	d109      	bne.n	80027e4 <HCD_HC_IN_IRQHandler+0x406>
      hhcd->hc[ch_num].urb_state = URB_STALL;
 80027d0:	687a      	ldr	r2, [r7, #4]
 80027d2:	68fb      	ldr	r3, [r7, #12]
 80027d4:	212c      	movs	r1, #44	; 0x2c
 80027d6:	fb01 f303 	mul.w	r3, r1, r3
 80027da:	4413      	add	r3, r2
 80027dc:	3360      	adds	r3, #96	; 0x60
 80027de:	2205      	movs	r2, #5
 80027e0:	701a      	strb	r2, [r3, #0]
 80027e2:	e0b5      	b.n	8002950 <HCD_HC_IN_IRQHandler+0x572>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 80027e4:	687a      	ldr	r2, [r7, #4]
 80027e6:	68fb      	ldr	r3, [r7, #12]
 80027e8:	212c      	movs	r1, #44	; 0x2c
 80027ea:	fb01 f303 	mul.w	r3, r1, r3
 80027ee:	4413      	add	r3, r2
 80027f0:	3361      	adds	r3, #97	; 0x61
 80027f2:	781b      	ldrb	r3, [r3, #0]
 80027f4:	2b06      	cmp	r3, #6
 80027f6:	d009      	beq.n	800280c <HCD_HC_IN_IRQHandler+0x42e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 80027f8:	687a      	ldr	r2, [r7, #4]
 80027fa:	68fb      	ldr	r3, [r7, #12]
 80027fc:	212c      	movs	r1, #44	; 0x2c
 80027fe:	fb01 f303 	mul.w	r3, r1, r3
 8002802:	4413      	add	r3, r2
 8002804:	3361      	adds	r3, #97	; 0x61
 8002806:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002808:	2b08      	cmp	r3, #8
 800280a:	d150      	bne.n	80028ae <HCD_HC_IN_IRQHandler+0x4d0>
      hhcd->hc[ch_num].ErrCnt++;
 800280c:	687a      	ldr	r2, [r7, #4]
 800280e:	68fb      	ldr	r3, [r7, #12]
 8002810:	212c      	movs	r1, #44	; 0x2c
 8002812:	fb01 f303 	mul.w	r3, r1, r3
 8002816:	4413      	add	r3, r2
 8002818:	335c      	adds	r3, #92	; 0x5c
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	1c5a      	adds	r2, r3, #1
 800281e:	6879      	ldr	r1, [r7, #4]
 8002820:	68fb      	ldr	r3, [r7, #12]
 8002822:	202c      	movs	r0, #44	; 0x2c
 8002824:	fb00 f303 	mul.w	r3, r0, r3
 8002828:	440b      	add	r3, r1
 800282a:	335c      	adds	r3, #92	; 0x5c
 800282c:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 800282e:	687a      	ldr	r2, [r7, #4]
 8002830:	68fb      	ldr	r3, [r7, #12]
 8002832:	212c      	movs	r1, #44	; 0x2c
 8002834:	fb01 f303 	mul.w	r3, r1, r3
 8002838:	4413      	add	r3, r2
 800283a:	335c      	adds	r3, #92	; 0x5c
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	2b02      	cmp	r3, #2
 8002840:	d912      	bls.n	8002868 <HCD_HC_IN_IRQHandler+0x48a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002842:	687a      	ldr	r2, [r7, #4]
 8002844:	68fb      	ldr	r3, [r7, #12]
 8002846:	212c      	movs	r1, #44	; 0x2c
 8002848:	fb01 f303 	mul.w	r3, r1, r3
 800284c:	4413      	add	r3, r2
 800284e:	335c      	adds	r3, #92	; 0x5c
 8002850:	2200      	movs	r2, #0
 8002852:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002854:	687a      	ldr	r2, [r7, #4]
 8002856:	68fb      	ldr	r3, [r7, #12]
 8002858:	212c      	movs	r1, #44	; 0x2c
 800285a:	fb01 f303 	mul.w	r3, r1, r3
 800285e:	4413      	add	r3, r2
 8002860:	3360      	adds	r3, #96	; 0x60
 8002862:	2204      	movs	r2, #4
 8002864:	701a      	strb	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002866:	e073      	b.n	8002950 <HCD_HC_IN_IRQHandler+0x572>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002868:	687a      	ldr	r2, [r7, #4]
 800286a:	68fb      	ldr	r3, [r7, #12]
 800286c:	212c      	movs	r1, #44	; 0x2c
 800286e:	fb01 f303 	mul.w	r3, r1, r3
 8002872:	4413      	add	r3, r2
 8002874:	3360      	adds	r3, #96	; 0x60
 8002876:	2202      	movs	r2, #2
 8002878:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 800287a:	68fb      	ldr	r3, [r7, #12]
 800287c:	015a      	lsls	r2, r3, #5
 800287e:	693b      	ldr	r3, [r7, #16]
 8002880:	4413      	add	r3, r2
 8002882:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	60bb      	str	r3, [r7, #8]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800288a:	68bb      	ldr	r3, [r7, #8]
 800288c:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002890:	60bb      	str	r3, [r7, #8]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002892:	68bb      	ldr	r3, [r7, #8]
 8002894:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002898:	60bb      	str	r3, [r7, #8]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 800289a:	68fb      	ldr	r3, [r7, #12]
 800289c:	015a      	lsls	r2, r3, #5
 800289e:	693b      	ldr	r3, [r7, #16]
 80028a0:	4413      	add	r3, r2
 80028a2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028a6:	461a      	mov	r2, r3
 80028a8:	68bb      	ldr	r3, [r7, #8]
 80028aa:	6013      	str	r3, [r2, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 80028ac:	e050      	b.n	8002950 <HCD_HC_IN_IRQHandler+0x572>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 80028ae:	687a      	ldr	r2, [r7, #4]
 80028b0:	68fb      	ldr	r3, [r7, #12]
 80028b2:	212c      	movs	r1, #44	; 0x2c
 80028b4:	fb01 f303 	mul.w	r3, r1, r3
 80028b8:	4413      	add	r3, r2
 80028ba:	3361      	adds	r3, #97	; 0x61
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	2b03      	cmp	r3, #3
 80028c0:	d122      	bne.n	8002908 <HCD_HC_IN_IRQHandler+0x52a>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 80028c2:	687a      	ldr	r2, [r7, #4]
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	212c      	movs	r1, #44	; 0x2c
 80028c8:	fb01 f303 	mul.w	r3, r1, r3
 80028cc:	4413      	add	r3, r2
 80028ce:	3360      	adds	r3, #96	; 0x60
 80028d0:	2202      	movs	r2, #2
 80028d2:	701a      	strb	r2, [r3, #0]
      tmpreg = USBx_HC(ch_num)->HCCHAR;
 80028d4:	68fb      	ldr	r3, [r7, #12]
 80028d6:	015a      	lsls	r2, r3, #5
 80028d8:	693b      	ldr	r3, [r7, #16]
 80028da:	4413      	add	r3, r2
 80028dc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80028e0:	681b      	ldr	r3, [r3, #0]
 80028e2:	60bb      	str	r3, [r7, #8]
      tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80028e4:	68bb      	ldr	r3, [r7, #8]
 80028e6:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80028ea:	60bb      	str	r3, [r7, #8]
      tmpreg |= USB_OTG_HCCHAR_CHENA;
 80028ec:	68bb      	ldr	r3, [r7, #8]
 80028ee:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80028f2:	60bb      	str	r3, [r7, #8]
      USBx_HC(ch_num)->HCCHAR = tmpreg;
 80028f4:	68fb      	ldr	r3, [r7, #12]
 80028f6:	015a      	lsls	r2, r3, #5
 80028f8:	693b      	ldr	r3, [r7, #16]
 80028fa:	4413      	add	r3, r2
 80028fc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002900:	461a      	mov	r2, r3
 8002902:	68bb      	ldr	r3, [r7, #8]
 8002904:	6013      	str	r3, [r2, #0]
 8002906:	e023      	b.n	8002950 <HCD_HC_IN_IRQHandler+0x572>
    else if (hhcd->hc[ch_num].state == HC_BBLERR)
 8002908:	687a      	ldr	r2, [r7, #4]
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	212c      	movs	r1, #44	; 0x2c
 800290e:	fb01 f303 	mul.w	r3, r1, r3
 8002912:	4413      	add	r3, r2
 8002914:	3361      	adds	r3, #97	; 0x61
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	2b07      	cmp	r3, #7
 800291a:	d119      	bne.n	8002950 <HCD_HC_IN_IRQHandler+0x572>
      hhcd->hc[ch_num].ErrCnt++;
 800291c:	687a      	ldr	r2, [r7, #4]
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	212c      	movs	r1, #44	; 0x2c
 8002922:	fb01 f303 	mul.w	r3, r1, r3
 8002926:	4413      	add	r3, r2
 8002928:	335c      	adds	r3, #92	; 0x5c
 800292a:	681b      	ldr	r3, [r3, #0]
 800292c:	1c5a      	adds	r2, r3, #1
 800292e:	6879      	ldr	r1, [r7, #4]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	202c      	movs	r0, #44	; 0x2c
 8002934:	fb00 f303 	mul.w	r3, r0, r3
 8002938:	440b      	add	r3, r1
 800293a:	335c      	adds	r3, #92	; 0x5c
 800293c:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_ERROR;
 800293e:	687a      	ldr	r2, [r7, #4]
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	212c      	movs	r1, #44	; 0x2c
 8002944:	fb01 f303 	mul.w	r3, r1, r3
 8002948:	4413      	add	r3, r2
 800294a:	3360      	adds	r3, #96	; 0x60
 800294c:	2204      	movs	r2, #4
 800294e:	701a      	strb	r2, [r3, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8002950:	68fb      	ldr	r3, [r7, #12]
 8002952:	015a      	lsls	r2, r3, #5
 8002954:	693b      	ldr	r3, [r7, #16]
 8002956:	4413      	add	r3, r2
 8002958:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800295c:	461a      	mov	r2, r3
 800295e:	2302      	movs	r3, #2
 8002960:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8002962:	68fb      	ldr	r3, [r7, #12]
 8002964:	b2d9      	uxtb	r1, r3
 8002966:	687a      	ldr	r2, [r7, #4]
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	202c      	movs	r0, #44	; 0x2c
 800296c:	fb00 f303 	mul.w	r3, r0, r3
 8002970:	4413      	add	r3, r2
 8002972:	3360      	adds	r3, #96	; 0x60
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	461a      	mov	r2, r3
 8002978:	6878      	ldr	r0, [r7, #4]
 800297a:	f005 fef7 	bl	800876c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 800297e:	e05d      	b.n	8002a3c <HCD_HC_IN_IRQHandler+0x65e>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002980:	68fb      	ldr	r3, [r7, #12]
 8002982:	015a      	lsls	r2, r3, #5
 8002984:	693b      	ldr	r3, [r7, #16]
 8002986:	4413      	add	r3, r2
 8002988:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800298c:	689b      	ldr	r3, [r3, #8]
 800298e:	f003 0310 	and.w	r3, r3, #16
 8002992:	2b10      	cmp	r3, #16
 8002994:	d152      	bne.n	8002a3c <HCD_HC_IN_IRQHandler+0x65e>
    if (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR)
 8002996:	687a      	ldr	r2, [r7, #4]
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	212c      	movs	r1, #44	; 0x2c
 800299c:	fb01 f303 	mul.w	r3, r1, r3
 80029a0:	4413      	add	r3, r2
 80029a2:	333f      	adds	r3, #63	; 0x3f
 80029a4:	781b      	ldrb	r3, [r3, #0]
 80029a6:	2b03      	cmp	r3, #3
 80029a8:	d111      	bne.n	80029ce <HCD_HC_IN_IRQHandler+0x5f0>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80029aa:	687a      	ldr	r2, [r7, #4]
 80029ac:	68fb      	ldr	r3, [r7, #12]
 80029ae:	212c      	movs	r1, #44	; 0x2c
 80029b0:	fb01 f303 	mul.w	r3, r1, r3
 80029b4:	4413      	add	r3, r2
 80029b6:	335c      	adds	r3, #92	; 0x5c
 80029b8:	2200      	movs	r2, #0
 80029ba:	601a      	str	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	68fa      	ldr	r2, [r7, #12]
 80029c2:	b2d2      	uxtb	r2, r2
 80029c4:	4611      	mov	r1, r2
 80029c6:	4618      	mov	r0, r3
 80029c8:	f004 fbff 	bl	80071ca <USB_HC_Halt>
 80029cc:	e02d      	b.n	8002a2a <HCD_HC_IN_IRQHandler+0x64c>
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80029ce:	687a      	ldr	r2, [r7, #4]
 80029d0:	68fb      	ldr	r3, [r7, #12]
 80029d2:	212c      	movs	r1, #44	; 0x2c
 80029d4:	fb01 f303 	mul.w	r3, r1, r3
 80029d8:	4413      	add	r3, r2
 80029da:	333f      	adds	r3, #63	; 0x3f
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d009      	beq.n	80029f6 <HCD_HC_IN_IRQHandler+0x618>
             (hhcd->hc[ch_num].ep_type == EP_TYPE_BULK))
 80029e2:	687a      	ldr	r2, [r7, #4]
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	212c      	movs	r1, #44	; 0x2c
 80029e8:	fb01 f303 	mul.w	r3, r1, r3
 80029ec:	4413      	add	r3, r2
 80029ee:	333f      	adds	r3, #63	; 0x3f
 80029f0:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].ep_type == EP_TYPE_CTRL) ||
 80029f2:	2b02      	cmp	r3, #2
 80029f4:	d119      	bne.n	8002a2a <HCD_HC_IN_IRQHandler+0x64c>
      hhcd->hc[ch_num].ErrCnt = 0U;
 80029f6:	687a      	ldr	r2, [r7, #4]
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	212c      	movs	r1, #44	; 0x2c
 80029fc:	fb01 f303 	mul.w	r3, r1, r3
 8002a00:	4413      	add	r3, r2
 8002a02:	335c      	adds	r3, #92	; 0x5c
 8002a04:	2200      	movs	r2, #0
 8002a06:	601a      	str	r2, [r3, #0]
      hhcd->hc[ch_num].state = HC_NAK;
 8002a08:	687a      	ldr	r2, [r7, #4]
 8002a0a:	68fb      	ldr	r3, [r7, #12]
 8002a0c:	212c      	movs	r1, #44	; 0x2c
 8002a0e:	fb01 f303 	mul.w	r3, r1, r3
 8002a12:	4413      	add	r3, r2
 8002a14:	3361      	adds	r3, #97	; 0x61
 8002a16:	2203      	movs	r2, #3
 8002a18:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a1a:	687b      	ldr	r3, [r7, #4]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	68fa      	ldr	r2, [r7, #12]
 8002a20:	b2d2      	uxtb	r2, r2
 8002a22:	4611      	mov	r1, r2
 8002a24:	4618      	mov	r0, r3
 8002a26:	f004 fbd0 	bl	80071ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002a2a:	68fb      	ldr	r3, [r7, #12]
 8002a2c:	015a      	lsls	r2, r3, #5
 8002a2e:	693b      	ldr	r3, [r7, #16]
 8002a30:	4413      	add	r3, r2
 8002a32:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a36:	461a      	mov	r2, r3
 8002a38:	2310      	movs	r3, #16
 8002a3a:	6093      	str	r3, [r2, #8]
}
 8002a3c:	bf00      	nop
 8002a3e:	3718      	adds	r7, #24
 8002a40:	46bd      	mov	sp, r7
 8002a42:	bd80      	pop	{r7, pc}

08002a44 <HCD_HC_OUT_IRQHandler>:
  * @param  chnum Channel number.
  *         This parameter can be a value from 1 to 15
  * @retval none
  */
static void HCD_HC_OUT_IRQHandler(HCD_HandleTypeDef *hhcd, uint8_t chnum)
{
 8002a44:	b580      	push	{r7, lr}
 8002a46:	b088      	sub	sp, #32
 8002a48:	af00      	add	r7, sp, #0
 8002a4a:	6078      	str	r0, [r7, #4]
 8002a4c:	460b      	mov	r3, r1
 8002a4e:	70fb      	strb	r3, [r7, #3]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	61fb      	str	r3, [r7, #28]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8002a56:	69fb      	ldr	r3, [r7, #28]
 8002a58:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)chnum;
 8002a5a:	78fb      	ldrb	r3, [r7, #3]
 8002a5c:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg;
  uint32_t num_packets;

  if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_AHBERR) == USB_OTG_HCINT_AHBERR)
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	015a      	lsls	r2, r3, #5
 8002a62:	69bb      	ldr	r3, [r7, #24]
 8002a64:	4413      	add	r3, r2
 8002a66:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a6a:	689b      	ldr	r3, [r3, #8]
 8002a6c:	f003 0304 	and.w	r3, r3, #4
 8002a70:	2b04      	cmp	r3, #4
 8002a72:	d11a      	bne.n	8002aaa <HCD_HC_OUT_IRQHandler+0x66>
  {
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_AHBERR);
 8002a74:	697b      	ldr	r3, [r7, #20]
 8002a76:	015a      	lsls	r2, r3, #5
 8002a78:	69bb      	ldr	r3, [r7, #24]
 8002a7a:	4413      	add	r3, r2
 8002a7c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002a80:	461a      	mov	r2, r3
 8002a82:	2304      	movs	r3, #4
 8002a84:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002a86:	687a      	ldr	r2, [r7, #4]
 8002a88:	697b      	ldr	r3, [r7, #20]
 8002a8a:	212c      	movs	r1, #44	; 0x2c
 8002a8c:	fb01 f303 	mul.w	r3, r1, r3
 8002a90:	4413      	add	r3, r2
 8002a92:	3361      	adds	r3, #97	; 0x61
 8002a94:	2206      	movs	r2, #6
 8002a96:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	681b      	ldr	r3, [r3, #0]
 8002a9c:	697a      	ldr	r2, [r7, #20]
 8002a9e:	b2d2      	uxtb	r2, r2
 8002aa0:	4611      	mov	r1, r2
 8002aa2:	4618      	mov	r0, r3
 8002aa4:	f004 fb91 	bl	80071ca <USB_HC_Halt>
  }
  else
  {
    /* ... */
  }
}
 8002aa8:	e2ca      	b.n	8003040 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_ACK) == USB_OTG_HCINT_ACK)
 8002aaa:	697b      	ldr	r3, [r7, #20]
 8002aac:	015a      	lsls	r2, r3, #5
 8002aae:	69bb      	ldr	r3, [r7, #24]
 8002ab0:	4413      	add	r3, r2
 8002ab2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002ab6:	689b      	ldr	r3, [r3, #8]
 8002ab8:	f003 0320 	and.w	r3, r3, #32
 8002abc:	2b20      	cmp	r3, #32
 8002abe:	d12e      	bne.n	8002b1e <HCD_HC_OUT_IRQHandler+0xda>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_ACK);
 8002ac0:	697b      	ldr	r3, [r7, #20]
 8002ac2:	015a      	lsls	r2, r3, #5
 8002ac4:	69bb      	ldr	r3, [r7, #24]
 8002ac6:	4413      	add	r3, r2
 8002ac8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002acc:	461a      	mov	r2, r3
 8002ace:	2320      	movs	r3, #32
 8002ad0:	6093      	str	r3, [r2, #8]
    if (hhcd->hc[ch_num].do_ping == 1U)
 8002ad2:	687a      	ldr	r2, [r7, #4]
 8002ad4:	697b      	ldr	r3, [r7, #20]
 8002ad6:	212c      	movs	r1, #44	; 0x2c
 8002ad8:	fb01 f303 	mul.w	r3, r1, r3
 8002adc:	4413      	add	r3, r2
 8002ade:	333d      	adds	r3, #61	; 0x3d
 8002ae0:	781b      	ldrb	r3, [r3, #0]
 8002ae2:	2b01      	cmp	r3, #1
 8002ae4:	f040 82ac 	bne.w	8003040 <HCD_HC_OUT_IRQHandler+0x5fc>
      hhcd->hc[ch_num].do_ping = 0U;
 8002ae8:	687a      	ldr	r2, [r7, #4]
 8002aea:	697b      	ldr	r3, [r7, #20]
 8002aec:	212c      	movs	r1, #44	; 0x2c
 8002aee:	fb01 f303 	mul.w	r3, r1, r3
 8002af2:	4413      	add	r3, r2
 8002af4:	333d      	adds	r3, #61	; 0x3d
 8002af6:	2200      	movs	r2, #0
 8002af8:	701a      	strb	r2, [r3, #0]
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002afa:	687a      	ldr	r2, [r7, #4]
 8002afc:	697b      	ldr	r3, [r7, #20]
 8002afe:	212c      	movs	r1, #44	; 0x2c
 8002b00:	fb01 f303 	mul.w	r3, r1, r3
 8002b04:	4413      	add	r3, r2
 8002b06:	3360      	adds	r3, #96	; 0x60
 8002b08:	2202      	movs	r2, #2
 8002b0a:	701a      	strb	r2, [r3, #0]
      (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	697a      	ldr	r2, [r7, #20]
 8002b12:	b2d2      	uxtb	r2, r2
 8002b14:	4611      	mov	r1, r2
 8002b16:	4618      	mov	r0, r3
 8002b18:	f004 fb57 	bl	80071ca <USB_HC_Halt>
}
 8002b1c:	e290      	b.n	8003040 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_FRMOR) == USB_OTG_HCINT_FRMOR)
 8002b1e:	697b      	ldr	r3, [r7, #20]
 8002b20:	015a      	lsls	r2, r3, #5
 8002b22:	69bb      	ldr	r3, [r7, #24]
 8002b24:	4413      	add	r3, r2
 8002b26:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b2a:	689b      	ldr	r3, [r3, #8]
 8002b2c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8002b30:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8002b34:	d112      	bne.n	8002b5c <HCD_HC_OUT_IRQHandler+0x118>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_FRMOR);
 8002b36:	697b      	ldr	r3, [r7, #20]
 8002b38:	015a      	lsls	r2, r3, #5
 8002b3a:	69bb      	ldr	r3, [r7, #24]
 8002b3c:	4413      	add	r3, r2
 8002b3e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b42:	461a      	mov	r2, r3
 8002b44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8002b48:	6093      	str	r3, [r2, #8]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	697a      	ldr	r2, [r7, #20]
 8002b50:	b2d2      	uxtb	r2, r2
 8002b52:	4611      	mov	r1, r2
 8002b54:	4618      	mov	r0, r3
 8002b56:	f004 fb38 	bl	80071ca <USB_HC_Halt>
}
 8002b5a:	e271      	b.n	8003040 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_XFRC) == USB_OTG_HCINT_XFRC)
 8002b5c:	697b      	ldr	r3, [r7, #20]
 8002b5e:	015a      	lsls	r2, r3, #5
 8002b60:	69bb      	ldr	r3, [r7, #24]
 8002b62:	4413      	add	r3, r2
 8002b64:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b68:	689b      	ldr	r3, [r3, #8]
 8002b6a:	f003 0301 	and.w	r3, r3, #1
 8002b6e:	2b01      	cmp	r3, #1
 8002b70:	d140      	bne.n	8002bf4 <HCD_HC_OUT_IRQHandler+0x1b0>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002b72:	687a      	ldr	r2, [r7, #4]
 8002b74:	697b      	ldr	r3, [r7, #20]
 8002b76:	212c      	movs	r1, #44	; 0x2c
 8002b78:	fb01 f303 	mul.w	r3, r1, r3
 8002b7c:	4413      	add	r3, r2
 8002b7e:	335c      	adds	r3, #92	; 0x5c
 8002b80:	2200      	movs	r2, #0
 8002b82:	601a      	str	r2, [r3, #0]
    if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002b84:	697b      	ldr	r3, [r7, #20]
 8002b86:	015a      	lsls	r2, r3, #5
 8002b88:	69bb      	ldr	r3, [r7, #24]
 8002b8a:	4413      	add	r3, r2
 8002b8c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002b90:	689b      	ldr	r3, [r3, #8]
 8002b92:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002b96:	2b40      	cmp	r3, #64	; 0x40
 8002b98:	d111      	bne.n	8002bbe <HCD_HC_OUT_IRQHandler+0x17a>
      hhcd->hc[ch_num].do_ping = 1U;
 8002b9a:	687a      	ldr	r2, [r7, #4]
 8002b9c:	697b      	ldr	r3, [r7, #20]
 8002b9e:	212c      	movs	r1, #44	; 0x2c
 8002ba0:	fb01 f303 	mul.w	r3, r1, r3
 8002ba4:	4413      	add	r3, r2
 8002ba6:	333d      	adds	r3, #61	; 0x3d
 8002ba8:	2201      	movs	r2, #1
 8002baa:	701a      	strb	r2, [r3, #0]
      __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002bac:	697b      	ldr	r3, [r7, #20]
 8002bae:	015a      	lsls	r2, r3, #5
 8002bb0:	69bb      	ldr	r3, [r7, #24]
 8002bb2:	4413      	add	r3, r2
 8002bb4:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bb8:	461a      	mov	r2, r3
 8002bba:	2340      	movs	r3, #64	; 0x40
 8002bbc:	6093      	str	r3, [r2, #8]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_XFRC);
 8002bbe:	697b      	ldr	r3, [r7, #20]
 8002bc0:	015a      	lsls	r2, r3, #5
 8002bc2:	69bb      	ldr	r3, [r7, #24]
 8002bc4:	4413      	add	r3, r2
 8002bc6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002bca:	461a      	mov	r2, r3
 8002bcc:	2301      	movs	r3, #1
 8002bce:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_XFRC;
 8002bd0:	687a      	ldr	r2, [r7, #4]
 8002bd2:	697b      	ldr	r3, [r7, #20]
 8002bd4:	212c      	movs	r1, #44	; 0x2c
 8002bd6:	fb01 f303 	mul.w	r3, r1, r3
 8002bda:	4413      	add	r3, r2
 8002bdc:	3361      	adds	r3, #97	; 0x61
 8002bde:	2201      	movs	r2, #1
 8002be0:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	697a      	ldr	r2, [r7, #20]
 8002be8:	b2d2      	uxtb	r2, r2
 8002bea:	4611      	mov	r1, r2
 8002bec:	4618      	mov	r0, r3
 8002bee:	f004 faec 	bl	80071ca <USB_HC_Halt>
}
 8002bf2:	e225      	b.n	8003040 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NYET) == USB_OTG_HCINT_NYET)
 8002bf4:	697b      	ldr	r3, [r7, #20]
 8002bf6:	015a      	lsls	r2, r3, #5
 8002bf8:	69bb      	ldr	r3, [r7, #24]
 8002bfa:	4413      	add	r3, r2
 8002bfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c00:	689b      	ldr	r3, [r3, #8]
 8002c02:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8002c06:	2b40      	cmp	r3, #64	; 0x40
 8002c08:	d12c      	bne.n	8002c64 <HCD_HC_OUT_IRQHandler+0x220>
    hhcd->hc[ch_num].state = HC_NYET;
 8002c0a:	687a      	ldr	r2, [r7, #4]
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	212c      	movs	r1, #44	; 0x2c
 8002c10:	fb01 f303 	mul.w	r3, r1, r3
 8002c14:	4413      	add	r3, r2
 8002c16:	3361      	adds	r3, #97	; 0x61
 8002c18:	2204      	movs	r2, #4
 8002c1a:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].do_ping = 1U;
 8002c1c:	687a      	ldr	r2, [r7, #4]
 8002c1e:	697b      	ldr	r3, [r7, #20]
 8002c20:	212c      	movs	r1, #44	; 0x2c
 8002c22:	fb01 f303 	mul.w	r3, r1, r3
 8002c26:	4413      	add	r3, r2
 8002c28:	333d      	adds	r3, #61	; 0x3d
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	701a      	strb	r2, [r3, #0]
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002c2e:	687a      	ldr	r2, [r7, #4]
 8002c30:	697b      	ldr	r3, [r7, #20]
 8002c32:	212c      	movs	r1, #44	; 0x2c
 8002c34:	fb01 f303 	mul.w	r3, r1, r3
 8002c38:	4413      	add	r3, r2
 8002c3a:	335c      	adds	r3, #92	; 0x5c
 8002c3c:	2200      	movs	r2, #0
 8002c3e:	601a      	str	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c40:	687b      	ldr	r3, [r7, #4]
 8002c42:	681b      	ldr	r3, [r3, #0]
 8002c44:	697a      	ldr	r2, [r7, #20]
 8002c46:	b2d2      	uxtb	r2, r2
 8002c48:	4611      	mov	r1, r2
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f004 fabd 	bl	80071ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NYET);
 8002c50:	697b      	ldr	r3, [r7, #20]
 8002c52:	015a      	lsls	r2, r3, #5
 8002c54:	69bb      	ldr	r3, [r7, #24]
 8002c56:	4413      	add	r3, r2
 8002c58:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c5c:	461a      	mov	r2, r3
 8002c5e:	2340      	movs	r3, #64	; 0x40
 8002c60:	6093      	str	r3, [r2, #8]
}
 8002c62:	e1ed      	b.n	8003040 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_STALL) == USB_OTG_HCINT_STALL)
 8002c64:	697b      	ldr	r3, [r7, #20]
 8002c66:	015a      	lsls	r2, r3, #5
 8002c68:	69bb      	ldr	r3, [r7, #24]
 8002c6a:	4413      	add	r3, r2
 8002c6c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c70:	689b      	ldr	r3, [r3, #8]
 8002c72:	f003 0308 	and.w	r3, r3, #8
 8002c76:	2b08      	cmp	r3, #8
 8002c78:	d11a      	bne.n	8002cb0 <HCD_HC_OUT_IRQHandler+0x26c>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_STALL);
 8002c7a:	697b      	ldr	r3, [r7, #20]
 8002c7c:	015a      	lsls	r2, r3, #5
 8002c7e:	69bb      	ldr	r3, [r7, #24]
 8002c80:	4413      	add	r3, r2
 8002c82:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002c86:	461a      	mov	r2, r3
 8002c88:	2308      	movs	r3, #8
 8002c8a:	6093      	str	r3, [r2, #8]
    hhcd->hc[ch_num].state = HC_STALL;
 8002c8c:	687a      	ldr	r2, [r7, #4]
 8002c8e:	697b      	ldr	r3, [r7, #20]
 8002c90:	212c      	movs	r1, #44	; 0x2c
 8002c92:	fb01 f303 	mul.w	r3, r1, r3
 8002c96:	4413      	add	r3, r2
 8002c98:	3361      	adds	r3, #97	; 0x61
 8002c9a:	2205      	movs	r2, #5
 8002c9c:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	697a      	ldr	r2, [r7, #20]
 8002ca4:	b2d2      	uxtb	r2, r2
 8002ca6:	4611      	mov	r1, r2
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f004 fa8e 	bl	80071ca <USB_HC_Halt>
}
 8002cae:	e1c7      	b.n	8003040 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_NAK) == USB_OTG_HCINT_NAK)
 8002cb0:	697b      	ldr	r3, [r7, #20]
 8002cb2:	015a      	lsls	r2, r3, #5
 8002cb4:	69bb      	ldr	r3, [r7, #24]
 8002cb6:	4413      	add	r3, r2
 8002cb8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002cbc:	689b      	ldr	r3, [r3, #8]
 8002cbe:	f003 0310 	and.w	r3, r3, #16
 8002cc2:	2b10      	cmp	r3, #16
 8002cc4:	d123      	bne.n	8002d0e <HCD_HC_OUT_IRQHandler+0x2ca>
    hhcd->hc[ch_num].ErrCnt = 0U;
 8002cc6:	687a      	ldr	r2, [r7, #4]
 8002cc8:	697b      	ldr	r3, [r7, #20]
 8002cca:	212c      	movs	r1, #44	; 0x2c
 8002ccc:	fb01 f303 	mul.w	r3, r1, r3
 8002cd0:	4413      	add	r3, r2
 8002cd2:	335c      	adds	r3, #92	; 0x5c
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	601a      	str	r2, [r3, #0]
    hhcd->hc[ch_num].state = HC_NAK;
 8002cd8:	687a      	ldr	r2, [r7, #4]
 8002cda:	697b      	ldr	r3, [r7, #20]
 8002cdc:	212c      	movs	r1, #44	; 0x2c
 8002cde:	fb01 f303 	mul.w	r3, r1, r3
 8002ce2:	4413      	add	r3, r2
 8002ce4:	3361      	adds	r3, #97	; 0x61
 8002ce6:	2203      	movs	r2, #3
 8002ce8:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	681b      	ldr	r3, [r3, #0]
 8002cee:	697a      	ldr	r2, [r7, #20]
 8002cf0:	b2d2      	uxtb	r2, r2
 8002cf2:	4611      	mov	r1, r2
 8002cf4:	4618      	mov	r0, r3
 8002cf6:	f004 fa68 	bl	80071ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_NAK);
 8002cfa:	697b      	ldr	r3, [r7, #20]
 8002cfc:	015a      	lsls	r2, r3, #5
 8002cfe:	69bb      	ldr	r3, [r7, #24]
 8002d00:	4413      	add	r3, r2
 8002d02:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d06:	461a      	mov	r2, r3
 8002d08:	2310      	movs	r3, #16
 8002d0a:	6093      	str	r3, [r2, #8]
}
 8002d0c:	e198      	b.n	8003040 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_TXERR) == USB_OTG_HCINT_TXERR)
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	015a      	lsls	r2, r3, #5
 8002d12:	69bb      	ldr	r3, [r7, #24]
 8002d14:	4413      	add	r3, r2
 8002d16:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d1a:	689b      	ldr	r3, [r3, #8]
 8002d1c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002d20:	2b80      	cmp	r3, #128	; 0x80
 8002d22:	d11a      	bne.n	8002d5a <HCD_HC_OUT_IRQHandler+0x316>
    hhcd->hc[ch_num].state = HC_XACTERR;
 8002d24:	687a      	ldr	r2, [r7, #4]
 8002d26:	697b      	ldr	r3, [r7, #20]
 8002d28:	212c      	movs	r1, #44	; 0x2c
 8002d2a:	fb01 f303 	mul.w	r3, r1, r3
 8002d2e:	4413      	add	r3, r2
 8002d30:	3361      	adds	r3, #97	; 0x61
 8002d32:	2206      	movs	r2, #6
 8002d34:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d36:	687b      	ldr	r3, [r7, #4]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	697a      	ldr	r2, [r7, #20]
 8002d3c:	b2d2      	uxtb	r2, r2
 8002d3e:	4611      	mov	r1, r2
 8002d40:	4618      	mov	r0, r3
 8002d42:	f004 fa42 	bl	80071ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_TXERR);
 8002d46:	697b      	ldr	r3, [r7, #20]
 8002d48:	015a      	lsls	r2, r3, #5
 8002d4a:	69bb      	ldr	r3, [r7, #24]
 8002d4c:	4413      	add	r3, r2
 8002d4e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d52:	461a      	mov	r2, r3
 8002d54:	2380      	movs	r3, #128	; 0x80
 8002d56:	6093      	str	r3, [r2, #8]
}
 8002d58:	e172      	b.n	8003040 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_DTERR) == USB_OTG_HCINT_DTERR)
 8002d5a:	697b      	ldr	r3, [r7, #20]
 8002d5c:	015a      	lsls	r2, r3, #5
 8002d5e:	69bb      	ldr	r3, [r7, #24]
 8002d60:	4413      	add	r3, r2
 8002d62:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002d66:	689b      	ldr	r3, [r3, #8]
 8002d68:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002d6c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002d70:	d11b      	bne.n	8002daa <HCD_HC_OUT_IRQHandler+0x366>
    hhcd->hc[ch_num].state = HC_DATATGLERR;
 8002d72:	687a      	ldr	r2, [r7, #4]
 8002d74:	697b      	ldr	r3, [r7, #20]
 8002d76:	212c      	movs	r1, #44	; 0x2c
 8002d78:	fb01 f303 	mul.w	r3, r1, r3
 8002d7c:	4413      	add	r3, r2
 8002d7e:	3361      	adds	r3, #97	; 0x61
 8002d80:	2208      	movs	r2, #8
 8002d82:	701a      	strb	r2, [r3, #0]
    (void)USB_HC_Halt(hhcd->Instance, (uint8_t)ch_num);
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	697a      	ldr	r2, [r7, #20]
 8002d8a:	b2d2      	uxtb	r2, r2
 8002d8c:	4611      	mov	r1, r2
 8002d8e:	4618      	mov	r0, r3
 8002d90:	f004 fa1b 	bl	80071ca <USB_HC_Halt>
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_DTERR);
 8002d94:	697b      	ldr	r3, [r7, #20]
 8002d96:	015a      	lsls	r2, r3, #5
 8002d98:	69bb      	ldr	r3, [r7, #24]
 8002d9a:	4413      	add	r3, r2
 8002d9c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002da0:	461a      	mov	r2, r3
 8002da2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002da6:	6093      	str	r3, [r2, #8]
}
 8002da8:	e14a      	b.n	8003040 <HCD_HC_OUT_IRQHandler+0x5fc>
  else if ((USBx_HC(ch_num)->HCINT & USB_OTG_HCINT_CHH) == USB_OTG_HCINT_CHH)
 8002daa:	697b      	ldr	r3, [r7, #20]
 8002dac:	015a      	lsls	r2, r3, #5
 8002dae:	69bb      	ldr	r3, [r7, #24]
 8002db0:	4413      	add	r3, r2
 8002db2:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002db6:	689b      	ldr	r3, [r3, #8]
 8002db8:	f003 0302 	and.w	r3, r3, #2
 8002dbc:	2b02      	cmp	r3, #2
 8002dbe:	f040 813f 	bne.w	8003040 <HCD_HC_OUT_IRQHandler+0x5fc>
    if (hhcd->hc[ch_num].state == HC_XFRC)
 8002dc2:	687a      	ldr	r2, [r7, #4]
 8002dc4:	697b      	ldr	r3, [r7, #20]
 8002dc6:	212c      	movs	r1, #44	; 0x2c
 8002dc8:	fb01 f303 	mul.w	r3, r1, r3
 8002dcc:	4413      	add	r3, r2
 8002dce:	3361      	adds	r3, #97	; 0x61
 8002dd0:	781b      	ldrb	r3, [r3, #0]
 8002dd2:	2b01      	cmp	r3, #1
 8002dd4:	d17d      	bne.n	8002ed2 <HCD_HC_OUT_IRQHandler+0x48e>
      hhcd->hc[ch_num].urb_state  = URB_DONE;
 8002dd6:	687a      	ldr	r2, [r7, #4]
 8002dd8:	697b      	ldr	r3, [r7, #20]
 8002dda:	212c      	movs	r1, #44	; 0x2c
 8002ddc:	fb01 f303 	mul.w	r3, r1, r3
 8002de0:	4413      	add	r3, r2
 8002de2:	3360      	adds	r3, #96	; 0x60
 8002de4:	2201      	movs	r2, #1
 8002de6:	701a      	strb	r2, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002de8:	687a      	ldr	r2, [r7, #4]
 8002dea:	697b      	ldr	r3, [r7, #20]
 8002dec:	212c      	movs	r1, #44	; 0x2c
 8002dee:	fb01 f303 	mul.w	r3, r1, r3
 8002df2:	4413      	add	r3, r2
 8002df4:	333f      	adds	r3, #63	; 0x3f
 8002df6:	781b      	ldrb	r3, [r3, #0]
 8002df8:	2b02      	cmp	r3, #2
 8002dfa:	d00a      	beq.n	8002e12 <HCD_HC_OUT_IRQHandler+0x3ce>
          (hhcd->hc[ch_num].ep_type == EP_TYPE_INTR))
 8002dfc:	687a      	ldr	r2, [r7, #4]
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	212c      	movs	r1, #44	; 0x2c
 8002e02:	fb01 f303 	mul.w	r3, r1, r3
 8002e06:	4413      	add	r3, r2
 8002e08:	333f      	adds	r3, #63	; 0x3f
 8002e0a:	781b      	ldrb	r3, [r3, #0]
      if ((hhcd->hc[ch_num].ep_type == EP_TYPE_BULK) ||
 8002e0c:	2b03      	cmp	r3, #3
 8002e0e:	f040 8100 	bne.w	8003012 <HCD_HC_OUT_IRQHandler+0x5ce>
        if (hhcd->Init.dma_enable == 0U)
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	691b      	ldr	r3, [r3, #16]
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d113      	bne.n	8002e42 <HCD_HC_OUT_IRQHandler+0x3fe>
          hhcd->hc[ch_num].toggle_out ^= 1U;
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	697b      	ldr	r3, [r7, #20]
 8002e1e:	212c      	movs	r1, #44	; 0x2c
 8002e20:	fb01 f303 	mul.w	r3, r1, r3
 8002e24:	4413      	add	r3, r2
 8002e26:	3355      	adds	r3, #85	; 0x55
 8002e28:	781b      	ldrb	r3, [r3, #0]
 8002e2a:	f083 0301 	eor.w	r3, r3, #1
 8002e2e:	b2d8      	uxtb	r0, r3
 8002e30:	687a      	ldr	r2, [r7, #4]
 8002e32:	697b      	ldr	r3, [r7, #20]
 8002e34:	212c      	movs	r1, #44	; 0x2c
 8002e36:	fb01 f303 	mul.w	r3, r1, r3
 8002e3a:	4413      	add	r3, r2
 8002e3c:	3355      	adds	r3, #85	; 0x55
 8002e3e:	4602      	mov	r2, r0
 8002e40:	701a      	strb	r2, [r3, #0]
        if ((hhcd->Init.dma_enable == 1U) && (hhcd->hc[ch_num].xfer_len > 0U))
 8002e42:	687b      	ldr	r3, [r7, #4]
 8002e44:	691b      	ldr	r3, [r3, #16]
 8002e46:	2b01      	cmp	r3, #1
 8002e48:	f040 80e3 	bne.w	8003012 <HCD_HC_OUT_IRQHandler+0x5ce>
 8002e4c:	687a      	ldr	r2, [r7, #4]
 8002e4e:	697b      	ldr	r3, [r7, #20]
 8002e50:	212c      	movs	r1, #44	; 0x2c
 8002e52:	fb01 f303 	mul.w	r3, r1, r3
 8002e56:	4413      	add	r3, r2
 8002e58:	334c      	adds	r3, #76	; 0x4c
 8002e5a:	681b      	ldr	r3, [r3, #0]
 8002e5c:	2b00      	cmp	r3, #0
 8002e5e:	f000 80d8 	beq.w	8003012 <HCD_HC_OUT_IRQHandler+0x5ce>
          num_packets = (hhcd->hc[ch_num].xfer_len + hhcd->hc[ch_num].max_packet - 1U) / hhcd->hc[ch_num].max_packet;
 8002e62:	687a      	ldr	r2, [r7, #4]
 8002e64:	697b      	ldr	r3, [r7, #20]
 8002e66:	212c      	movs	r1, #44	; 0x2c
 8002e68:	fb01 f303 	mul.w	r3, r1, r3
 8002e6c:	4413      	add	r3, r2
 8002e6e:	334c      	adds	r3, #76	; 0x4c
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	6879      	ldr	r1, [r7, #4]
 8002e74:	697a      	ldr	r2, [r7, #20]
 8002e76:	202c      	movs	r0, #44	; 0x2c
 8002e78:	fb00 f202 	mul.w	r2, r0, r2
 8002e7c:	440a      	add	r2, r1
 8002e7e:	3240      	adds	r2, #64	; 0x40
 8002e80:	8812      	ldrh	r2, [r2, #0]
 8002e82:	4413      	add	r3, r2
 8002e84:	3b01      	subs	r3, #1
 8002e86:	6879      	ldr	r1, [r7, #4]
 8002e88:	697a      	ldr	r2, [r7, #20]
 8002e8a:	202c      	movs	r0, #44	; 0x2c
 8002e8c:	fb00 f202 	mul.w	r2, r0, r2
 8002e90:	440a      	add	r2, r1
 8002e92:	3240      	adds	r2, #64	; 0x40
 8002e94:	8812      	ldrh	r2, [r2, #0]
 8002e96:	fbb3 f3f2 	udiv	r3, r3, r2
 8002e9a:	60fb      	str	r3, [r7, #12]
          if ((num_packets & 1U) != 0U)
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	f003 0301 	and.w	r3, r3, #1
 8002ea2:	2b00      	cmp	r3, #0
 8002ea4:	f000 80b5 	beq.w	8003012 <HCD_HC_OUT_IRQHandler+0x5ce>
            hhcd->hc[ch_num].toggle_out ^= 1U;
 8002ea8:	687a      	ldr	r2, [r7, #4]
 8002eaa:	697b      	ldr	r3, [r7, #20]
 8002eac:	212c      	movs	r1, #44	; 0x2c
 8002eae:	fb01 f303 	mul.w	r3, r1, r3
 8002eb2:	4413      	add	r3, r2
 8002eb4:	3355      	adds	r3, #85	; 0x55
 8002eb6:	781b      	ldrb	r3, [r3, #0]
 8002eb8:	f083 0301 	eor.w	r3, r3, #1
 8002ebc:	b2d8      	uxtb	r0, r3
 8002ebe:	687a      	ldr	r2, [r7, #4]
 8002ec0:	697b      	ldr	r3, [r7, #20]
 8002ec2:	212c      	movs	r1, #44	; 0x2c
 8002ec4:	fb01 f303 	mul.w	r3, r1, r3
 8002ec8:	4413      	add	r3, r2
 8002eca:	3355      	adds	r3, #85	; 0x55
 8002ecc:	4602      	mov	r2, r0
 8002ece:	701a      	strb	r2, [r3, #0]
 8002ed0:	e09f      	b.n	8003012 <HCD_HC_OUT_IRQHandler+0x5ce>
    else if (hhcd->hc[ch_num].state == HC_NAK)
 8002ed2:	687a      	ldr	r2, [r7, #4]
 8002ed4:	697b      	ldr	r3, [r7, #20]
 8002ed6:	212c      	movs	r1, #44	; 0x2c
 8002ed8:	fb01 f303 	mul.w	r3, r1, r3
 8002edc:	4413      	add	r3, r2
 8002ede:	3361      	adds	r3, #97	; 0x61
 8002ee0:	781b      	ldrb	r3, [r3, #0]
 8002ee2:	2b03      	cmp	r3, #3
 8002ee4:	d109      	bne.n	8002efa <HCD_HC_OUT_IRQHandler+0x4b6>
      hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002ee6:	687a      	ldr	r2, [r7, #4]
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	212c      	movs	r1, #44	; 0x2c
 8002eec:	fb01 f303 	mul.w	r3, r1, r3
 8002ef0:	4413      	add	r3, r2
 8002ef2:	3360      	adds	r3, #96	; 0x60
 8002ef4:	2202      	movs	r2, #2
 8002ef6:	701a      	strb	r2, [r3, #0]
 8002ef8:	e08b      	b.n	8003012 <HCD_HC_OUT_IRQHandler+0x5ce>
    else if (hhcd->hc[ch_num].state == HC_NYET)
 8002efa:	687a      	ldr	r2, [r7, #4]
 8002efc:	697b      	ldr	r3, [r7, #20]
 8002efe:	212c      	movs	r1, #44	; 0x2c
 8002f00:	fb01 f303 	mul.w	r3, r1, r3
 8002f04:	4413      	add	r3, r2
 8002f06:	3361      	adds	r3, #97	; 0x61
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	2b04      	cmp	r3, #4
 8002f0c:	d109      	bne.n	8002f22 <HCD_HC_OUT_IRQHandler+0x4de>
      hhcd->hc[ch_num].urb_state  = URB_NOTREADY;
 8002f0e:	687a      	ldr	r2, [r7, #4]
 8002f10:	697b      	ldr	r3, [r7, #20]
 8002f12:	212c      	movs	r1, #44	; 0x2c
 8002f14:	fb01 f303 	mul.w	r3, r1, r3
 8002f18:	4413      	add	r3, r2
 8002f1a:	3360      	adds	r3, #96	; 0x60
 8002f1c:	2202      	movs	r2, #2
 8002f1e:	701a      	strb	r2, [r3, #0]
 8002f20:	e077      	b.n	8003012 <HCD_HC_OUT_IRQHandler+0x5ce>
    else if (hhcd->hc[ch_num].state == HC_STALL)
 8002f22:	687a      	ldr	r2, [r7, #4]
 8002f24:	697b      	ldr	r3, [r7, #20]
 8002f26:	212c      	movs	r1, #44	; 0x2c
 8002f28:	fb01 f303 	mul.w	r3, r1, r3
 8002f2c:	4413      	add	r3, r2
 8002f2e:	3361      	adds	r3, #97	; 0x61
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	2b05      	cmp	r3, #5
 8002f34:	d109      	bne.n	8002f4a <HCD_HC_OUT_IRQHandler+0x506>
      hhcd->hc[ch_num].urb_state  = URB_STALL;
 8002f36:	687a      	ldr	r2, [r7, #4]
 8002f38:	697b      	ldr	r3, [r7, #20]
 8002f3a:	212c      	movs	r1, #44	; 0x2c
 8002f3c:	fb01 f303 	mul.w	r3, r1, r3
 8002f40:	4413      	add	r3, r2
 8002f42:	3360      	adds	r3, #96	; 0x60
 8002f44:	2205      	movs	r2, #5
 8002f46:	701a      	strb	r2, [r3, #0]
 8002f48:	e063      	b.n	8003012 <HCD_HC_OUT_IRQHandler+0x5ce>
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002f4a:	687a      	ldr	r2, [r7, #4]
 8002f4c:	697b      	ldr	r3, [r7, #20]
 8002f4e:	212c      	movs	r1, #44	; 0x2c
 8002f50:	fb01 f303 	mul.w	r3, r1, r3
 8002f54:	4413      	add	r3, r2
 8002f56:	3361      	adds	r3, #97	; 0x61
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	2b06      	cmp	r3, #6
 8002f5c:	d009      	beq.n	8002f72 <HCD_HC_OUT_IRQHandler+0x52e>
             (hhcd->hc[ch_num].state == HC_DATATGLERR))
 8002f5e:	687a      	ldr	r2, [r7, #4]
 8002f60:	697b      	ldr	r3, [r7, #20]
 8002f62:	212c      	movs	r1, #44	; 0x2c
 8002f64:	fb01 f303 	mul.w	r3, r1, r3
 8002f68:	4413      	add	r3, r2
 8002f6a:	3361      	adds	r3, #97	; 0x61
 8002f6c:	781b      	ldrb	r3, [r3, #0]
    else if ((hhcd->hc[ch_num].state == HC_XACTERR) ||
 8002f6e:	2b08      	cmp	r3, #8
 8002f70:	d14f      	bne.n	8003012 <HCD_HC_OUT_IRQHandler+0x5ce>
      hhcd->hc[ch_num].ErrCnt++;
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	697b      	ldr	r3, [r7, #20]
 8002f76:	212c      	movs	r1, #44	; 0x2c
 8002f78:	fb01 f303 	mul.w	r3, r1, r3
 8002f7c:	4413      	add	r3, r2
 8002f7e:	335c      	adds	r3, #92	; 0x5c
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	1c5a      	adds	r2, r3, #1
 8002f84:	6879      	ldr	r1, [r7, #4]
 8002f86:	697b      	ldr	r3, [r7, #20]
 8002f88:	202c      	movs	r0, #44	; 0x2c
 8002f8a:	fb00 f303 	mul.w	r3, r0, r3
 8002f8e:	440b      	add	r3, r1
 8002f90:	335c      	adds	r3, #92	; 0x5c
 8002f92:	601a      	str	r2, [r3, #0]
      if (hhcd->hc[ch_num].ErrCnt > 2U)
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	697b      	ldr	r3, [r7, #20]
 8002f98:	212c      	movs	r1, #44	; 0x2c
 8002f9a:	fb01 f303 	mul.w	r3, r1, r3
 8002f9e:	4413      	add	r3, r2
 8002fa0:	335c      	adds	r3, #92	; 0x5c
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	2b02      	cmp	r3, #2
 8002fa6:	d912      	bls.n	8002fce <HCD_HC_OUT_IRQHandler+0x58a>
        hhcd->hc[ch_num].ErrCnt = 0U;
 8002fa8:	687a      	ldr	r2, [r7, #4]
 8002faa:	697b      	ldr	r3, [r7, #20]
 8002fac:	212c      	movs	r1, #44	; 0x2c
 8002fae:	fb01 f303 	mul.w	r3, r1, r3
 8002fb2:	4413      	add	r3, r2
 8002fb4:	335c      	adds	r3, #92	; 0x5c
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	601a      	str	r2, [r3, #0]
        hhcd->hc[ch_num].urb_state = URB_ERROR;
 8002fba:	687a      	ldr	r2, [r7, #4]
 8002fbc:	697b      	ldr	r3, [r7, #20]
 8002fbe:	212c      	movs	r1, #44	; 0x2c
 8002fc0:	fb01 f303 	mul.w	r3, r1, r3
 8002fc4:	4413      	add	r3, r2
 8002fc6:	3360      	adds	r3, #96	; 0x60
 8002fc8:	2204      	movs	r2, #4
 8002fca:	701a      	strb	r2, [r3, #0]
 8002fcc:	e021      	b.n	8003012 <HCD_HC_OUT_IRQHandler+0x5ce>
        hhcd->hc[ch_num].urb_state = URB_NOTREADY;
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	697b      	ldr	r3, [r7, #20]
 8002fd2:	212c      	movs	r1, #44	; 0x2c
 8002fd4:	fb01 f303 	mul.w	r3, r1, r3
 8002fd8:	4413      	add	r3, r2
 8002fda:	3360      	adds	r3, #96	; 0x60
 8002fdc:	2202      	movs	r2, #2
 8002fde:	701a      	strb	r2, [r3, #0]
        tmpreg = USBx_HC(ch_num)->HCCHAR;
 8002fe0:	697b      	ldr	r3, [r7, #20]
 8002fe2:	015a      	lsls	r2, r3, #5
 8002fe4:	69bb      	ldr	r3, [r7, #24]
 8002fe6:	4413      	add	r3, r2
 8002fe8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8002fec:	681b      	ldr	r3, [r3, #0]
 8002fee:	613b      	str	r3, [r7, #16]
        tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8002ff6:	613b      	str	r3, [r7, #16]
        tmpreg |= USB_OTG_HCCHAR_CHENA;
 8002ff8:	693b      	ldr	r3, [r7, #16]
 8002ffa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002ffe:	613b      	str	r3, [r7, #16]
        USBx_HC(ch_num)->HCCHAR = tmpreg;
 8003000:	697b      	ldr	r3, [r7, #20]
 8003002:	015a      	lsls	r2, r3, #5
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	4413      	add	r3, r2
 8003008:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800300c:	461a      	mov	r2, r3
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	6013      	str	r3, [r2, #0]
    __HAL_HCD_CLEAR_HC_INT(ch_num, USB_OTG_HCINT_CHH);
 8003012:	697b      	ldr	r3, [r7, #20]
 8003014:	015a      	lsls	r2, r3, #5
 8003016:	69bb      	ldr	r3, [r7, #24]
 8003018:	4413      	add	r3, r2
 800301a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800301e:	461a      	mov	r2, r3
 8003020:	2302      	movs	r3, #2
 8003022:	6093      	str	r3, [r2, #8]
    HAL_HCD_HC_NotifyURBChange_Callback(hhcd, (uint8_t)ch_num, hhcd->hc[ch_num].urb_state);
 8003024:	697b      	ldr	r3, [r7, #20]
 8003026:	b2d9      	uxtb	r1, r3
 8003028:	687a      	ldr	r2, [r7, #4]
 800302a:	697b      	ldr	r3, [r7, #20]
 800302c:	202c      	movs	r0, #44	; 0x2c
 800302e:	fb00 f303 	mul.w	r3, r0, r3
 8003032:	4413      	add	r3, r2
 8003034:	3360      	adds	r3, #96	; 0x60
 8003036:	781b      	ldrb	r3, [r3, #0]
 8003038:	461a      	mov	r2, r3
 800303a:	6878      	ldr	r0, [r7, #4]
 800303c:	f005 fb96 	bl	800876c <HAL_HCD_HC_NotifyURBChange_Callback>
}
 8003040:	bf00      	nop
 8003042:	3720      	adds	r7, #32
 8003044:	46bd      	mov	sp, r7
 8003046:	bd80      	pop	{r7, pc}

08003048 <HCD_RXQLVL_IRQHandler>:
  * @brief  Handle Rx Queue Level interrupt requests.
  * @param  hhcd HCD handle
  * @retval none
  */
static void HCD_RXQLVL_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 8003048:	b580      	push	{r7, lr}
 800304a:	b08a      	sub	sp, #40	; 0x28
 800304c:	af00      	add	r7, sp, #0
 800304e:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	681b      	ldr	r3, [r3, #0]
 8003054:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t USBx_BASE = (uint32_t)USBx;
 8003056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003058:	623b      	str	r3, [r7, #32]
  uint32_t GrxstspReg;
  uint32_t xferSizePktCnt;
  uint32_t tmpreg;
  uint32_t ch_num;

  GrxstspReg = hhcd->Instance->GRXSTSP;
 800305a:	687b      	ldr	r3, [r7, #4]
 800305c:	681b      	ldr	r3, [r3, #0]
 800305e:	6a1b      	ldr	r3, [r3, #32]
 8003060:	61fb      	str	r3, [r7, #28]
  ch_num = GrxstspReg & USB_OTG_GRXSTSP_EPNUM;
 8003062:	69fb      	ldr	r3, [r7, #28]
 8003064:	f003 030f 	and.w	r3, r3, #15
 8003068:	61bb      	str	r3, [r7, #24]
  pktsts = (GrxstspReg & USB_OTG_GRXSTSP_PKTSTS) >> 17;
 800306a:	69fb      	ldr	r3, [r7, #28]
 800306c:	0c5b      	lsrs	r3, r3, #17
 800306e:	f003 030f 	and.w	r3, r3, #15
 8003072:	617b      	str	r3, [r7, #20]
  pktcnt = (GrxstspReg & USB_OTG_GRXSTSP_BCNT) >> 4;
 8003074:	69fb      	ldr	r3, [r7, #28]
 8003076:	091b      	lsrs	r3, r3, #4
 8003078:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800307c:	613b      	str	r3, [r7, #16]

  switch (pktsts)
 800307e:	697b      	ldr	r3, [r7, #20]
 8003080:	2b02      	cmp	r3, #2
 8003082:	d004      	beq.n	800308e <HCD_RXQLVL_IRQHandler+0x46>
 8003084:	697b      	ldr	r3, [r7, #20]
 8003086:	2b05      	cmp	r3, #5
 8003088:	f000 80a9 	beq.w	80031de <HCD_RXQLVL_IRQHandler+0x196>
      break;

    case GRXSTS_PKTSTS_IN_XFER_COMP:
    case GRXSTS_PKTSTS_CH_HALTED:
    default:
      break;
 800308c:	e0aa      	b.n	80031e4 <HCD_RXQLVL_IRQHandler+0x19c>
      if ((pktcnt > 0U) && (hhcd->hc[ch_num].xfer_buff != (void *)0))
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	2b00      	cmp	r3, #0
 8003092:	f000 80a6 	beq.w	80031e2 <HCD_RXQLVL_IRQHandler+0x19a>
 8003096:	687a      	ldr	r2, [r7, #4]
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	212c      	movs	r1, #44	; 0x2c
 800309c:	fb01 f303 	mul.w	r3, r1, r3
 80030a0:	4413      	add	r3, r2
 80030a2:	3344      	adds	r3, #68	; 0x44
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	2b00      	cmp	r3, #0
 80030a8:	f000 809b 	beq.w	80031e2 <HCD_RXQLVL_IRQHandler+0x19a>
        if ((hhcd->hc[ch_num].xfer_count + pktcnt) <= hhcd->hc[ch_num].xfer_len)
 80030ac:	687a      	ldr	r2, [r7, #4]
 80030ae:	69bb      	ldr	r3, [r7, #24]
 80030b0:	212c      	movs	r1, #44	; 0x2c
 80030b2:	fb01 f303 	mul.w	r3, r1, r3
 80030b6:	4413      	add	r3, r2
 80030b8:	3350      	adds	r3, #80	; 0x50
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	693b      	ldr	r3, [r7, #16]
 80030be:	441a      	add	r2, r3
 80030c0:	6879      	ldr	r1, [r7, #4]
 80030c2:	69bb      	ldr	r3, [r7, #24]
 80030c4:	202c      	movs	r0, #44	; 0x2c
 80030c6:	fb00 f303 	mul.w	r3, r0, r3
 80030ca:	440b      	add	r3, r1
 80030cc:	334c      	adds	r3, #76	; 0x4c
 80030ce:	681b      	ldr	r3, [r3, #0]
 80030d0:	429a      	cmp	r2, r3
 80030d2:	d87a      	bhi.n	80031ca <HCD_RXQLVL_IRQHandler+0x182>
          (void)USB_ReadPacket(hhcd->Instance,
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	6818      	ldr	r0, [r3, #0]
 80030d8:	687a      	ldr	r2, [r7, #4]
 80030da:	69bb      	ldr	r3, [r7, #24]
 80030dc:	212c      	movs	r1, #44	; 0x2c
 80030de:	fb01 f303 	mul.w	r3, r1, r3
 80030e2:	4413      	add	r3, r2
 80030e4:	3344      	adds	r3, #68	; 0x44
 80030e6:	681b      	ldr	r3, [r3, #0]
 80030e8:	693a      	ldr	r2, [r7, #16]
 80030ea:	b292      	uxth	r2, r2
 80030ec:	4619      	mov	r1, r3
 80030ee:	f003 fc8b 	bl	8006a08 <USB_ReadPacket>
          hhcd->hc[ch_num].xfer_buff += pktcnt;
 80030f2:	687a      	ldr	r2, [r7, #4]
 80030f4:	69bb      	ldr	r3, [r7, #24]
 80030f6:	212c      	movs	r1, #44	; 0x2c
 80030f8:	fb01 f303 	mul.w	r3, r1, r3
 80030fc:	4413      	add	r3, r2
 80030fe:	3344      	adds	r3, #68	; 0x44
 8003100:	681a      	ldr	r2, [r3, #0]
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	441a      	add	r2, r3
 8003106:	6879      	ldr	r1, [r7, #4]
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	202c      	movs	r0, #44	; 0x2c
 800310c:	fb00 f303 	mul.w	r3, r0, r3
 8003110:	440b      	add	r3, r1
 8003112:	3344      	adds	r3, #68	; 0x44
 8003114:	601a      	str	r2, [r3, #0]
          hhcd->hc[ch_num].xfer_count += pktcnt;
 8003116:	687a      	ldr	r2, [r7, #4]
 8003118:	69bb      	ldr	r3, [r7, #24]
 800311a:	212c      	movs	r1, #44	; 0x2c
 800311c:	fb01 f303 	mul.w	r3, r1, r3
 8003120:	4413      	add	r3, r2
 8003122:	3350      	adds	r3, #80	; 0x50
 8003124:	681a      	ldr	r2, [r3, #0]
 8003126:	693b      	ldr	r3, [r7, #16]
 8003128:	441a      	add	r2, r3
 800312a:	6879      	ldr	r1, [r7, #4]
 800312c:	69bb      	ldr	r3, [r7, #24]
 800312e:	202c      	movs	r0, #44	; 0x2c
 8003130:	fb00 f303 	mul.w	r3, r0, r3
 8003134:	440b      	add	r3, r1
 8003136:	3350      	adds	r3, #80	; 0x50
 8003138:	601a      	str	r2, [r3, #0]
          xferSizePktCnt = (USBx_HC(ch_num)->HCTSIZ & USB_OTG_HCTSIZ_PKTCNT) >> 19;
 800313a:	69bb      	ldr	r3, [r7, #24]
 800313c:	015a      	lsls	r2, r3, #5
 800313e:	6a3b      	ldr	r3, [r7, #32]
 8003140:	4413      	add	r3, r2
 8003142:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8003146:	691b      	ldr	r3, [r3, #16]
 8003148:	0cdb      	lsrs	r3, r3, #19
 800314a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800314e:	60fb      	str	r3, [r7, #12]
          if ((hhcd->hc[ch_num].max_packet == pktcnt) && (xferSizePktCnt > 0U))
 8003150:	687a      	ldr	r2, [r7, #4]
 8003152:	69bb      	ldr	r3, [r7, #24]
 8003154:	212c      	movs	r1, #44	; 0x2c
 8003156:	fb01 f303 	mul.w	r3, r1, r3
 800315a:	4413      	add	r3, r2
 800315c:	3340      	adds	r3, #64	; 0x40
 800315e:	881b      	ldrh	r3, [r3, #0]
 8003160:	461a      	mov	r2, r3
 8003162:	693b      	ldr	r3, [r7, #16]
 8003164:	4293      	cmp	r3, r2
 8003166:	d13c      	bne.n	80031e2 <HCD_RXQLVL_IRQHandler+0x19a>
 8003168:	68fb      	ldr	r3, [r7, #12]
 800316a:	2b00      	cmp	r3, #0
 800316c:	d039      	beq.n	80031e2 <HCD_RXQLVL_IRQHandler+0x19a>
            tmpreg = USBx_HC(ch_num)->HCCHAR;
 800316e:	69bb      	ldr	r3, [r7, #24]
 8003170:	015a      	lsls	r2, r3, #5
 8003172:	6a3b      	ldr	r3, [r7, #32]
 8003174:	4413      	add	r3, r2
 8003176:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	60bb      	str	r3, [r7, #8]
            tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 800317e:	68bb      	ldr	r3, [r7, #8]
 8003180:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 8003184:	60bb      	str	r3, [r7, #8]
            tmpreg |= USB_OTG_HCCHAR_CHENA;
 8003186:	68bb      	ldr	r3, [r7, #8]
 8003188:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800318c:	60bb      	str	r3, [r7, #8]
            USBx_HC(ch_num)->HCCHAR = tmpreg;
 800318e:	69bb      	ldr	r3, [r7, #24]
 8003190:	015a      	lsls	r2, r3, #5
 8003192:	6a3b      	ldr	r3, [r7, #32]
 8003194:	4413      	add	r3, r2
 8003196:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800319a:	461a      	mov	r2, r3
 800319c:	68bb      	ldr	r3, [r7, #8]
 800319e:	6013      	str	r3, [r2, #0]
            hhcd->hc[ch_num].toggle_in ^= 1U;
 80031a0:	687a      	ldr	r2, [r7, #4]
 80031a2:	69bb      	ldr	r3, [r7, #24]
 80031a4:	212c      	movs	r1, #44	; 0x2c
 80031a6:	fb01 f303 	mul.w	r3, r1, r3
 80031aa:	4413      	add	r3, r2
 80031ac:	3354      	adds	r3, #84	; 0x54
 80031ae:	781b      	ldrb	r3, [r3, #0]
 80031b0:	f083 0301 	eor.w	r3, r3, #1
 80031b4:	b2d8      	uxtb	r0, r3
 80031b6:	687a      	ldr	r2, [r7, #4]
 80031b8:	69bb      	ldr	r3, [r7, #24]
 80031ba:	212c      	movs	r1, #44	; 0x2c
 80031bc:	fb01 f303 	mul.w	r3, r1, r3
 80031c0:	4413      	add	r3, r2
 80031c2:	3354      	adds	r3, #84	; 0x54
 80031c4:	4602      	mov	r2, r0
 80031c6:	701a      	strb	r2, [r3, #0]
      break;
 80031c8:	e00b      	b.n	80031e2 <HCD_RXQLVL_IRQHandler+0x19a>
          hhcd->hc[ch_num].urb_state = URB_ERROR;
 80031ca:	687a      	ldr	r2, [r7, #4]
 80031cc:	69bb      	ldr	r3, [r7, #24]
 80031ce:	212c      	movs	r1, #44	; 0x2c
 80031d0:	fb01 f303 	mul.w	r3, r1, r3
 80031d4:	4413      	add	r3, r2
 80031d6:	3360      	adds	r3, #96	; 0x60
 80031d8:	2204      	movs	r2, #4
 80031da:	701a      	strb	r2, [r3, #0]
      break;
 80031dc:	e001      	b.n	80031e2 <HCD_RXQLVL_IRQHandler+0x19a>
      break;
 80031de:	bf00      	nop
 80031e0:	e000      	b.n	80031e4 <HCD_RXQLVL_IRQHandler+0x19c>
      break;
 80031e2:	bf00      	nop
  }
}
 80031e4:	bf00      	nop
 80031e6:	3728      	adds	r7, #40	; 0x28
 80031e8:	46bd      	mov	sp, r7
 80031ea:	bd80      	pop	{r7, pc}

080031ec <HCD_Port_IRQHandler>:
  * @brief  Handle Host Port interrupt requests.
  * @param  hhcd HCD handle
  * @retval None
  */
static void HCD_Port_IRQHandler(HCD_HandleTypeDef *hhcd)
{
 80031ec:	b580      	push	{r7, lr}
 80031ee:	b086      	sub	sp, #24
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	6078      	str	r0, [r7, #4]
  USB_OTG_GlobalTypeDef *USBx = hhcd->Instance;
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	617b      	str	r3, [r7, #20]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80031fa:	697b      	ldr	r3, [r7, #20]
 80031fc:	613b      	str	r3, [r7, #16]
  __IO uint32_t hprt0;
  __IO uint32_t hprt0_dup;

  /* Handle Host Port Interrupts */
  hprt0 = USBx_HPRT0;
 80031fe:	693b      	ldr	r3, [r7, #16]
 8003200:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	60fb      	str	r3, [r7, #12]
  hprt0_dup = USBx_HPRT0;
 8003208:	693b      	ldr	r3, [r7, #16]
 800320a:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 800320e:	681b      	ldr	r3, [r3, #0]
 8003210:	60bb      	str	r3, [r7, #8]

  hprt0_dup &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET | \
 8003212:	68bb      	ldr	r3, [r7, #8]
 8003214:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8003218:	60bb      	str	r3, [r7, #8]
                 USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  /* Check whether Port Connect detected */
  if ((hprt0 & USB_OTG_HPRT_PCDET) == USB_OTG_HPRT_PCDET)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f003 0302 	and.w	r3, r3, #2
 8003220:	2b02      	cmp	r3, #2
 8003222:	d10b      	bne.n	800323c <HCD_Port_IRQHandler+0x50>
  {
    if ((hprt0 & USB_OTG_HPRT_PCSTS) == USB_OTG_HPRT_PCSTS)
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b01      	cmp	r3, #1
 800322c:	d102      	bne.n	8003234 <HCD_Port_IRQHandler+0x48>
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->ConnectCallback(hhcd);
#else
      HAL_HCD_Connect_Callback(hhcd);
 800322e:	6878      	ldr	r0, [r7, #4]
 8003230:	f005 fa80 	bl	8008734 <HAL_HCD_Connect_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
    hprt0_dup |= USB_OTG_HPRT_PCDET;
 8003234:	68bb      	ldr	r3, [r7, #8]
 8003236:	f043 0302 	orr.w	r3, r3, #2
 800323a:	60bb      	str	r3, [r7, #8]
  }

  /* Check whether Port Enable Changed */
  if ((hprt0 & USB_OTG_HPRT_PENCHNG) == USB_OTG_HPRT_PENCHNG)
 800323c:	68fb      	ldr	r3, [r7, #12]
 800323e:	f003 0308 	and.w	r3, r3, #8
 8003242:	2b08      	cmp	r3, #8
 8003244:	d132      	bne.n	80032ac <HCD_Port_IRQHandler+0xc0>
  {
    hprt0_dup |= USB_OTG_HPRT_PENCHNG;
 8003246:	68bb      	ldr	r3, [r7, #8]
 8003248:	f043 0308 	orr.w	r3, r3, #8
 800324c:	60bb      	str	r3, [r7, #8]

    if ((hprt0 & USB_OTG_HPRT_PENA) == USB_OTG_HPRT_PENA)
 800324e:	68fb      	ldr	r3, [r7, #12]
 8003250:	f003 0304 	and.w	r3, r3, #4
 8003254:	2b04      	cmp	r3, #4
 8003256:	d126      	bne.n	80032a6 <HCD_Port_IRQHandler+0xba>
    {
      if (hhcd->Init.phy_itface  == USB_OTG_EMBEDDED_PHY)
 8003258:	687b      	ldr	r3, [r7, #4]
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	2b02      	cmp	r3, #2
 800325e:	d113      	bne.n	8003288 <HCD_Port_IRQHandler+0x9c>
      {
        if ((hprt0 & USB_OTG_HPRT_PSPD) == (HPRT0_PRTSPD_LOW_SPEED << 17))
 8003260:	68fb      	ldr	r3, [r7, #12]
 8003262:	f403 23c0 	and.w	r3, r3, #393216	; 0x60000
 8003266:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800326a:	d106      	bne.n	800327a <HCD_Port_IRQHandler+0x8e>
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_6_MHZ);
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	2102      	movs	r1, #2
 8003272:	4618      	mov	r0, r3
 8003274:	f003 fcf8 	bl	8006c68 <USB_InitFSLSPClkSel>
 8003278:	e011      	b.n	800329e <HCD_Port_IRQHandler+0xb2>
        }
        else
        {
          (void)USB_InitFSLSPClkSel(hhcd->Instance, HCFG_48_MHZ);
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	681b      	ldr	r3, [r3, #0]
 800327e:	2101      	movs	r1, #1
 8003280:	4618      	mov	r0, r3
 8003282:	f003 fcf1 	bl	8006c68 <USB_InitFSLSPClkSel>
 8003286:	e00a      	b.n	800329e <HCD_Port_IRQHandler+0xb2>
        }
      }
      else
      {
        if (hhcd->Init.speed == HCD_SPEED_FULL)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	68db      	ldr	r3, [r3, #12]
 800328c:	2b01      	cmp	r3, #1
 800328e:	d106      	bne.n	800329e <HCD_Port_IRQHandler+0xb2>
        {
          USBx_HOST->HFIR = 60000U;
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8003296:	461a      	mov	r2, r3
 8003298:	f64e 2360 	movw	r3, #60000	; 0xea60
 800329c:	6053      	str	r3, [r2, #4]
        }
      }
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortEnabledCallback(hhcd);
#else
      HAL_HCD_PortEnabled_Callback(hhcd);
 800329e:	6878      	ldr	r0, [r7, #4]
 80032a0:	f005 fa72 	bl	8008788 <HAL_HCD_PortEnabled_Callback>
 80032a4:	e002      	b.n	80032ac <HCD_Port_IRQHandler+0xc0>
    else
    {
#if (USE_HAL_HCD_REGISTER_CALLBACKS == 1U)
      hhcd->PortDisabledCallback(hhcd);
#else
      HAL_HCD_PortDisabled_Callback(hhcd);
 80032a6:	6878      	ldr	r0, [r7, #4]
 80032a8:	f005 fa7c 	bl	80087a4 <HAL_HCD_PortDisabled_Callback>
#endif /* USE_HAL_HCD_REGISTER_CALLBACKS */
    }
  }

  /* Check for an overcurrent */
  if ((hprt0 & USB_OTG_HPRT_POCCHNG) == USB_OTG_HPRT_POCCHNG)
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	f003 0320 	and.w	r3, r3, #32
 80032b2:	2b20      	cmp	r3, #32
 80032b4:	d103      	bne.n	80032be <HCD_Port_IRQHandler+0xd2>
  {
    hprt0_dup |= USB_OTG_HPRT_POCCHNG;
 80032b6:	68bb      	ldr	r3, [r7, #8]
 80032b8:	f043 0320 	orr.w	r3, r3, #32
 80032bc:	60bb      	str	r3, [r7, #8]
  }

  /* Clear Port Interrupts */
  USBx_HPRT0 = hprt0_dup;
 80032be:	693b      	ldr	r3, [r7, #16]
 80032c0:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 80032c4:	461a      	mov	r2, r3
 80032c6:	68bb      	ldr	r3, [r7, #8]
 80032c8:	6013      	str	r3, [r2, #0]
}
 80032ca:	bf00      	nop
 80032cc:	3718      	adds	r7, #24
 80032ce:	46bd      	mov	sp, r7
 80032d0:	bd80      	pop	{r7, pc}

080032d2 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032d2:	b580      	push	{r7, lr}
 80032d4:	b082      	sub	sp, #8
 80032d6:	af00      	add	r7, sp, #0
 80032d8:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032da:	687b      	ldr	r3, [r7, #4]
 80032dc:	2b00      	cmp	r3, #0
 80032de:	d101      	bne.n	80032e4 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032e0:	2301      	movs	r3, #1
 80032e2:	e081      	b.n	80033e8 <HAL_I2C_Init+0x116>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80032ea:	b2db      	uxtb	r3, r3
 80032ec:	2b00      	cmp	r3, #0
 80032ee:	d106      	bne.n	80032fe <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	2200      	movs	r2, #0
 80032f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 80032f8:	6878      	ldr	r0, [r7, #4]
 80032fa:	f7fd fe6f 	bl	8000fdc <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2224      	movs	r2, #36	; 0x24
 8003302:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	681a      	ldr	r2, [r3, #0]
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	f022 0201 	bic.w	r2, r2, #1
 8003314:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	685a      	ldr	r2, [r3, #4]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003322:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	689a      	ldr	r2, [r3, #8]
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003332:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	2b01      	cmp	r3, #1
 800333a:	d107      	bne.n	800334c <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	689a      	ldr	r2, [r3, #8]
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	681b      	ldr	r3, [r3, #0]
 8003344:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003348:	609a      	str	r2, [r3, #8]
 800334a:	e006      	b.n	800335a <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800334c:	687b      	ldr	r3, [r7, #4]
 800334e:	689a      	ldr	r2, [r3, #8]
 8003350:	687b      	ldr	r3, [r7, #4]
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8003358:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800335a:	687b      	ldr	r3, [r7, #4]
 800335c:	68db      	ldr	r3, [r3, #12]
 800335e:	2b02      	cmp	r3, #2
 8003360:	d104      	bne.n	800336c <HAL_I2C_Init+0x9a>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 8003362:	687b      	ldr	r3, [r7, #4]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800336a:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	685b      	ldr	r3, [r3, #4]
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	6812      	ldr	r2, [r2, #0]
 8003376:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800337a:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800337e:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	68da      	ldr	r2, [r3, #12]
 8003386:	687b      	ldr	r3, [r7, #4]
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800338e:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	691a      	ldr	r2, [r3, #16]
 8003394:	687b      	ldr	r3, [r7, #4]
 8003396:	695b      	ldr	r3, [r3, #20]
 8003398:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	699b      	ldr	r3, [r3, #24]
 80033a0:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 80033a2:	687b      	ldr	r3, [r7, #4]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	430a      	orrs	r2, r1
 80033a8:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 80033aa:	687b      	ldr	r3, [r7, #4]
 80033ac:	69d9      	ldr	r1, [r3, #28]
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	6a1a      	ldr	r2, [r3, #32]
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	681b      	ldr	r3, [r3, #0]
 80033b6:	430a      	orrs	r2, r1
 80033b8:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80033ba:	687b      	ldr	r3, [r7, #4]
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	681a      	ldr	r2, [r3, #0]
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	681b      	ldr	r3, [r3, #0]
 80033c4:	f042 0201 	orr.w	r2, r2, #1
 80033c8:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2200      	movs	r2, #0
 80033ce:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2220      	movs	r2, #32
 80033d4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2200      	movs	r2, #0
 80033dc:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	2200      	movs	r2, #0
 80033e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 80033e6:	2300      	movs	r3, #0
}
 80033e8:	4618      	mov	r0, r3
 80033ea:	3708      	adds	r7, #8
 80033ec:	46bd      	mov	sp, r7
 80033ee:	bd80      	pop	{r7, pc}

080033f0 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 80033f0:	b480      	push	{r7}
 80033f2:	b083      	sub	sp, #12
 80033f4:	af00      	add	r7, sp, #0
 80033f6:	6078      	str	r0, [r7, #4]
 80033f8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003400:	b2db      	uxtb	r3, r3
 8003402:	2b20      	cmp	r3, #32
 8003404:	d138      	bne.n	8003478 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800340c:	2b01      	cmp	r3, #1
 800340e:	d101      	bne.n	8003414 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8003410:	2302      	movs	r3, #2
 8003412:	e032      	b.n	800347a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2201      	movs	r2, #1
 8003418:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	2224      	movs	r2, #36	; 0x24
 8003420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	681a      	ldr	r2, [r3, #0]
 800342a:	687b      	ldr	r3, [r7, #4]
 800342c:	681b      	ldr	r3, [r3, #0]
 800342e:	f022 0201 	bic.w	r2, r2, #1
 8003432:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	681a      	ldr	r2, [r3, #0]
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8003442:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	6819      	ldr	r1, [r3, #0]
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	683a      	ldr	r2, [r7, #0]
 8003450:	430a      	orrs	r2, r1
 8003452:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681a      	ldr	r2, [r3, #0]
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	681b      	ldr	r3, [r3, #0]
 800345e:	f042 0201 	orr.w	r2, r2, #1
 8003462:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2220      	movs	r2, #32
 8003468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	2200      	movs	r2, #0
 8003470:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8003474:	2300      	movs	r3, #0
 8003476:	e000      	b.n	800347a <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8003478:	2302      	movs	r3, #2
  }
}
 800347a:	4618      	mov	r0, r3
 800347c:	370c      	adds	r7, #12
 800347e:	46bd      	mov	sp, r7
 8003480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003484:	4770      	bx	lr

08003486 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8003486:	b480      	push	{r7}
 8003488:	b085      	sub	sp, #20
 800348a:	af00      	add	r7, sp, #0
 800348c:	6078      	str	r0, [r7, #4]
 800348e:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003496:	b2db      	uxtb	r3, r3
 8003498:	2b20      	cmp	r3, #32
 800349a:	d139      	bne.n	8003510 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80034a2:	2b01      	cmp	r3, #1
 80034a4:	d101      	bne.n	80034aa <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80034a6:	2302      	movs	r3, #2
 80034a8:	e033      	b.n	8003512 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	2201      	movs	r2, #1
 80034ae:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	2224      	movs	r2, #36	; 0x24
 80034b6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80034ba:	687b      	ldr	r3, [r7, #4]
 80034bc:	681b      	ldr	r3, [r3, #0]
 80034be:	681a      	ldr	r2, [r3, #0]
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	f022 0201 	bic.w	r2, r2, #1
 80034c8:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80034d2:	68fb      	ldr	r3, [r7, #12]
 80034d4:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 80034d8:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 80034da:	683b      	ldr	r3, [r7, #0]
 80034dc:	021b      	lsls	r3, r3, #8
 80034de:	68fa      	ldr	r2, [r7, #12]
 80034e0:	4313      	orrs	r3, r2
 80034e2:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	68fa      	ldr	r2, [r7, #12]
 80034ea:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	681a      	ldr	r2, [r3, #0]
 80034f2:	687b      	ldr	r3, [r7, #4]
 80034f4:	681b      	ldr	r3, [r3, #0]
 80034f6:	f042 0201 	orr.w	r2, r2, #1
 80034fa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	2220      	movs	r2, #32
 8003500:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 800350c:	2300      	movs	r3, #0
 800350e:	e000      	b.n	8003512 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8003510:	2302      	movs	r3, #2
  }
}
 8003512:	4618      	mov	r0, r3
 8003514:	3714      	adds	r7, #20
 8003516:	46bd      	mov	sp, r7
 8003518:	f85d 7b04 	ldr.w	r7, [sp], #4
 800351c:	4770      	bx	lr
	...

08003520 <HAL_PWR_EnableBkUpAccess>:
  * @note  LSEON bit that switches on and off the LSE crystal belongs as well to the
  *        back-up domain.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8003520:	b480      	push	{r7}
 8003522:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003524:	4b05      	ldr	r3, [pc, #20]	; (800353c <HAL_PWR_EnableBkUpAccess+0x1c>)
 8003526:	681b      	ldr	r3, [r3, #0]
 8003528:	4a04      	ldr	r2, [pc, #16]	; (800353c <HAL_PWR_EnableBkUpAccess+0x1c>)
 800352a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800352e:	6013      	str	r3, [r2, #0]
}
 8003530:	bf00      	nop
 8003532:	46bd      	mov	sp, r7
 8003534:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	40007000 	.word	0x40007000

08003540 <HAL_PWREx_GetVoltageRange>:
  * @brief Return Voltage Scaling Range.
  * @retval VOS bit field (PWR_REGULATOR_VOLTAGE_SCALE1 or PWR_REGULATOR_VOLTAGE_SCALE2
  *         or PWR_REGULATOR_VOLTAGE_SCALE1_BOOST when applicable)
  */
uint32_t HAL_PWREx_GetVoltageRange(void)
{
 8003540:	b480      	push	{r7}
 8003542:	af00      	add	r7, sp, #0
    else
    {
      return PWR_REGULATOR_VOLTAGE_SCALE1_BOOST;
    }
#else
  return  (PWR->CR1 & PWR_CR1_VOS);
 8003544:	4b04      	ldr	r3, [pc, #16]	; (8003558 <HAL_PWREx_GetVoltageRange+0x18>)
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
#endif
}
 800354c:	4618      	mov	r0, r3
 800354e:	46bd      	mov	sp, r7
 8003550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003554:	4770      	bx	lr
 8003556:	bf00      	nop
 8003558:	40007000 	.word	0x40007000

0800355c <HAL_PWREx_ControlVoltageScaling>:
  *        cleared before returning the status. If the flag is not cleared within
  *        50 microseconds, HAL_TIMEOUT status is reported.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_PWREx_ControlVoltageScaling(uint32_t VoltageScaling)
{
 800355c:	b480      	push	{r7}
 800355e:	b085      	sub	sp, #20
 8003560:	af00      	add	r7, sp, #0
 8003562:	6078      	str	r0, [r7, #4]
  }

#else

  /* If Set Range 1 */
  if (VoltageScaling == PWR_REGULATOR_VOLTAGE_SCALE1)
 8003564:	687b      	ldr	r3, [r7, #4]
 8003566:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800356a:	d130      	bne.n	80035ce <HAL_PWREx_ControlVoltageScaling+0x72>
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE1)
 800356c:	4b23      	ldr	r3, [pc, #140]	; (80035fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8003574:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8003578:	d038      	beq.n	80035ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 1 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE1);
 800357a:	4b20      	ldr	r3, [pc, #128]	; (80035fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 8003582:	4a1e      	ldr	r2, [pc, #120]	; (80035fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 8003584:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003588:	6013      	str	r3, [r2, #0]

      /* Wait until VOSF is cleared */
      wait_loop_index = ((PWR_FLAG_SETTING_DELAY_US * SystemCoreClock) / 1000000U) + 1U;
 800358a:	4b1d      	ldr	r3, [pc, #116]	; (8003600 <HAL_PWREx_ControlVoltageScaling+0xa4>)
 800358c:	681b      	ldr	r3, [r3, #0]
 800358e:	2232      	movs	r2, #50	; 0x32
 8003590:	fb02 f303 	mul.w	r3, r2, r3
 8003594:	4a1b      	ldr	r2, [pc, #108]	; (8003604 <HAL_PWREx_ControlVoltageScaling+0xa8>)
 8003596:	fba2 2303 	umull	r2, r3, r2, r3
 800359a:	0c9b      	lsrs	r3, r3, #18
 800359c:	3301      	adds	r3, #1
 800359e:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035a0:	e002      	b.n	80035a8 <HAL_PWREx_ControlVoltageScaling+0x4c>
      {
        wait_loop_index--;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	3b01      	subs	r3, #1
 80035a6:	60fb      	str	r3, [r7, #12]
      while ((HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF)) && (wait_loop_index != 0U))
 80035a8:	4b14      	ldr	r3, [pc, #80]	; (80035fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035aa:	695b      	ldr	r3, [r3, #20]
 80035ac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035b0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035b4:	d102      	bne.n	80035bc <HAL_PWREx_ControlVoltageScaling+0x60>
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	d1f2      	bne.n	80035a2 <HAL_PWREx_ControlVoltageScaling+0x46>
      }
      if (HAL_IS_BIT_SET(PWR->SR2, PWR_SR2_VOSF))
 80035bc:	4b0f      	ldr	r3, [pc, #60]	; (80035fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035be:	695b      	ldr	r3, [r3, #20]
 80035c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80035c4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035c8:	d110      	bne.n	80035ec <HAL_PWREx_ControlVoltageScaling+0x90>
      {
        return HAL_TIMEOUT;
 80035ca:	2303      	movs	r3, #3
 80035cc:	e00f      	b.n	80035ee <HAL_PWREx_ControlVoltageScaling+0x92>
      }
    }
  }
  else
  {
    if (READ_BIT(PWR->CR1, PWR_CR1_VOS) != PWR_REGULATOR_VOLTAGE_SCALE2)
 80035ce:	4b0b      	ldr	r3, [pc, #44]	; (80035fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80035d6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80035da:	d007      	beq.n	80035ec <HAL_PWREx_ControlVoltageScaling+0x90>
    {
      /* Set Range 2 */
      MODIFY_REG(PWR->CR1, PWR_CR1_VOS, PWR_REGULATOR_VOLTAGE_SCALE2);
 80035dc:	4b07      	ldr	r3, [pc, #28]	; (80035fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035de:	681b      	ldr	r3, [r3, #0]
 80035e0:	f423 63c0 	bic.w	r3, r3, #1536	; 0x600
 80035e4:	4a05      	ldr	r2, [pc, #20]	; (80035fc <HAL_PWREx_ControlVoltageScaling+0xa0>)
 80035e6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80035ea:	6013      	str	r3, [r2, #0]
      /* No need to wait for VOSF to be cleared for this transition */
    }
  }
#endif

  return HAL_OK;
 80035ec:	2300      	movs	r3, #0
}
 80035ee:	4618      	mov	r0, r3
 80035f0:	3714      	adds	r7, #20
 80035f2:	46bd      	mov	sp, r7
 80035f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80035f8:	4770      	bx	lr
 80035fa:	bf00      	nop
 80035fc:	40007000 	.word	0x40007000
 8003600:	20000000 	.word	0x20000000
 8003604:	431bde83 	.word	0x431bde83

08003608 <HAL_PWREx_EnableVddUSB>:
  * @brief Enable VDDUSB supply.
  * @note  Remove VDDUSB electrical and logical isolation, once VDDUSB supply is present.
  * @retval None
  */
void HAL_PWREx_EnableVddUSB(void)
{
 8003608:	b480      	push	{r7}
 800360a:	af00      	add	r7, sp, #0
  SET_BIT(PWR->CR2, PWR_CR2_USV);
 800360c:	4b05      	ldr	r3, [pc, #20]	; (8003624 <HAL_PWREx_EnableVddUSB+0x1c>)
 800360e:	685b      	ldr	r3, [r3, #4]
 8003610:	4a04      	ldr	r2, [pc, #16]	; (8003624 <HAL_PWREx_EnableVddUSB+0x1c>)
 8003612:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003616:	6053      	str	r3, [r2, #4]
}
 8003618:	bf00      	nop
 800361a:	46bd      	mov	sp, r7
 800361c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003620:	4770      	bx	lr
 8003622:	bf00      	nop
 8003624:	40007000 	.word	0x40007000

08003628 <HAL_QSPI_Init>:
  *        in the QSPI_InitTypeDef and initialize the associated handle.
  * @param hqspi QSPI handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_QSPI_Init(QSPI_HandleTypeDef *hqspi)
{
 8003628:	b580      	push	{r7, lr}
 800362a:	b086      	sub	sp, #24
 800362c:	af02      	add	r7, sp, #8
 800362e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status;
  uint32_t tickstart = HAL_GetTick();
 8003630:	f7fd ffea 	bl	8001608 <HAL_GetTick>
 8003634:	60f8      	str	r0, [r7, #12]

  /* Check the QSPI handle allocation */
  if(hqspi == NULL)
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	2b00      	cmp	r3, #0
 800363a:	d101      	bne.n	8003640 <HAL_QSPI_Init+0x18>
  {
    return HAL_ERROR;
 800363c:	2301      	movs	r3, #1
 800363e:	e063      	b.n	8003708 <HAL_QSPI_Init+0xe0>
  {
    assert_param(IS_QSPI_FLASH_ID(hqspi->Init.FlashID));
  }
#endif

  if(hqspi->State == HAL_QSPI_STATE_RESET)
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8003646:	b2db      	uxtb	r3, r3
 8003648:	2b00      	cmp	r3, #0
 800364a:	d10b      	bne.n	8003664 <HAL_QSPI_Init+0x3c>
  {
    /* Allocate lock resource and initialize it */
    hqspi->Lock = HAL_UNLOCKED;
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	2200      	movs	r2, #0
 8003650:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    hqspi->MspInitCallback(hqspi);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_QSPI_MspInit(hqspi);
 8003654:	6878      	ldr	r0, [r7, #4]
 8003656:	f7fd fd63 	bl	8001120 <HAL_QSPI_MspInit>
#endif

    /* Configure the default timeout for the QSPI memory access */
    HAL_QSPI_SetTimeout(hqspi, HAL_QSPI_TIMEOUT_DEFAULT_VALUE);
 800365a:	f241 3188 	movw	r1, #5000	; 0x1388
 800365e:	6878      	ldr	r0, [r7, #4]
 8003660:	f000 f858 	bl	8003714 <HAL_QSPI_SetTimeout>
  }

  /* Configure QSPI FIFO Threshold */
  MODIFY_REG(hqspi->Instance->CR, QUADSPI_CR_FTHRES,
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	681b      	ldr	r3, [r3, #0]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	f423 6170 	bic.w	r1, r3, #3840	; 0xf00
 800366e:	687b      	ldr	r3, [r7, #4]
 8003670:	689b      	ldr	r3, [r3, #8]
 8003672:	3b01      	subs	r3, #1
 8003674:	021a      	lsls	r2, r3, #8
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	430a      	orrs	r2, r1
 800367c:	601a      	str	r2, [r3, #0]
             ((hqspi->Init.FifoThreshold - 1U) << QUADSPI_CR_FTHRES_Pos));

  /* Wait till BUSY flag reset */
  status = QSPI_WaitFlagStateUntilTimeout(hqspi, QSPI_FLAG_BUSY, RESET, tickstart, hqspi->Timeout);
 800367e:	687b      	ldr	r3, [r7, #4]
 8003680:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003682:	9300      	str	r3, [sp, #0]
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	2200      	movs	r2, #0
 8003688:	2120      	movs	r1, #32
 800368a:	6878      	ldr	r0, [r7, #4]
 800368c:	f000 f850 	bl	8003730 <QSPI_WaitFlagStateUntilTimeout>
 8003690:	4603      	mov	r3, r0
 8003692:	72fb      	strb	r3, [r7, #11]

  if(status == HAL_OK)
 8003694:	7afb      	ldrb	r3, [r7, #11]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d131      	bne.n	80036fe <HAL_QSPI_Init+0xd6>
#if defined(QUADSPI_CR_DFM)
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT | QUADSPI_CR_FSEL | QUADSPI_CR_DFM),
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting  | hqspi->Init.FlashID | hqspi->Init.DualFlash));
#else
    MODIFY_REG(hqspi->Instance->CR, (QUADSPI_CR_PRESCALER | QUADSPI_CR_SSHIFT),
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	f023 437f 	bic.w	r3, r3, #4278190080	; 0xff000000
 80036a4:	f023 0310 	bic.w	r3, r3, #16
 80036a8:	687a      	ldr	r2, [r7, #4]
 80036aa:	6852      	ldr	r2, [r2, #4]
 80036ac:	0611      	lsls	r1, r2, #24
 80036ae:	687a      	ldr	r2, [r7, #4]
 80036b0:	68d2      	ldr	r2, [r2, #12]
 80036b2:	4311      	orrs	r1, r2
 80036b4:	687a      	ldr	r2, [r7, #4]
 80036b6:	6812      	ldr	r2, [r2, #0]
 80036b8:	430b      	orrs	r3, r1
 80036ba:	6013      	str	r3, [r2, #0]
               ((hqspi->Init.ClockPrescaler << QUADSPI_CR_PRESCALER_Pos) |
                hqspi->Init.SampleShifting));
#endif

    /* Configure QSPI Flash Size, CS High Time and Clock Mode */
    MODIFY_REG(hqspi->Instance->DCR, (QUADSPI_DCR_FSIZE | QUADSPI_DCR_CSHT | QUADSPI_DCR_CKMODE),
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	685a      	ldr	r2, [r3, #4]
 80036c2:	4b13      	ldr	r3, [pc, #76]	; (8003710 <HAL_QSPI_Init+0xe8>)
 80036c4:	4013      	ands	r3, r2
 80036c6:	687a      	ldr	r2, [r7, #4]
 80036c8:	6912      	ldr	r2, [r2, #16]
 80036ca:	0411      	lsls	r1, r2, #16
 80036cc:	687a      	ldr	r2, [r7, #4]
 80036ce:	6952      	ldr	r2, [r2, #20]
 80036d0:	4311      	orrs	r1, r2
 80036d2:	687a      	ldr	r2, [r7, #4]
 80036d4:	6992      	ldr	r2, [r2, #24]
 80036d6:	4311      	orrs	r1, r2
 80036d8:	687a      	ldr	r2, [r7, #4]
 80036da:	6812      	ldr	r2, [r2, #0]
 80036dc:	430b      	orrs	r3, r1
 80036de:	6053      	str	r3, [r2, #4]
               ((hqspi->Init.FlashSize << QUADSPI_DCR_FSIZE_Pos) |
                hqspi->Init.ChipSelectHighTime | hqspi->Init.ClockMode));

    /* Enable the QSPI peripheral */
    __HAL_QSPI_ENABLE(hqspi);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	681b      	ldr	r3, [r3, #0]
 80036e4:	681a      	ldr	r2, [r3, #0]
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	681b      	ldr	r3, [r3, #0]
 80036ea:	f042 0201 	orr.w	r2, r2, #1
 80036ee:	601a      	str	r2, [r3, #0]

    /* Set QSPI error code to none */
    hqspi->ErrorCode = HAL_QSPI_ERROR_NONE;
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	2200      	movs	r2, #0
 80036f4:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Initialize the QSPI state */
    hqspi->State = HAL_QSPI_STATE_READY;
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	2201      	movs	r2, #1
 80036fa:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  }

  /* Release Lock */
  __HAL_UNLOCK(hqspi);
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	2200      	movs	r2, #0
 8003702:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

  /* Return function status */
  return status;
 8003706:	7afb      	ldrb	r3, [r7, #11]
}
 8003708:	4618      	mov	r0, r3
 800370a:	3710      	adds	r7, #16
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	ffe0f8fe 	.word	0xffe0f8fe

08003714 <HAL_QSPI_SetTimeout>:
  * @param  hqspi QSPI handle.
  * @param  Timeout Timeout for the QSPI memory access.
  * @retval None
  */
void HAL_QSPI_SetTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Timeout)
{
 8003714:	b480      	push	{r7}
 8003716:	b083      	sub	sp, #12
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  hqspi->Timeout = Timeout;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	683a      	ldr	r2, [r7, #0]
 8003722:	641a      	str	r2, [r3, #64]	; 0x40
}
 8003724:	bf00      	nop
 8003726:	370c      	adds	r7, #12
 8003728:	46bd      	mov	sp, r7
 800372a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800372e:	4770      	bx	lr

08003730 <QSPI_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef QSPI_WaitFlagStateUntilTimeout(QSPI_HandleTypeDef *hqspi, uint32_t Flag,
                                                        FlagStatus State, uint32_t Tickstart, uint32_t Timeout)
{
 8003730:	b580      	push	{r7, lr}
 8003732:	b084      	sub	sp, #16
 8003734:	af00      	add	r7, sp, #0
 8003736:	60f8      	str	r0, [r7, #12]
 8003738:	60b9      	str	r1, [r7, #8]
 800373a:	603b      	str	r3, [r7, #0]
 800373c:	4613      	mov	r3, r2
 800373e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is in expected state */
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003740:	e01a      	b.n	8003778 <QSPI_WaitFlagStateUntilTimeout+0x48>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003748:	d016      	beq.n	8003778 <QSPI_WaitFlagStateUntilTimeout+0x48>
    {
      if(((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800374a:	f7fd ff5d 	bl	8001608 <HAL_GetTick>
 800374e:	4602      	mov	r2, r0
 8003750:	683b      	ldr	r3, [r7, #0]
 8003752:	1ad3      	subs	r3, r2, r3
 8003754:	69ba      	ldr	r2, [r7, #24]
 8003756:	429a      	cmp	r2, r3
 8003758:	d302      	bcc.n	8003760 <QSPI_WaitFlagStateUntilTimeout+0x30>
 800375a:	69bb      	ldr	r3, [r7, #24]
 800375c:	2b00      	cmp	r3, #0
 800375e:	d10b      	bne.n	8003778 <QSPI_WaitFlagStateUntilTimeout+0x48>
      {
        hqspi->State     = HAL_QSPI_STATE_ERROR;
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	2204      	movs	r2, #4
 8003764:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        hqspi->ErrorCode |= HAL_QSPI_ERROR_TIMEOUT;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800376c:	f043 0201 	orr.w	r2, r3, #1
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	63da      	str	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8003774:	2301      	movs	r3, #1
 8003776:	e00e      	b.n	8003796 <QSPI_WaitFlagStateUntilTimeout+0x66>
  while((__HAL_QSPI_GET_FLAG(hqspi, Flag)) != State)
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	689a      	ldr	r2, [r3, #8]
 800377e:	68bb      	ldr	r3, [r7, #8]
 8003780:	4013      	ands	r3, r2
 8003782:	2b00      	cmp	r3, #0
 8003784:	bf14      	ite	ne
 8003786:	2301      	movne	r3, #1
 8003788:	2300      	moveq	r3, #0
 800378a:	b2db      	uxtb	r3, r3
 800378c:	461a      	mov	r2, r3
 800378e:	79fb      	ldrb	r3, [r7, #7]
 8003790:	429a      	cmp	r2, r3
 8003792:	d1d6      	bne.n	8003742 <QSPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8003794:	2300      	movs	r3, #0
}
 8003796:	4618      	mov	r0, r3
 8003798:	3710      	adds	r7, #16
 800379a:	46bd      	mov	sp, r7
 800379c:	bd80      	pop	{r7, pc}
	...

080037a0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80037a0:	b580      	push	{r7, lr}
 80037a2:	b088      	sub	sp, #32
 80037a4:	af00      	add	r7, sp, #0
 80037a6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d101      	bne.n	80037b2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80037ae:	2301      	movs	r3, #1
 80037b0:	e3c6      	b.n	8003f40 <HAL_RCC_OscConfig+0x7a0>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 80037b2:	4ba1      	ldr	r3, [pc, #644]	; (8003a38 <HAL_RCC_OscConfig+0x298>)
 80037b4:	689b      	ldr	r3, [r3, #8]
 80037b6:	f003 030c 	and.w	r3, r3, #12
 80037ba:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 80037bc:	4b9e      	ldr	r3, [pc, #632]	; (8003a38 <HAL_RCC_OscConfig+0x298>)
 80037be:	68db      	ldr	r3, [r3, #12]
 80037c0:	f003 0303 	and.w	r3, r3, #3
 80037c4:	617b      	str	r3, [r7, #20]

  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	f003 0310 	and.w	r3, r3, #16
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	f000 80e4 	beq.w	800399c <HAL_RCC_OscConfig+0x1fc>
    assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));
    assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
    assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

    /* Check if MSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 80037d4:	69bb      	ldr	r3, [r7, #24]
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	d007      	beq.n	80037ea <HAL_RCC_OscConfig+0x4a>
 80037da:	69bb      	ldr	r3, [r7, #24]
 80037dc:	2b0c      	cmp	r3, #12
 80037de:	f040 808b 	bne.w	80038f8 <HAL_RCC_OscConfig+0x158>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_MSI)))
 80037e2:	697b      	ldr	r3, [r7, #20]
 80037e4:	2b01      	cmp	r3, #1
 80037e6:	f040 8087 	bne.w	80038f8 <HAL_RCC_OscConfig+0x158>
    {
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80037ea:	4b93      	ldr	r3, [pc, #588]	; (8003a38 <HAL_RCC_OscConfig+0x298>)
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	f003 0302 	and.w	r3, r3, #2
 80037f2:	2b00      	cmp	r3, #0
 80037f4:	d005      	beq.n	8003802 <HAL_RCC_OscConfig+0x62>
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	699b      	ldr	r3, [r3, #24]
 80037fa:	2b00      	cmp	r3, #0
 80037fc:	d101      	bne.n	8003802 <HAL_RCC_OscConfig+0x62>
      {
        return HAL_ERROR;
 80037fe:	2301      	movs	r3, #1
 8003800:	e39e      	b.n	8003f40 <HAL_RCC_OscConfig+0x7a0>
      else
      {
        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a1a      	ldr	r2, [r3, #32]
 8003806:	4b8c      	ldr	r3, [pc, #560]	; (8003a38 <HAL_RCC_OscConfig+0x298>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0308 	and.w	r3, r3, #8
 800380e:	2b00      	cmp	r3, #0
 8003810:	d004      	beq.n	800381c <HAL_RCC_OscConfig+0x7c>
 8003812:	4b89      	ldr	r3, [pc, #548]	; (8003a38 <HAL_RCC_OscConfig+0x298>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800381a:	e005      	b.n	8003828 <HAL_RCC_OscConfig+0x88>
 800381c:	4b86      	ldr	r3, [pc, #536]	; (8003a38 <HAL_RCC_OscConfig+0x298>)
 800381e:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003822:	091b      	lsrs	r3, r3, #4
 8003824:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003828:	4293      	cmp	r3, r2
 800382a:	d223      	bcs.n	8003874 <HAL_RCC_OscConfig+0xd4>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a1b      	ldr	r3, [r3, #32]
 8003830:	4618      	mov	r0, r3
 8003832:	f000 fd53 	bl	80042dc <RCC_SetFlashLatencyFromMSIRange>
 8003836:	4603      	mov	r3, r0
 8003838:	2b00      	cmp	r3, #0
 800383a:	d001      	beq.n	8003840 <HAL_RCC_OscConfig+0xa0>
          {
            return HAL_ERROR;
 800383c:	2301      	movs	r3, #1
 800383e:	e37f      	b.n	8003f40 <HAL_RCC_OscConfig+0x7a0>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003840:	4b7d      	ldr	r3, [pc, #500]	; (8003a38 <HAL_RCC_OscConfig+0x298>)
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	4a7c      	ldr	r2, [pc, #496]	; (8003a38 <HAL_RCC_OscConfig+0x298>)
 8003846:	f043 0308 	orr.w	r3, r3, #8
 800384a:	6013      	str	r3, [r2, #0]
 800384c:	4b7a      	ldr	r3, [pc, #488]	; (8003a38 <HAL_RCC_OscConfig+0x298>)
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003854:	687b      	ldr	r3, [r7, #4]
 8003856:	6a1b      	ldr	r3, [r3, #32]
 8003858:	4977      	ldr	r1, [pc, #476]	; (8003a38 <HAL_RCC_OscConfig+0x298>)
 800385a:	4313      	orrs	r3, r2
 800385c:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800385e:	4b76      	ldr	r3, [pc, #472]	; (8003a38 <HAL_RCC_OscConfig+0x298>)
 8003860:	685b      	ldr	r3, [r3, #4]
 8003862:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	69db      	ldr	r3, [r3, #28]
 800386a:	021b      	lsls	r3, r3, #8
 800386c:	4972      	ldr	r1, [pc, #456]	; (8003a38 <HAL_RCC_OscConfig+0x298>)
 800386e:	4313      	orrs	r3, r2
 8003870:	604b      	str	r3, [r1, #4]
 8003872:	e025      	b.n	80038c0 <HAL_RCC_OscConfig+0x120>
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003874:	4b70      	ldr	r3, [pc, #448]	; (8003a38 <HAL_RCC_OscConfig+0x298>)
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a6f      	ldr	r2, [pc, #444]	; (8003a38 <HAL_RCC_OscConfig+0x298>)
 800387a:	f043 0308 	orr.w	r3, r3, #8
 800387e:	6013      	str	r3, [r2, #0]
 8003880:	4b6d      	ldr	r3, [pc, #436]	; (8003a38 <HAL_RCC_OscConfig+0x298>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	6a1b      	ldr	r3, [r3, #32]
 800388c:	496a      	ldr	r1, [pc, #424]	; (8003a38 <HAL_RCC_OscConfig+0x298>)
 800388e:	4313      	orrs	r3, r2
 8003890:	600b      	str	r3, [r1, #0]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003892:	4b69      	ldr	r3, [pc, #420]	; (8003a38 <HAL_RCC_OscConfig+0x298>)
 8003894:	685b      	ldr	r3, [r3, #4]
 8003896:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	69db      	ldr	r3, [r3, #28]
 800389e:	021b      	lsls	r3, r3, #8
 80038a0:	4965      	ldr	r1, [pc, #404]	; (8003a38 <HAL_RCC_OscConfig+0x298>)
 80038a2:	4313      	orrs	r3, r2
 80038a4:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          /* Only possible when MSI is the System clock source  */
          if(sysclk_source == RCC_CFGR_SWS_MSI)
 80038a6:	69bb      	ldr	r3, [r7, #24]
 80038a8:	2b00      	cmp	r3, #0
 80038aa:	d109      	bne.n	80038c0 <HAL_RCC_OscConfig+0x120>
          {
            if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	6a1b      	ldr	r3, [r3, #32]
 80038b0:	4618      	mov	r0, r3
 80038b2:	f000 fd13 	bl	80042dc <RCC_SetFlashLatencyFromMSIRange>
 80038b6:	4603      	mov	r3, r0
 80038b8:	2b00      	cmp	r3, #0
 80038ba:	d001      	beq.n	80038c0 <HAL_RCC_OscConfig+0x120>
            {
              return HAL_ERROR;
 80038bc:	2301      	movs	r3, #1
 80038be:	e33f      	b.n	8003f40 <HAL_RCC_OscConfig+0x7a0>
            }
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 80038c0:	f000 fc48 	bl	8004154 <HAL_RCC_GetSysClockFreq>
 80038c4:	4602      	mov	r2, r0
 80038c6:	4b5c      	ldr	r3, [pc, #368]	; (8003a38 <HAL_RCC_OscConfig+0x298>)
 80038c8:	689b      	ldr	r3, [r3, #8]
 80038ca:	091b      	lsrs	r3, r3, #4
 80038cc:	f003 030f 	and.w	r3, r3, #15
 80038d0:	495a      	ldr	r1, [pc, #360]	; (8003a3c <HAL_RCC_OscConfig+0x29c>)
 80038d2:	5ccb      	ldrb	r3, [r1, r3]
 80038d4:	f003 031f 	and.w	r3, r3, #31
 80038d8:	fa22 f303 	lsr.w	r3, r2, r3
 80038dc:	4a58      	ldr	r2, [pc, #352]	; (8003a40 <HAL_RCC_OscConfig+0x2a0>)
 80038de:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 80038e0:	4b58      	ldr	r3, [pc, #352]	; (8003a44 <HAL_RCC_OscConfig+0x2a4>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	4618      	mov	r0, r3
 80038e6:	f7fd fe3f 	bl	8001568 <HAL_InitTick>
 80038ea:	4603      	mov	r3, r0
 80038ec:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 80038ee:	7bfb      	ldrb	r3, [r7, #15]
 80038f0:	2b00      	cmp	r3, #0
 80038f2:	d052      	beq.n	800399a <HAL_RCC_OscConfig+0x1fa>
        {
          return status;
 80038f4:	7bfb      	ldrb	r3, [r7, #15]
 80038f6:	e323      	b.n	8003f40 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	699b      	ldr	r3, [r3, #24]
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d032      	beq.n	8003966 <HAL_RCC_OscConfig+0x1c6>
      {
        /* Enable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8003900:	4b4d      	ldr	r3, [pc, #308]	; (8003a38 <HAL_RCC_OscConfig+0x298>)
 8003902:	681b      	ldr	r3, [r3, #0]
 8003904:	4a4c      	ldr	r2, [pc, #304]	; (8003a38 <HAL_RCC_OscConfig+0x298>)
 8003906:	f043 0301 	orr.w	r3, r3, #1
 800390a:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 800390c:	f7fd fe7c 	bl	8001608 <HAL_GetTick>
 8003910:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003912:	e008      	b.n	8003926 <HAL_RCC_OscConfig+0x186>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8003914:	f7fd fe78 	bl	8001608 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	693b      	ldr	r3, [r7, #16]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	2b02      	cmp	r3, #2
 8003920:	d901      	bls.n	8003926 <HAL_RCC_OscConfig+0x186>
          {
            return HAL_TIMEOUT;
 8003922:	2303      	movs	r3, #3
 8003924:	e30c      	b.n	8003f40 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 8003926:	4b44      	ldr	r3, [pc, #272]	; (8003a38 <HAL_RCC_OscConfig+0x298>)
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	f003 0302 	and.w	r3, r3, #2
 800392e:	2b00      	cmp	r3, #0
 8003930:	d0f0      	beq.n	8003914 <HAL_RCC_OscConfig+0x174>
          }
        }
         /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 8003932:	4b41      	ldr	r3, [pc, #260]	; (8003a38 <HAL_RCC_OscConfig+0x298>)
 8003934:	681b      	ldr	r3, [r3, #0]
 8003936:	4a40      	ldr	r2, [pc, #256]	; (8003a38 <HAL_RCC_OscConfig+0x298>)
 8003938:	f043 0308 	orr.w	r3, r3, #8
 800393c:	6013      	str	r3, [r2, #0]
 800393e:	4b3e      	ldr	r3, [pc, #248]	; (8003a38 <HAL_RCC_OscConfig+0x298>)
 8003940:	681b      	ldr	r3, [r3, #0]
 8003942:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6a1b      	ldr	r3, [r3, #32]
 800394a:	493b      	ldr	r1, [pc, #236]	; (8003a38 <HAL_RCC_OscConfig+0x298>)
 800394c:	4313      	orrs	r3, r2
 800394e:	600b      	str	r3, [r1, #0]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8003950:	4b39      	ldr	r3, [pc, #228]	; (8003a38 <HAL_RCC_OscConfig+0x298>)
 8003952:	685b      	ldr	r3, [r3, #4]
 8003954:	f423 427f 	bic.w	r2, r3, #65280	; 0xff00
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	69db      	ldr	r3, [r3, #28]
 800395c:	021b      	lsls	r3, r3, #8
 800395e:	4936      	ldr	r1, [pc, #216]	; (8003a38 <HAL_RCC_OscConfig+0x298>)
 8003960:	4313      	orrs	r3, r2
 8003962:	604b      	str	r3, [r1, #4]
 8003964:	e01a      	b.n	800399c <HAL_RCC_OscConfig+0x1fc>

      }
      else
      {
        /* Disable the Internal High Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 8003966:	4b34      	ldr	r3, [pc, #208]	; (8003a38 <HAL_RCC_OscConfig+0x298>)
 8003968:	681b      	ldr	r3, [r3, #0]
 800396a:	4a33      	ldr	r2, [pc, #204]	; (8003a38 <HAL_RCC_OscConfig+0x298>)
 800396c:	f023 0301 	bic.w	r3, r3, #1
 8003970:	6013      	str	r3, [r2, #0]

        /* Get timeout */
        tickstart = HAL_GetTick();
 8003972:	f7fd fe49 	bl	8001608 <HAL_GetTick>
 8003976:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 8003978:	e008      	b.n	800398c <HAL_RCC_OscConfig+0x1ec>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800397a:	f7fd fe45 	bl	8001608 <HAL_GetTick>
 800397e:	4602      	mov	r2, r0
 8003980:	693b      	ldr	r3, [r7, #16]
 8003982:	1ad3      	subs	r3, r2, r3
 8003984:	2b02      	cmp	r3, #2
 8003986:	d901      	bls.n	800398c <HAL_RCC_OscConfig+0x1ec>
          {
            return HAL_TIMEOUT;
 8003988:	2303      	movs	r3, #3
 800398a:	e2d9      	b.n	8003f40 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U)
 800398c:	4b2a      	ldr	r3, [pc, #168]	; (8003a38 <HAL_RCC_OscConfig+0x298>)
 800398e:	681b      	ldr	r3, [r3, #0]
 8003990:	f003 0302 	and.w	r3, r3, #2
 8003994:	2b00      	cmp	r3, #0
 8003996:	d1f0      	bne.n	800397a <HAL_RCC_OscConfig+0x1da>
 8003998:	e000      	b.n	800399c <HAL_RCC_OscConfig+0x1fc>
      if((READ_BIT(RCC->CR, RCC_CR_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 800399a:	bf00      	nop
        }
      }
    }
  }
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	681b      	ldr	r3, [r3, #0]
 80039a0:	f003 0301 	and.w	r3, r3, #1
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d074      	beq.n	8003a92 <HAL_RCC_OscConfig+0x2f2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_CFGR_SWS_HSE) ||
 80039a8:	69bb      	ldr	r3, [r7, #24]
 80039aa:	2b08      	cmp	r3, #8
 80039ac:	d005      	beq.n	80039ba <HAL_RCC_OscConfig+0x21a>
 80039ae:	69bb      	ldr	r3, [r7, #24]
 80039b0:	2b0c      	cmp	r3, #12
 80039b2:	d10e      	bne.n	80039d2 <HAL_RCC_OscConfig+0x232>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSE)))
 80039b4:	697b      	ldr	r3, [r7, #20]
 80039b6:	2b03      	cmp	r3, #3
 80039b8:	d10b      	bne.n	80039d2 <HAL_RCC_OscConfig+0x232>
    {
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80039ba:	4b1f      	ldr	r3, [pc, #124]	; (8003a38 <HAL_RCC_OscConfig+0x298>)
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d064      	beq.n	8003a90 <HAL_RCC_OscConfig+0x2f0>
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	685b      	ldr	r3, [r3, #4]
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d160      	bne.n	8003a90 <HAL_RCC_OscConfig+0x2f0>
      {
        return HAL_ERROR;
 80039ce:	2301      	movs	r3, #1
 80039d0:	e2b6      	b.n	8003f40 <HAL_RCC_OscConfig+0x7a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	685b      	ldr	r3, [r3, #4]
 80039d6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80039da:	d106      	bne.n	80039ea <HAL_RCC_OscConfig+0x24a>
 80039dc:	4b16      	ldr	r3, [pc, #88]	; (8003a38 <HAL_RCC_OscConfig+0x298>)
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	4a15      	ldr	r2, [pc, #84]	; (8003a38 <HAL_RCC_OscConfig+0x298>)
 80039e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80039e6:	6013      	str	r3, [r2, #0]
 80039e8:	e01d      	b.n	8003a26 <HAL_RCC_OscConfig+0x286>
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	685b      	ldr	r3, [r3, #4]
 80039ee:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80039f2:	d10c      	bne.n	8003a0e <HAL_RCC_OscConfig+0x26e>
 80039f4:	4b10      	ldr	r3, [pc, #64]	; (8003a38 <HAL_RCC_OscConfig+0x298>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4a0f      	ldr	r2, [pc, #60]	; (8003a38 <HAL_RCC_OscConfig+0x298>)
 80039fa:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80039fe:	6013      	str	r3, [r2, #0]
 8003a00:	4b0d      	ldr	r3, [pc, #52]	; (8003a38 <HAL_RCC_OscConfig+0x298>)
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	4a0c      	ldr	r2, [pc, #48]	; (8003a38 <HAL_RCC_OscConfig+0x298>)
 8003a06:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003a0a:	6013      	str	r3, [r2, #0]
 8003a0c:	e00b      	b.n	8003a26 <HAL_RCC_OscConfig+0x286>
 8003a0e:	4b0a      	ldr	r3, [pc, #40]	; (8003a38 <HAL_RCC_OscConfig+0x298>)
 8003a10:	681b      	ldr	r3, [r3, #0]
 8003a12:	4a09      	ldr	r2, [pc, #36]	; (8003a38 <HAL_RCC_OscConfig+0x298>)
 8003a14:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003a18:	6013      	str	r3, [r2, #0]
 8003a1a:	4b07      	ldr	r3, [pc, #28]	; (8003a38 <HAL_RCC_OscConfig+0x298>)
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	4a06      	ldr	r2, [pc, #24]	; (8003a38 <HAL_RCC_OscConfig+0x298>)
 8003a20:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003a24:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	685b      	ldr	r3, [r3, #4]
 8003a2a:	2b00      	cmp	r3, #0
 8003a2c:	d01c      	beq.n	8003a68 <HAL_RCC_OscConfig+0x2c8>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a2e:	f7fd fdeb 	bl	8001608 <HAL_GetTick>
 8003a32:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a34:	e011      	b.n	8003a5a <HAL_RCC_OscConfig+0x2ba>
 8003a36:	bf00      	nop
 8003a38:	40021000 	.word	0x40021000
 8003a3c:	08008d3c 	.word	0x08008d3c
 8003a40:	20000000 	.word	0x20000000
 8003a44:	20000004 	.word	0x20000004
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a48:	f7fd fdde 	bl	8001608 <HAL_GetTick>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	693b      	ldr	r3, [r7, #16]
 8003a50:	1ad3      	subs	r3, r2, r3
 8003a52:	2b64      	cmp	r3, #100	; 0x64
 8003a54:	d901      	bls.n	8003a5a <HAL_RCC_OscConfig+0x2ba>
          {
            return HAL_TIMEOUT;
 8003a56:	2303      	movs	r3, #3
 8003a58:	e272      	b.n	8003f40 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003a5a:	4baf      	ldr	r3, [pc, #700]	; (8003d18 <HAL_RCC_OscConfig+0x578>)
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a62:	2b00      	cmp	r3, #0
 8003a64:	d0f0      	beq.n	8003a48 <HAL_RCC_OscConfig+0x2a8>
 8003a66:	e014      	b.n	8003a92 <HAL_RCC_OscConfig+0x2f2>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003a68:	f7fd fdce 	bl	8001608 <HAL_GetTick>
 8003a6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a6e:	e008      	b.n	8003a82 <HAL_RCC_OscConfig+0x2e2>
        {
          if((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003a70:	f7fd fdca 	bl	8001608 <HAL_GetTick>
 8003a74:	4602      	mov	r2, r0
 8003a76:	693b      	ldr	r3, [r7, #16]
 8003a78:	1ad3      	subs	r3, r2, r3
 8003a7a:	2b64      	cmp	r3, #100	; 0x64
 8003a7c:	d901      	bls.n	8003a82 <HAL_RCC_OscConfig+0x2e2>
          {
            return HAL_TIMEOUT;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	e25e      	b.n	8003f40 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U)
 8003a82:	4ba5      	ldr	r3, [pc, #660]	; (8003d18 <HAL_RCC_OscConfig+0x578>)
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003a8a:	2b00      	cmp	r3, #0
 8003a8c:	d1f0      	bne.n	8003a70 <HAL_RCC_OscConfig+0x2d0>
 8003a8e:	e000      	b.n	8003a92 <HAL_RCC_OscConfig+0x2f2>
      if((READ_BIT(RCC->CR, RCC_CR_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003a90:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	f003 0302 	and.w	r3, r3, #2
 8003a9a:	2b00      	cmp	r3, #0
 8003a9c:	d060      	beq.n	8003b60 <HAL_RCC_OscConfig+0x3c0>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSI_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_CFGR_SWS_HSI) ||
 8003a9e:	69bb      	ldr	r3, [r7, #24]
 8003aa0:	2b04      	cmp	r3, #4
 8003aa2:	d005      	beq.n	8003ab0 <HAL_RCC_OscConfig+0x310>
 8003aa4:	69bb      	ldr	r3, [r7, #24]
 8003aa6:	2b0c      	cmp	r3, #12
 8003aa8:	d119      	bne.n	8003ade <HAL_RCC_OscConfig+0x33e>
       ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_config == RCC_PLLSOURCE_HSI)))
 8003aaa:	697b      	ldr	r3, [r7, #20]
 8003aac:	2b02      	cmp	r3, #2
 8003aae:	d116      	bne.n	8003ade <HAL_RCC_OscConfig+0x33e>
    {
      /* When HSI is used as system clock it will not be disabled */
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003ab0:	4b99      	ldr	r3, [pc, #612]	; (8003d18 <HAL_RCC_OscConfig+0x578>)
 8003ab2:	681b      	ldr	r3, [r3, #0]
 8003ab4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003ab8:	2b00      	cmp	r3, #0
 8003aba:	d005      	beq.n	8003ac8 <HAL_RCC_OscConfig+0x328>
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	68db      	ldr	r3, [r3, #12]
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d101      	bne.n	8003ac8 <HAL_RCC_OscConfig+0x328>
      {
        return HAL_ERROR;
 8003ac4:	2301      	movs	r3, #1
 8003ac6:	e23b      	b.n	8003f40 <HAL_RCC_OscConfig+0x7a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003ac8:	4b93      	ldr	r3, [pc, #588]	; (8003d18 <HAL_RCC_OscConfig+0x578>)
 8003aca:	685b      	ldr	r3, [r3, #4]
 8003acc:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	691b      	ldr	r3, [r3, #16]
 8003ad4:	061b      	lsls	r3, r3, #24
 8003ad6:	4990      	ldr	r1, [pc, #576]	; (8003d18 <HAL_RCC_OscConfig+0x578>)
 8003ad8:	4313      	orrs	r3, r2
 8003ada:	604b      	str	r3, [r1, #4]
      if((READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003adc:	e040      	b.n	8003b60 <HAL_RCC_OscConfig+0x3c0>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	68db      	ldr	r3, [r3, #12]
 8003ae2:	2b00      	cmp	r3, #0
 8003ae4:	d023      	beq.n	8003b2e <HAL_RCC_OscConfig+0x38e>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003ae6:	4b8c      	ldr	r3, [pc, #560]	; (8003d18 <HAL_RCC_OscConfig+0x578>)
 8003ae8:	681b      	ldr	r3, [r3, #0]
 8003aea:	4a8b      	ldr	r2, [pc, #556]	; (8003d18 <HAL_RCC_OscConfig+0x578>)
 8003aec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003af0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003af2:	f7fd fd89 	bl	8001608 <HAL_GetTick>
 8003af6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003af8:	e008      	b.n	8003b0c <HAL_RCC_OscConfig+0x36c>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003afa:	f7fd fd85 	bl	8001608 <HAL_GetTick>
 8003afe:	4602      	mov	r2, r0
 8003b00:	693b      	ldr	r3, [r7, #16]
 8003b02:	1ad3      	subs	r3, r2, r3
 8003b04:	2b02      	cmp	r3, #2
 8003b06:	d901      	bls.n	8003b0c <HAL_RCC_OscConfig+0x36c>
          {
            return HAL_TIMEOUT;
 8003b08:	2303      	movs	r3, #3
 8003b0a:	e219      	b.n	8003f40 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 8003b0c:	4b82      	ldr	r3, [pc, #520]	; (8003d18 <HAL_RCC_OscConfig+0x578>)
 8003b0e:	681b      	ldr	r3, [r3, #0]
 8003b10:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b14:	2b00      	cmp	r3, #0
 8003b16:	d0f0      	beq.n	8003afa <HAL_RCC_OscConfig+0x35a>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003b18:	4b7f      	ldr	r3, [pc, #508]	; (8003d18 <HAL_RCC_OscConfig+0x578>)
 8003b1a:	685b      	ldr	r3, [r3, #4]
 8003b1c:	f023 52f8 	bic.w	r2, r3, #520093696	; 0x1f000000
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	691b      	ldr	r3, [r3, #16]
 8003b24:	061b      	lsls	r3, r3, #24
 8003b26:	497c      	ldr	r1, [pc, #496]	; (8003d18 <HAL_RCC_OscConfig+0x578>)
 8003b28:	4313      	orrs	r3, r2
 8003b2a:	604b      	str	r3, [r1, #4]
 8003b2c:	e018      	b.n	8003b60 <HAL_RCC_OscConfig+0x3c0>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003b2e:	4b7a      	ldr	r3, [pc, #488]	; (8003d18 <HAL_RCC_OscConfig+0x578>)
 8003b30:	681b      	ldr	r3, [r3, #0]
 8003b32:	4a79      	ldr	r2, [pc, #484]	; (8003d18 <HAL_RCC_OscConfig+0x578>)
 8003b34:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8003b38:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003b3a:	f7fd fd65 	bl	8001608 <HAL_GetTick>
 8003b3e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b40:	e008      	b.n	8003b54 <HAL_RCC_OscConfig+0x3b4>
        {
          if((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003b42:	f7fd fd61 	bl	8001608 <HAL_GetTick>
 8003b46:	4602      	mov	r2, r0
 8003b48:	693b      	ldr	r3, [r7, #16]
 8003b4a:	1ad3      	subs	r3, r2, r3
 8003b4c:	2b02      	cmp	r3, #2
 8003b4e:	d901      	bls.n	8003b54 <HAL_RCC_OscConfig+0x3b4>
          {
            return HAL_TIMEOUT;
 8003b50:	2303      	movs	r3, #3
 8003b52:	e1f5      	b.n	8003f40 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_HSIRDY) != 0U)
 8003b54:	4b70      	ldr	r3, [pc, #448]	; (8003d18 <HAL_RCC_OscConfig+0x578>)
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003b5c:	2b00      	cmp	r3, #0
 8003b5e:	d1f0      	bne.n	8003b42 <HAL_RCC_OscConfig+0x3a2>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	681b      	ldr	r3, [r3, #0]
 8003b64:	f003 0308 	and.w	r3, r3, #8
 8003b68:	2b00      	cmp	r3, #0
 8003b6a:	d03c      	beq.n	8003be6 <HAL_RCC_OscConfig+0x446>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	695b      	ldr	r3, [r3, #20]
 8003b70:	2b00      	cmp	r3, #0
 8003b72:	d01c      	beq.n	8003bae <HAL_RCC_OscConfig+0x40e>
        MODIFY_REG(RCC->CSR, RCC_CSR_LSIPREDIV, RCC_OscInitStruct->LSIDiv);
      }
#endif /* RCC_CSR_LSIPREDIV */

      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003b74:	4b68      	ldr	r3, [pc, #416]	; (8003d18 <HAL_RCC_OscConfig+0x578>)
 8003b76:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003b7a:	4a67      	ldr	r2, [pc, #412]	; (8003d18 <HAL_RCC_OscConfig+0x578>)
 8003b7c:	f043 0301 	orr.w	r3, r3, #1
 8003b80:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003b84:	f7fd fd40 	bl	8001608 <HAL_GetTick>
 8003b88:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b8a:	e008      	b.n	8003b9e <HAL_RCC_OscConfig+0x3fe>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003b8c:	f7fd fd3c 	bl	8001608 <HAL_GetTick>
 8003b90:	4602      	mov	r2, r0
 8003b92:	693b      	ldr	r3, [r7, #16]
 8003b94:	1ad3      	subs	r3, r2, r3
 8003b96:	2b02      	cmp	r3, #2
 8003b98:	d901      	bls.n	8003b9e <HAL_RCC_OscConfig+0x3fe>
        {
          return HAL_TIMEOUT;
 8003b9a:	2303      	movs	r3, #3
 8003b9c:	e1d0      	b.n	8003f40 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) == 0U)
 8003b9e:	4b5e      	ldr	r3, [pc, #376]	; (8003d18 <HAL_RCC_OscConfig+0x578>)
 8003ba0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003ba4:	f003 0302 	and.w	r3, r3, #2
 8003ba8:	2b00      	cmp	r3, #0
 8003baa:	d0ef      	beq.n	8003b8c <HAL_RCC_OscConfig+0x3ec>
 8003bac:	e01b      	b.n	8003be6 <HAL_RCC_OscConfig+0x446>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003bae:	4b5a      	ldr	r3, [pc, #360]	; (8003d18 <HAL_RCC_OscConfig+0x578>)
 8003bb0:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bb4:	4a58      	ldr	r2, [pc, #352]	; (8003d18 <HAL_RCC_OscConfig+0x578>)
 8003bb6:	f023 0301 	bic.w	r3, r3, #1
 8003bba:	f8c2 3094 	str.w	r3, [r2, #148]	; 0x94

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003bbe:	f7fd fd23 	bl	8001608 <HAL_GetTick>
 8003bc2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bc4:	e008      	b.n	8003bd8 <HAL_RCC_OscConfig+0x438>
      {
        if((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003bc6:	f7fd fd1f 	bl	8001608 <HAL_GetTick>
 8003bca:	4602      	mov	r2, r0
 8003bcc:	693b      	ldr	r3, [r7, #16]
 8003bce:	1ad3      	subs	r3, r2, r3
 8003bd0:	2b02      	cmp	r3, #2
 8003bd2:	d901      	bls.n	8003bd8 <HAL_RCC_OscConfig+0x438>
        {
          return HAL_TIMEOUT;
 8003bd4:	2303      	movs	r3, #3
 8003bd6:	e1b3      	b.n	8003f40 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->CSR, RCC_CSR_LSIRDY) != 0U)
 8003bd8:	4b4f      	ldr	r3, [pc, #316]	; (8003d18 <HAL_RCC_OscConfig+0x578>)
 8003bda:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8003bde:	f003 0302 	and.w	r3, r3, #2
 8003be2:	2b00      	cmp	r3, #0
 8003be4:	d1ef      	bne.n	8003bc6 <HAL_RCC_OscConfig+0x426>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	f003 0304 	and.w	r3, r3, #4
 8003bee:	2b00      	cmp	r3, #0
 8003bf0:	f000 80a6 	beq.w	8003d40 <HAL_RCC_OscConfig+0x5a0>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003bf4:	2300      	movs	r3, #0
 8003bf6:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(HAL_IS_BIT_CLR(RCC->APB1ENR1, RCC_APB1ENR1_PWREN))
 8003bf8:	4b47      	ldr	r3, [pc, #284]	; (8003d18 <HAL_RCC_OscConfig+0x578>)
 8003bfa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003bfc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c00:	2b00      	cmp	r3, #0
 8003c02:	d10d      	bne.n	8003c20 <HAL_RCC_OscConfig+0x480>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003c04:	4b44      	ldr	r3, [pc, #272]	; (8003d18 <HAL_RCC_OscConfig+0x578>)
 8003c06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c08:	4a43      	ldr	r2, [pc, #268]	; (8003d18 <HAL_RCC_OscConfig+0x578>)
 8003c0a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003c0e:	6593      	str	r3, [r2, #88]	; 0x58
 8003c10:	4b41      	ldr	r3, [pc, #260]	; (8003d18 <HAL_RCC_OscConfig+0x578>)
 8003c12:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003c14:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003c18:	60bb      	str	r3, [r7, #8]
 8003c1a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c20:	4b3e      	ldr	r3, [pc, #248]	; (8003d1c <HAL_RCC_OscConfig+0x57c>)
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d118      	bne.n	8003c5e <HAL_RCC_OscConfig+0x4be>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8003c2c:	4b3b      	ldr	r3, [pc, #236]	; (8003d1c <HAL_RCC_OscConfig+0x57c>)
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	4a3a      	ldr	r2, [pc, #232]	; (8003d1c <HAL_RCC_OscConfig+0x57c>)
 8003c32:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c36:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003c38:	f7fd fce6 	bl	8001608 <HAL_GetTick>
 8003c3c:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c3e:	e008      	b.n	8003c52 <HAL_RCC_OscConfig+0x4b2>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003c40:	f7fd fce2 	bl	8001608 <HAL_GetTick>
 8003c44:	4602      	mov	r2, r0
 8003c46:	693b      	ldr	r3, [r7, #16]
 8003c48:	1ad3      	subs	r3, r2, r3
 8003c4a:	2b02      	cmp	r3, #2
 8003c4c:	d901      	bls.n	8003c52 <HAL_RCC_OscConfig+0x4b2>
        {
          return HAL_TIMEOUT;
 8003c4e:	2303      	movs	r3, #3
 8003c50:	e176      	b.n	8003f40 <HAL_RCC_OscConfig+0x7a0>
      while(HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8003c52:	4b32      	ldr	r3, [pc, #200]	; (8003d1c <HAL_RCC_OscConfig+0x57c>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	d0f0      	beq.n	8003c40 <HAL_RCC_OscConfig+0x4a0>
    {
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEON);
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSEBYP);
    }
#else
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	689b      	ldr	r3, [r3, #8]
 8003c62:	2b01      	cmp	r3, #1
 8003c64:	d108      	bne.n	8003c78 <HAL_RCC_OscConfig+0x4d8>
 8003c66:	4b2c      	ldr	r3, [pc, #176]	; (8003d18 <HAL_RCC_OscConfig+0x578>)
 8003c68:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c6c:	4a2a      	ldr	r2, [pc, #168]	; (8003d18 <HAL_RCC_OscConfig+0x578>)
 8003c6e:	f043 0301 	orr.w	r3, r3, #1
 8003c72:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c76:	e024      	b.n	8003cc2 <HAL_RCC_OscConfig+0x522>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	689b      	ldr	r3, [r3, #8]
 8003c7c:	2b05      	cmp	r3, #5
 8003c7e:	d110      	bne.n	8003ca2 <HAL_RCC_OscConfig+0x502>
 8003c80:	4b25      	ldr	r3, [pc, #148]	; (8003d18 <HAL_RCC_OscConfig+0x578>)
 8003c82:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c86:	4a24      	ldr	r2, [pc, #144]	; (8003d18 <HAL_RCC_OscConfig+0x578>)
 8003c88:	f043 0304 	orr.w	r3, r3, #4
 8003c8c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003c90:	4b21      	ldr	r3, [pc, #132]	; (8003d18 <HAL_RCC_OscConfig+0x578>)
 8003c92:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003c96:	4a20      	ldr	r2, [pc, #128]	; (8003d18 <HAL_RCC_OscConfig+0x578>)
 8003c98:	f043 0301 	orr.w	r3, r3, #1
 8003c9c:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003ca0:	e00f      	b.n	8003cc2 <HAL_RCC_OscConfig+0x522>
 8003ca2:	4b1d      	ldr	r3, [pc, #116]	; (8003d18 <HAL_RCC_OscConfig+0x578>)
 8003ca4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003ca8:	4a1b      	ldr	r2, [pc, #108]	; (8003d18 <HAL_RCC_OscConfig+0x578>)
 8003caa:	f023 0301 	bic.w	r3, r3, #1
 8003cae:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
 8003cb2:	4b19      	ldr	r3, [pc, #100]	; (8003d18 <HAL_RCC_OscConfig+0x578>)
 8003cb4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cb8:	4a17      	ldr	r2, [pc, #92]	; (8003d18 <HAL_RCC_OscConfig+0x578>)
 8003cba:	f023 0304 	bic.w	r3, r3, #4
 8003cbe:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
#endif /* RCC_BDCR_LSESYSDIS */

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	689b      	ldr	r3, [r3, #8]
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d016      	beq.n	8003cf8 <HAL_RCC_OscConfig+0x558>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cca:	f7fd fc9d 	bl	8001608 <HAL_GetTick>
 8003cce:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003cd0:	e00a      	b.n	8003ce8 <HAL_RCC_OscConfig+0x548>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003cd2:	f7fd fc99 	bl	8001608 <HAL_GetTick>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	693b      	ldr	r3, [r7, #16]
 8003cda:	1ad3      	subs	r3, r2, r3
 8003cdc:	f241 3288 	movw	r2, #5000	; 0x1388
 8003ce0:	4293      	cmp	r3, r2
 8003ce2:	d901      	bls.n	8003ce8 <HAL_RCC_OscConfig+0x548>
        {
          return HAL_TIMEOUT;
 8003ce4:	2303      	movs	r3, #3
 8003ce6:	e12b      	b.n	8003f40 <HAL_RCC_OscConfig+0x7a0>
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 8003ce8:	4b0b      	ldr	r3, [pc, #44]	; (8003d18 <HAL_RCC_OscConfig+0x578>)
 8003cea:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003cee:	f003 0302 	and.w	r3, r3, #2
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d0ed      	beq.n	8003cd2 <HAL_RCC_OscConfig+0x532>
 8003cf6:	e01a      	b.n	8003d2e <HAL_RCC_OscConfig+0x58e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003cf8:	f7fd fc86 	bl	8001608 <HAL_GetTick>
 8003cfc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003cfe:	e00f      	b.n	8003d20 <HAL_RCC_OscConfig+0x580>
      {
        if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003d00:	f7fd fc82 	bl	8001608 <HAL_GetTick>
 8003d04:	4602      	mov	r2, r0
 8003d06:	693b      	ldr	r3, [r7, #16]
 8003d08:	1ad3      	subs	r3, r2, r3
 8003d0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8003d0e:	4293      	cmp	r3, r2
 8003d10:	d906      	bls.n	8003d20 <HAL_RCC_OscConfig+0x580>
        {
          return HAL_TIMEOUT;
 8003d12:	2303      	movs	r3, #3
 8003d14:	e114      	b.n	8003f40 <HAL_RCC_OscConfig+0x7a0>
 8003d16:	bf00      	nop
 8003d18:	40021000 	.word	0x40021000
 8003d1c:	40007000 	.word	0x40007000
      while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) != 0U)
 8003d20:	4b89      	ldr	r3, [pc, #548]	; (8003f48 <HAL_RCC_OscConfig+0x7a8>)
 8003d22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8003d26:	f003 0302 	and.w	r3, r3, #2
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d1e8      	bne.n	8003d00 <HAL_RCC_OscConfig+0x560>
      CLEAR_BIT(RCC->BDCR, RCC_BDCR_LSESYSDIS);
#endif /* RCC_BDCR_LSESYSDIS */
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8003d2e:	7ffb      	ldrb	r3, [r7, #31]
 8003d30:	2b01      	cmp	r3, #1
 8003d32:	d105      	bne.n	8003d40 <HAL_RCC_OscConfig+0x5a0>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003d34:	4b84      	ldr	r3, [pc, #528]	; (8003f48 <HAL_RCC_OscConfig+0x7a8>)
 8003d36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003d38:	4a83      	ldr	r2, [pc, #524]	; (8003f48 <HAL_RCC_OscConfig+0x7a8>)
 8003d3a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003d3e:	6593      	str	r3, [r2, #88]	; 0x58
#endif /* RCC_HSI48_SUPPORT */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));

  if(RCC_OscInitStruct->PLL.PLLState != RCC_PLL_NONE)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d44:	2b00      	cmp	r3, #0
 8003d46:	f000 80fa 	beq.w	8003f3e <HAL_RCC_OscConfig+0x79e>
  {
    /* PLL On ? */
    if(RCC_OscInitStruct->PLL.PLLState == RCC_PLL_ON)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003d4e:	2b02      	cmp	r3, #2
 8003d50:	f040 80d0 	bne.w	8003ef4 <HAL_RCC_OscConfig+0x754>
#endif /* RCC_PLLP_SUPPORT */
      assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
      assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

      /* Do nothing if PLL configuration is the unchanged */
      pll_config = RCC->PLLCFGR;
 8003d54:	4b7c      	ldr	r3, [pc, #496]	; (8003f48 <HAL_RCC_OscConfig+0x7a8>)
 8003d56:	68db      	ldr	r3, [r3, #12]
 8003d58:	617b      	str	r3, [r7, #20]
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d5a:	697b      	ldr	r3, [r7, #20]
 8003d5c:	f003 0203 	and.w	r2, r3, #3
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d64:	429a      	cmp	r2, r3
 8003d66:	d130      	bne.n	8003dca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d68:	697b      	ldr	r3, [r7, #20]
 8003d6a:	f003 0270 	and.w	r2, r3, #112	; 0x70
 8003d6e:	687b      	ldr	r3, [r7, #4]
 8003d70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d72:	3b01      	subs	r3, #1
 8003d74:	011b      	lsls	r3, r3, #4
      if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC)  != RCC_OscInitStruct->PLL.PLLSource) ||
 8003d76:	429a      	cmp	r2, r3
 8003d78:	d127      	bne.n	8003dca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d7a:	697b      	ldr	r3, [r7, #20]
 8003d7c:	f403 42fe 	and.w	r2, r3, #32512	; 0x7f00
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003d84:	021b      	lsls	r3, r3, #8
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLM)    != ((RCC_OscInitStruct->PLL.PLLM - 1U) << RCC_PLLCFGR_PLLM_Pos)) ||
 8003d86:	429a      	cmp	r2, r3
 8003d88:	d11f      	bne.n	8003dca <HAL_RCC_OscConfig+0x62a>
#if defined(RCC_PLLP_SUPPORT)
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLPDIV) != (RCC_OscInitStruct->PLL.PLLP << RCC_PLLCFGR_PLLPDIV_Pos)) ||
#else
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003d8a:	697b      	ldr	r3, [r7, #20]
 8003d8c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003d90:	687a      	ldr	r2, [r7, #4]
 8003d92:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003d94:	2a07      	cmp	r2, #7
 8003d96:	bf14      	ite	ne
 8003d98:	2201      	movne	r2, #1
 8003d9a:	2200      	moveq	r2, #0
 8003d9c:	b2d2      	uxtb	r2, r2
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLN)    != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8003d9e:	4293      	cmp	r3, r2
 8003da0:	d113      	bne.n	8003dca <HAL_RCC_OscConfig+0x62a>
#endif
#endif
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003da2:	697b      	ldr	r3, [r7, #20]
 8003da4:	f403 02c0 	and.w	r2, r3, #6291456	; 0x600000
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003dac:	085b      	lsrs	r3, r3, #1
 8003dae:	3b01      	subs	r3, #1
 8003db0:	055b      	lsls	r3, r3, #21
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLP)    != ((RCC_OscInitStruct->PLL.PLLP == RCC_PLLP_DIV7) ? 0U : 1U)) ||
 8003db2:	429a      	cmp	r2, r3
 8003db4:	d109      	bne.n	8003dca <HAL_RCC_OscConfig+0x62a>
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLR)    != ((((RCC_OscInitStruct->PLL.PLLR) >> 1U) - 1U) << RCC_PLLCFGR_PLLR_Pos)))
 8003db6:	697b      	ldr	r3, [r7, #20]
 8003db8:	f003 62c0 	and.w	r2, r3, #100663296	; 0x6000000
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003dc0:	085b      	lsrs	r3, r3, #1
 8003dc2:	3b01      	subs	r3, #1
 8003dc4:	065b      	lsls	r3, r3, #25
         (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ)    != ((((RCC_OscInitStruct->PLL.PLLQ) >> 1U) - 1U) << RCC_PLLCFGR_PLLQ_Pos)) ||
 8003dc6:	429a      	cmp	r2, r3
 8003dc8:	d06e      	beq.n	8003ea8 <HAL_RCC_OscConfig+0x708>
      {
        /* Check if the PLL is used as system clock or not */
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003dca:	69bb      	ldr	r3, [r7, #24]
 8003dcc:	2b0c      	cmp	r3, #12
 8003dce:	d069      	beq.n	8003ea4 <HAL_RCC_OscConfig+0x704>
        {
#if defined(RCC_PLLSAI1_SUPPORT) || defined(RCC_PLLSAI2_SUPPORT)
          /* Check if main PLL can be updated */
          /* Not possible if the source is shared by other enabled PLLSAIx */
          if((READ_BIT(RCC->CR, RCC_CR_PLLSAI1ON) != 0U)
 8003dd0:	4b5d      	ldr	r3, [pc, #372]	; (8003f48 <HAL_RCC_OscConfig+0x7a8>)
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8003dd8:	2b00      	cmp	r3, #0
 8003dda:	d105      	bne.n	8003de8 <HAL_RCC_OscConfig+0x648>
#if defined(RCC_PLLSAI2_SUPPORT)
             || (READ_BIT(RCC->CR, RCC_CR_PLLSAI2ON) != 0U)
 8003ddc:	4b5a      	ldr	r3, [pc, #360]	; (8003f48 <HAL_RCC_OscConfig+0x7a8>)
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003de4:	2b00      	cmp	r3, #0
 8003de6:	d001      	beq.n	8003dec <HAL_RCC_OscConfig+0x64c>
#endif
            )
          {
            return HAL_ERROR;
 8003de8:	2301      	movs	r3, #1
 8003dea:	e0a9      	b.n	8003f40 <HAL_RCC_OscConfig+0x7a0>
          }
          else
#endif /* RCC_PLLSAI1_SUPPORT || RCC_PLLSAI2_SUPPORT */
          {
            /* Disable the main PLL. */
            __HAL_RCC_PLL_DISABLE();
 8003dec:	4b56      	ldr	r3, [pc, #344]	; (8003f48 <HAL_RCC_OscConfig+0x7a8>)
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	4a55      	ldr	r2, [pc, #340]	; (8003f48 <HAL_RCC_OscConfig+0x7a8>)
 8003df2:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003df6:	6013      	str	r3, [r2, #0]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003df8:	f7fd fc06 	bl	8001608 <HAL_GetTick>
 8003dfc:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003dfe:	e008      	b.n	8003e12 <HAL_RCC_OscConfig+0x672>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e00:	f7fd fc02 	bl	8001608 <HAL_GetTick>
 8003e04:	4602      	mov	r2, r0
 8003e06:	693b      	ldr	r3, [r7, #16]
 8003e08:	1ad3      	subs	r3, r2, r3
 8003e0a:	2b02      	cmp	r3, #2
 8003e0c:	d901      	bls.n	8003e12 <HAL_RCC_OscConfig+0x672>
              {
                return HAL_TIMEOUT;
 8003e0e:	2303      	movs	r3, #3
 8003e10:	e096      	b.n	8003f40 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003e12:	4b4d      	ldr	r3, [pc, #308]	; (8003f48 <HAL_RCC_OscConfig+0x7a8>)
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	d1f0      	bne.n	8003e00 <HAL_RCC_OscConfig+0x660>
              }
            }

            /* Configure the main PLL clock source, multiplication and division factors. */
#if defined(RCC_PLLP_SUPPORT)
            __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003e1e:	4b4a      	ldr	r3, [pc, #296]	; (8003f48 <HAL_RCC_OscConfig+0x7a8>)
 8003e20:	68da      	ldr	r2, [r3, #12]
 8003e22:	4b4a      	ldr	r3, [pc, #296]	; (8003f4c <HAL_RCC_OscConfig+0x7ac>)
 8003e24:	4013      	ands	r3, r2
 8003e26:	687a      	ldr	r2, [r7, #4]
 8003e28:	6ad1      	ldr	r1, [r2, #44]	; 0x2c
 8003e2a:	687a      	ldr	r2, [r7, #4]
 8003e2c:	6b12      	ldr	r2, [r2, #48]	; 0x30
 8003e2e:	3a01      	subs	r2, #1
 8003e30:	0112      	lsls	r2, r2, #4
 8003e32:	4311      	orrs	r1, r2
 8003e34:	687a      	ldr	r2, [r7, #4]
 8003e36:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8003e38:	0212      	lsls	r2, r2, #8
 8003e3a:	4311      	orrs	r1, r2
 8003e3c:	687a      	ldr	r2, [r7, #4]
 8003e3e:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8003e40:	0852      	lsrs	r2, r2, #1
 8003e42:	3a01      	subs	r2, #1
 8003e44:	0552      	lsls	r2, r2, #21
 8003e46:	4311      	orrs	r1, r2
 8003e48:	687a      	ldr	r2, [r7, #4]
 8003e4a:	6c12      	ldr	r2, [r2, #64]	; 0x40
 8003e4c:	0852      	lsrs	r2, r2, #1
 8003e4e:	3a01      	subs	r2, #1
 8003e50:	0652      	lsls	r2, r2, #25
 8003e52:	4311      	orrs	r1, r2
 8003e54:	687a      	ldr	r2, [r7, #4]
 8003e56:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8003e58:	0912      	lsrs	r2, r2, #4
 8003e5a:	0452      	lsls	r2, r2, #17
 8003e5c:	430a      	orrs	r2, r1
 8003e5e:	493a      	ldr	r1, [pc, #232]	; (8003f48 <HAL_RCC_OscConfig+0x7a8>)
 8003e60:	4313      	orrs	r3, r2
 8003e62:	60cb      	str	r3, [r1, #12]
                                 RCC_OscInitStruct->PLL.PLLQ,
                                 RCC_OscInitStruct->PLL.PLLR);
#endif

            /* Enable the main PLL. */
            __HAL_RCC_PLL_ENABLE();
 8003e64:	4b38      	ldr	r3, [pc, #224]	; (8003f48 <HAL_RCC_OscConfig+0x7a8>)
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a37      	ldr	r2, [pc, #220]	; (8003f48 <HAL_RCC_OscConfig+0x7a8>)
 8003e6a:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e6e:	6013      	str	r3, [r2, #0]

            /* Enable PLL System Clock output. */
            __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003e70:	4b35      	ldr	r3, [pc, #212]	; (8003f48 <HAL_RCC_OscConfig+0x7a8>)
 8003e72:	68db      	ldr	r3, [r3, #12]
 8003e74:	4a34      	ldr	r2, [pc, #208]	; (8003f48 <HAL_RCC_OscConfig+0x7a8>)
 8003e76:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003e7a:	60d3      	str	r3, [r2, #12]

            /* Get Start Tick*/
            tickstart = HAL_GetTick();
 8003e7c:	f7fd fbc4 	bl	8001608 <HAL_GetTick>
 8003e80:	6138      	str	r0, [r7, #16]

            /* Wait till PLL is ready */
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e82:	e008      	b.n	8003e96 <HAL_RCC_OscConfig+0x6f6>
            {
              if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003e84:	f7fd fbc0 	bl	8001608 <HAL_GetTick>
 8003e88:	4602      	mov	r2, r0
 8003e8a:	693b      	ldr	r3, [r7, #16]
 8003e8c:	1ad3      	subs	r3, r2, r3
 8003e8e:	2b02      	cmp	r3, #2
 8003e90:	d901      	bls.n	8003e96 <HAL_RCC_OscConfig+0x6f6>
              {
                return HAL_TIMEOUT;
 8003e92:	2303      	movs	r3, #3
 8003e94:	e054      	b.n	8003f40 <HAL_RCC_OscConfig+0x7a0>
            while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003e96:	4b2c      	ldr	r3, [pc, #176]	; (8003f48 <HAL_RCC_OscConfig+0x7a8>)
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003e9e:	2b00      	cmp	r3, #0
 8003ea0:	d0f0      	beq.n	8003e84 <HAL_RCC_OscConfig+0x6e4>
        if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ea2:	e04c      	b.n	8003f3e <HAL_RCC_OscConfig+0x79e>
          }
        }
        else
        {
          /* PLL is already used as System core clock */
          return HAL_ERROR;
 8003ea4:	2301      	movs	r3, #1
 8003ea6:	e04b      	b.n	8003f40 <HAL_RCC_OscConfig+0x7a0>
      }
      else
      {
        /* PLL configuration is unchanged */
        /* Re-enable PLL if it was disabled (ie. low power mode) */
        if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ea8:	4b27      	ldr	r3, [pc, #156]	; (8003f48 <HAL_RCC_OscConfig+0x7a8>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eb0:	2b00      	cmp	r3, #0
 8003eb2:	d144      	bne.n	8003f3e <HAL_RCC_OscConfig+0x79e>
        {
          /* Enable the main PLL. */
          __HAL_RCC_PLL_ENABLE();
 8003eb4:	4b24      	ldr	r3, [pc, #144]	; (8003f48 <HAL_RCC_OscConfig+0x7a8>)
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	4a23      	ldr	r2, [pc, #140]	; (8003f48 <HAL_RCC_OscConfig+0x7a8>)
 8003eba:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003ebe:	6013      	str	r3, [r2, #0]

          /* Enable PLL System Clock output. */
          __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SYSCLK);
 8003ec0:	4b21      	ldr	r3, [pc, #132]	; (8003f48 <HAL_RCC_OscConfig+0x7a8>)
 8003ec2:	68db      	ldr	r3, [r3, #12]
 8003ec4:	4a20      	ldr	r2, [pc, #128]	; (8003f48 <HAL_RCC_OscConfig+0x7a8>)
 8003ec6:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8003eca:	60d3      	str	r3, [r2, #12]

          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003ecc:	f7fd fb9c 	bl	8001608 <HAL_GetTick>
 8003ed0:	6138      	str	r0, [r7, #16]

          /* Wait till PLL is ready */
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ed2:	e008      	b.n	8003ee6 <HAL_RCC_OscConfig+0x746>
          {
            if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003ed4:	f7fd fb98 	bl	8001608 <HAL_GetTick>
 8003ed8:	4602      	mov	r2, r0
 8003eda:	693b      	ldr	r3, [r7, #16]
 8003edc:	1ad3      	subs	r3, r2, r3
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d901      	bls.n	8003ee6 <HAL_RCC_OscConfig+0x746>
            {
              return HAL_TIMEOUT;
 8003ee2:	2303      	movs	r3, #3
 8003ee4:	e02c      	b.n	8003f40 <HAL_RCC_OscConfig+0x7a0>
          while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003ee6:	4b18      	ldr	r3, [pc, #96]	; (8003f48 <HAL_RCC_OscConfig+0x7a8>)
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003eee:	2b00      	cmp	r3, #0
 8003ef0:	d0f0      	beq.n	8003ed4 <HAL_RCC_OscConfig+0x734>
 8003ef2:	e024      	b.n	8003f3e <HAL_RCC_OscConfig+0x79e>
      }
    }
    else
    {
      /* Check that PLL is not used as system clock or not */
      if(sysclk_source != RCC_CFGR_SWS_PLL)
 8003ef4:	69bb      	ldr	r3, [r7, #24]
 8003ef6:	2b0c      	cmp	r3, #12
 8003ef8:	d01f      	beq.n	8003f3a <HAL_RCC_OscConfig+0x79a>
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003efa:	4b13      	ldr	r3, [pc, #76]	; (8003f48 <HAL_RCC_OscConfig+0x7a8>)
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	4a12      	ldr	r2, [pc, #72]	; (8003f48 <HAL_RCC_OscConfig+0x7a8>)
 8003f00:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8003f04:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003f06:	f7fd fb7f 	bl	8001608 <HAL_GetTick>
 8003f0a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f0c:	e008      	b.n	8003f20 <HAL_RCC_OscConfig+0x780>
        {
          if((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003f0e:	f7fd fb7b 	bl	8001608 <HAL_GetTick>
 8003f12:	4602      	mov	r2, r0
 8003f14:	693b      	ldr	r3, [r7, #16]
 8003f16:	1ad3      	subs	r3, r2, r3
 8003f18:	2b02      	cmp	r3, #2
 8003f1a:	d901      	bls.n	8003f20 <HAL_RCC_OscConfig+0x780>
          {
            return HAL_TIMEOUT;
 8003f1c:	2303      	movs	r3, #3
 8003f1e:	e00f      	b.n	8003f40 <HAL_RCC_OscConfig+0x7a0>
        while(READ_BIT(RCC->CR, RCC_CR_PLLRDY) != 0U)
 8003f20:	4b09      	ldr	r3, [pc, #36]	; (8003f48 <HAL_RCC_OscConfig+0x7a8>)
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003f28:	2b00      	cmp	r3, #0
 8003f2a:	d1f0      	bne.n	8003f0e <HAL_RCC_OscConfig+0x76e>
          }
        }
        /* Unselect main PLL clock source and disable main PLL outputs to save power */
#if defined(RCC_PLLSAI2_SUPPORT)
        RCC->PLLCFGR &= ~(RCC_PLLCFGR_PLLSRC | RCC_PLL_SYSCLK | RCC_PLL_48M1CLK | RCC_PLL_SAI3CLK);
 8003f2c:	4b06      	ldr	r3, [pc, #24]	; (8003f48 <HAL_RCC_OscConfig+0x7a8>)
 8003f2e:	68da      	ldr	r2, [r3, #12]
 8003f30:	4905      	ldr	r1, [pc, #20]	; (8003f48 <HAL_RCC_OscConfig+0x7a8>)
 8003f32:	4b07      	ldr	r3, [pc, #28]	; (8003f50 <HAL_RCC_OscConfig+0x7b0>)
 8003f34:	4013      	ands	r3, r2
 8003f36:	60cb      	str	r3, [r1, #12]
 8003f38:	e001      	b.n	8003f3e <HAL_RCC_OscConfig+0x79e>
#endif /* RCC_PLLSAI2_SUPPORT */
      }
      else
      {
        /* PLL is already used as System core clock */
        return HAL_ERROR;
 8003f3a:	2301      	movs	r3, #1
 8003f3c:	e000      	b.n	8003f40 <HAL_RCC_OscConfig+0x7a0>
      }
    }
  }
  return HAL_OK;
 8003f3e:	2300      	movs	r3, #0
}
 8003f40:	4618      	mov	r0, r3
 8003f42:	3720      	adds	r7, #32
 8003f44:	46bd      	mov	sp, r7
 8003f46:	bd80      	pop	{r7, pc}
 8003f48:	40021000 	.word	0x40021000
 8003f4c:	f99d808c 	.word	0xf99d808c
 8003f50:	feeefffc 	.word	0xfeeefffc

08003f54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b084      	sub	sp, #16
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
 8003f5c:	6039      	str	r1, [r7, #0]
  uint32_t hpre = RCC_SYSCLK_DIV1;
#endif
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	2b00      	cmp	r3, #0
 8003f62:	d101      	bne.n	8003f68 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003f64:	2301      	movs	r3, #1
 8003f66:	e0e7      	b.n	8004138 <HAL_RCC_ClockConfig+0x1e4>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8003f68:	4b75      	ldr	r3, [pc, #468]	; (8004140 <HAL_RCC_ClockConfig+0x1ec>)
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	f003 0307 	and.w	r3, r3, #7
 8003f70:	683a      	ldr	r2, [r7, #0]
 8003f72:	429a      	cmp	r2, r3
 8003f74:	d910      	bls.n	8003f98 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003f76:	4b72      	ldr	r3, [pc, #456]	; (8004140 <HAL_RCC_ClockConfig+0x1ec>)
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	f023 0207 	bic.w	r2, r3, #7
 8003f7e:	4970      	ldr	r1, [pc, #448]	; (8004140 <HAL_RCC_ClockConfig+0x1ec>)
 8003f80:	683b      	ldr	r3, [r7, #0]
 8003f82:	4313      	orrs	r3, r2
 8003f84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003f86:	4b6e      	ldr	r3, [pc, #440]	; (8004140 <HAL_RCC_ClockConfig+0x1ec>)
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	f003 0307 	and.w	r3, r3, #7
 8003f8e:	683a      	ldr	r2, [r7, #0]
 8003f90:	429a      	cmp	r2, r3
 8003f92:	d001      	beq.n	8003f98 <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003f94:	2301      	movs	r3, #1
 8003f96:	e0cf      	b.n	8004138 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*----------------- HCLK Configuration prior to SYSCLK----------------------*/
  /* Apply higher HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is increased */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f003 0302 	and.w	r3, r3, #2
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d010      	beq.n	8003fc6 <HAL_RCC_ClockConfig+0x72>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));

    if(RCC_ClkInitStruct->AHBCLKDivider > READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	689a      	ldr	r2, [r3, #8]
 8003fa8:	4b66      	ldr	r3, [pc, #408]	; (8004144 <HAL_RCC_ClockConfig+0x1f0>)
 8003faa:	689b      	ldr	r3, [r3, #8]
 8003fac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d908      	bls.n	8003fc6 <HAL_RCC_ClockConfig+0x72>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003fb4:	4b63      	ldr	r3, [pc, #396]	; (8004144 <HAL_RCC_ClockConfig+0x1f0>)
 8003fb6:	689b      	ldr	r3, [r3, #8]
 8003fb8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	4960      	ldr	r1, [pc, #384]	; (8004144 <HAL_RCC_ClockConfig+0x1f0>)
 8003fc2:	4313      	orrs	r3, r2
 8003fc4:	608b      	str	r3, [r1, #8]
    }
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	f003 0301 	and.w	r3, r3, #1
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d04c      	beq.n	800406c <HAL_RCC_ClockConfig+0x118>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* PLL is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	685b      	ldr	r3, [r3, #4]
 8003fd6:	2b03      	cmp	r3, #3
 8003fd8:	d107      	bne.n	8003fea <HAL_RCC_ClockConfig+0x96>
    {
      /* Check the PLL ready flag */
      if(READ_BIT(RCC->CR, RCC_CR_PLLRDY) == 0U)
 8003fda:	4b5a      	ldr	r3, [pc, #360]	; (8004144 <HAL_RCC_ClockConfig+0x1f0>)
 8003fdc:	681b      	ldr	r3, [r3, #0]
 8003fde:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003fe2:	2b00      	cmp	r3, #0
 8003fe4:	d121      	bne.n	800402a <HAL_RCC_ClockConfig+0xd6>
      {
        return HAL_ERROR;
 8003fe6:	2301      	movs	r3, #1
 8003fe8:	e0a6      	b.n	8004138 <HAL_RCC_ClockConfig+0x1e4>
#endif
    }
    else
    {
      /* HSE is selected as System Clock Source */
      if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	685b      	ldr	r3, [r3, #4]
 8003fee:	2b02      	cmp	r3, #2
 8003ff0:	d107      	bne.n	8004002 <HAL_RCC_ClockConfig+0xae>
      {
        /* Check the HSE ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSERDY) == 0U)
 8003ff2:	4b54      	ldr	r3, [pc, #336]	; (8004144 <HAL_RCC_ClockConfig+0x1f0>)
 8003ff4:	681b      	ldr	r3, [r3, #0]
 8003ff6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d115      	bne.n	800402a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8003ffe:	2301      	movs	r3, #1
 8004000:	e09a      	b.n	8004138 <HAL_RCC_ClockConfig+0x1e4>
        }
      }
      /* MSI is selected as System Clock Source */
      else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_MSI)
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	685b      	ldr	r3, [r3, #4]
 8004006:	2b00      	cmp	r3, #0
 8004008:	d107      	bne.n	800401a <HAL_RCC_ClockConfig+0xc6>
      {
        /* Check the MSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_MSIRDY) == 0U)
 800400a:	4b4e      	ldr	r3, [pc, #312]	; (8004144 <HAL_RCC_ClockConfig+0x1f0>)
 800400c:	681b      	ldr	r3, [r3, #0]
 800400e:	f003 0302 	and.w	r3, r3, #2
 8004012:	2b00      	cmp	r3, #0
 8004014:	d109      	bne.n	800402a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004016:	2301      	movs	r3, #1
 8004018:	e08e      	b.n	8004138 <HAL_RCC_ClockConfig+0x1e4>
      }
      /* HSI is selected as System Clock Source */
      else
      {
        /* Check the HSI ready flag */
        if(READ_BIT(RCC->CR, RCC_CR_HSIRDY) == 0U)
 800401a:	4b4a      	ldr	r3, [pc, #296]	; (8004144 <HAL_RCC_ClockConfig+0x1f0>)
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004022:	2b00      	cmp	r3, #0
 8004024:	d101      	bne.n	800402a <HAL_RCC_ClockConfig+0xd6>
        {
          return HAL_ERROR;
 8004026:	2301      	movs	r3, #1
 8004028:	e086      	b.n	8004138 <HAL_RCC_ClockConfig+0x1e4>
      }
#endif

    }

    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 800402a:	4b46      	ldr	r3, [pc, #280]	; (8004144 <HAL_RCC_ClockConfig+0x1f0>)
 800402c:	689b      	ldr	r3, [r3, #8]
 800402e:	f023 0203 	bic.w	r2, r3, #3
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	685b      	ldr	r3, [r3, #4]
 8004036:	4943      	ldr	r1, [pc, #268]	; (8004144 <HAL_RCC_ClockConfig+0x1f0>)
 8004038:	4313      	orrs	r3, r2
 800403a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800403c:	f7fd fae4 	bl	8001608 <HAL_GetTick>
 8004040:	60f8      	str	r0, [r7, #12]

    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004042:	e00a      	b.n	800405a <HAL_RCC_ClockConfig+0x106>
    {
      if((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004044:	f7fd fae0 	bl	8001608 <HAL_GetTick>
 8004048:	4602      	mov	r2, r0
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	1ad3      	subs	r3, r2, r3
 800404e:	f241 3288 	movw	r2, #5000	; 0x1388
 8004052:	4293      	cmp	r3, r2
 8004054:	d901      	bls.n	800405a <HAL_RCC_ClockConfig+0x106>
      {
        return HAL_TIMEOUT;
 8004056:	2303      	movs	r3, #3
 8004058:	e06e      	b.n	8004138 <HAL_RCC_ClockConfig+0x1e4>
    while(__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800405a:	4b3a      	ldr	r3, [pc, #232]	; (8004144 <HAL_RCC_ClockConfig+0x1f0>)
 800405c:	689b      	ldr	r3, [r3, #8]
 800405e:	f003 020c 	and.w	r2, r3, #12
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	009b      	lsls	r3, r3, #2
 8004068:	429a      	cmp	r2, r3
 800406a:	d1eb      	bne.n	8004044 <HAL_RCC_ClockConfig+0xf0>
  }
#endif

  /*----------------- HCLK Configuration after SYSCLK-------------------------*/
  /* Apply lower HCLK prescaler request here to ensure CPU clock is not of of spec when SYSCLK is set */
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f003 0302 	and.w	r3, r3, #2
 8004074:	2b00      	cmp	r3, #0
 8004076:	d010      	beq.n	800409a <HAL_RCC_ClockConfig+0x146>
  {
    if(RCC_ClkInitStruct->AHBCLKDivider < READ_BIT(RCC->CFGR, RCC_CFGR_HPRE))
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	689a      	ldr	r2, [r3, #8]
 800407c:	4b31      	ldr	r3, [pc, #196]	; (8004144 <HAL_RCC_ClockConfig+0x1f0>)
 800407e:	689b      	ldr	r3, [r3, #8]
 8004080:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004084:	429a      	cmp	r2, r3
 8004086:	d208      	bcs.n	800409a <HAL_RCC_ClockConfig+0x146>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004088:	4b2e      	ldr	r3, [pc, #184]	; (8004144 <HAL_RCC_ClockConfig+0x1f0>)
 800408a:	689b      	ldr	r3, [r3, #8]
 800408c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8004090:	687b      	ldr	r3, [r7, #4]
 8004092:	689b      	ldr	r3, [r3, #8]
 8004094:	492b      	ldr	r1, [pc, #172]	; (8004144 <HAL_RCC_ClockConfig+0x1f0>)
 8004096:	4313      	orrs	r3, r2
 8004098:	608b      	str	r3, [r1, #8]
    }
  }

  /* Allow decreasing of the number of wait states (because of lower CPU frequency expected) */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800409a:	4b29      	ldr	r3, [pc, #164]	; (8004140 <HAL_RCC_ClockConfig+0x1ec>)
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	f003 0307 	and.w	r3, r3, #7
 80040a2:	683a      	ldr	r2, [r7, #0]
 80040a4:	429a      	cmp	r2, r3
 80040a6:	d210      	bcs.n	80040ca <HAL_RCC_ClockConfig+0x176>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80040a8:	4b25      	ldr	r3, [pc, #148]	; (8004140 <HAL_RCC_ClockConfig+0x1ec>)
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	f023 0207 	bic.w	r2, r3, #7
 80040b0:	4923      	ldr	r1, [pc, #140]	; (8004140 <HAL_RCC_ClockConfig+0x1ec>)
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	4313      	orrs	r3, r2
 80040b6:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80040b8:	4b21      	ldr	r3, [pc, #132]	; (8004140 <HAL_RCC_ClockConfig+0x1ec>)
 80040ba:	681b      	ldr	r3, [r3, #0]
 80040bc:	f003 0307 	and.w	r3, r3, #7
 80040c0:	683a      	ldr	r2, [r7, #0]
 80040c2:	429a      	cmp	r2, r3
 80040c4:	d001      	beq.n	80040ca <HAL_RCC_ClockConfig+0x176>
    {
      return HAL_ERROR;
 80040c6:	2301      	movs	r3, #1
 80040c8:	e036      	b.n	8004138 <HAL_RCC_ClockConfig+0x1e4>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	f003 0304 	and.w	r3, r3, #4
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d008      	beq.n	80040e8 <HAL_RCC_ClockConfig+0x194>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80040d6:	4b1b      	ldr	r3, [pc, #108]	; (8004144 <HAL_RCC_ClockConfig+0x1f0>)
 80040d8:	689b      	ldr	r3, [r3, #8]
 80040da:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	68db      	ldr	r3, [r3, #12]
 80040e2:	4918      	ldr	r1, [pc, #96]	; (8004144 <HAL_RCC_ClockConfig+0x1f0>)
 80040e4:	4313      	orrs	r3, r2
 80040e6:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f003 0308 	and.w	r3, r3, #8
 80040f0:	2b00      	cmp	r3, #0
 80040f2:	d009      	beq.n	8004108 <HAL_RCC_ClockConfig+0x1b4>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80040f4:	4b13      	ldr	r3, [pc, #76]	; (8004144 <HAL_RCC_ClockConfig+0x1f0>)
 80040f6:	689b      	ldr	r3, [r3, #8]
 80040f8:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	691b      	ldr	r3, [r3, #16]
 8004100:	00db      	lsls	r3, r3, #3
 8004102:	4910      	ldr	r1, [pc, #64]	; (8004144 <HAL_RCC_ClockConfig+0x1f0>)
 8004104:	4313      	orrs	r3, r2
 8004106:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> (AHBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos] & 0x1FU);
 8004108:	f000 f824 	bl	8004154 <HAL_RCC_GetSysClockFreq>
 800410c:	4602      	mov	r2, r0
 800410e:	4b0d      	ldr	r3, [pc, #52]	; (8004144 <HAL_RCC_ClockConfig+0x1f0>)
 8004110:	689b      	ldr	r3, [r3, #8]
 8004112:	091b      	lsrs	r3, r3, #4
 8004114:	f003 030f 	and.w	r3, r3, #15
 8004118:	490b      	ldr	r1, [pc, #44]	; (8004148 <HAL_RCC_ClockConfig+0x1f4>)
 800411a:	5ccb      	ldrb	r3, [r1, r3]
 800411c:	f003 031f 	and.w	r3, r3, #31
 8004120:	fa22 f303 	lsr.w	r3, r2, r3
 8004124:	4a09      	ldr	r2, [pc, #36]	; (800414c <HAL_RCC_ClockConfig+0x1f8>)
 8004126:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 8004128:	4b09      	ldr	r3, [pc, #36]	; (8004150 <HAL_RCC_ClockConfig+0x1fc>)
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	4618      	mov	r0, r3
 800412e:	f7fd fa1b 	bl	8001568 <HAL_InitTick>
 8004132:	4603      	mov	r3, r0
 8004134:	72fb      	strb	r3, [r7, #11]

  return status;
 8004136:	7afb      	ldrb	r3, [r7, #11]
}
 8004138:	4618      	mov	r0, r3
 800413a:	3710      	adds	r7, #16
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}
 8004140:	40022000 	.word	0x40022000
 8004144:	40021000 	.word	0x40021000
 8004148:	08008d3c 	.word	0x08008d3c
 800414c:	20000000 	.word	0x20000000
 8004150:	20000004 	.word	0x20000004

08004154 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004154:	b480      	push	{r7}
 8004156:	b089      	sub	sp, #36	; 0x24
 8004158:	af00      	add	r7, sp, #0
  uint32_t msirange = 0U, sysclockfreq = 0U;
 800415a:	2300      	movs	r3, #0
 800415c:	61fb      	str	r3, [r7, #28]
 800415e:	2300      	movs	r3, #0
 8004160:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, pllsource, pllr, pllm;    /* no init needed */
  uint32_t sysclk_source, pll_oscsource;

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8004162:	4b3e      	ldr	r3, [pc, #248]	; (800425c <HAL_RCC_GetSysClockFreq+0x108>)
 8004164:	689b      	ldr	r3, [r3, #8]
 8004166:	f003 030c 	and.w	r3, r3, #12
 800416a:	613b      	str	r3, [r7, #16]
  pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 800416c:	4b3b      	ldr	r3, [pc, #236]	; (800425c <HAL_RCC_GetSysClockFreq+0x108>)
 800416e:	68db      	ldr	r3, [r3, #12]
 8004170:	f003 0303 	and.w	r3, r3, #3
 8004174:	60fb      	str	r3, [r7, #12]

  if((sysclk_source == RCC_CFGR_SWS_MSI) ||
 8004176:	693b      	ldr	r3, [r7, #16]
 8004178:	2b00      	cmp	r3, #0
 800417a:	d005      	beq.n	8004188 <HAL_RCC_GetSysClockFreq+0x34>
 800417c:	693b      	ldr	r3, [r7, #16]
 800417e:	2b0c      	cmp	r3, #12
 8004180:	d121      	bne.n	80041c6 <HAL_RCC_GetSysClockFreq+0x72>
     ((sysclk_source == RCC_CFGR_SWS_PLL) && (pll_oscsource == RCC_PLLSOURCE_MSI)))
 8004182:	68fb      	ldr	r3, [r7, #12]
 8004184:	2b01      	cmp	r3, #1
 8004186:	d11e      	bne.n	80041c6 <HAL_RCC_GetSysClockFreq+0x72>
  {
    /* MSI or PLL with MSI source used as system clock source */

    /* Get SYSCLK source */
    if(READ_BIT(RCC->CR, RCC_CR_MSIRGSEL) == 0U)
 8004188:	4b34      	ldr	r3, [pc, #208]	; (800425c <HAL_RCC_GetSysClockFreq+0x108>)
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	f003 0308 	and.w	r3, r3, #8
 8004190:	2b00      	cmp	r3, #0
 8004192:	d107      	bne.n	80041a4 <HAL_RCC_GetSysClockFreq+0x50>
    { /* MSISRANGE from RCC_CSR applies */
      msirange = READ_BIT(RCC->CSR, RCC_CSR_MSISRANGE) >> RCC_CSR_MSISRANGE_Pos;
 8004194:	4b31      	ldr	r3, [pc, #196]	; (800425c <HAL_RCC_GetSysClockFreq+0x108>)
 8004196:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800419a:	0a1b      	lsrs	r3, r3, #8
 800419c:	f003 030f 	and.w	r3, r3, #15
 80041a0:	61fb      	str	r3, [r7, #28]
 80041a2:	e005      	b.n	80041b0 <HAL_RCC_GetSysClockFreq+0x5c>
    }
    else
    { /* MSIRANGE from RCC_CR applies */
      msirange = READ_BIT(RCC->CR, RCC_CR_MSIRANGE) >> RCC_CR_MSIRANGE_Pos;
 80041a4:	4b2d      	ldr	r3, [pc, #180]	; (800425c <HAL_RCC_GetSysClockFreq+0x108>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	091b      	lsrs	r3, r3, #4
 80041aa:	f003 030f 	and.w	r3, r3, #15
 80041ae:	61fb      	str	r3, [r7, #28]
    }
    /*MSI frequency range in HZ*/
    msirange = MSIRangeTable[msirange];
 80041b0:	4a2b      	ldr	r2, [pc, #172]	; (8004260 <HAL_RCC_GetSysClockFreq+0x10c>)
 80041b2:	69fb      	ldr	r3, [r7, #28]
 80041b4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80041b8:	61fb      	str	r3, [r7, #28]

    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041ba:	693b      	ldr	r3, [r7, #16]
 80041bc:	2b00      	cmp	r3, #0
 80041be:	d10d      	bne.n	80041dc <HAL_RCC_GetSysClockFreq+0x88>
    {
      /* MSI used as system clock source */
      sysclockfreq = msirange;
 80041c0:	69fb      	ldr	r3, [r7, #28]
 80041c2:	61bb      	str	r3, [r7, #24]
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80041c4:	e00a      	b.n	80041dc <HAL_RCC_GetSysClockFreq+0x88>
    }
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSI)
 80041c6:	693b      	ldr	r3, [r7, #16]
 80041c8:	2b04      	cmp	r3, #4
 80041ca:	d102      	bne.n	80041d2 <HAL_RCC_GetSysClockFreq+0x7e>
  {
    /* HSI used as system clock source */
    sysclockfreq = HSI_VALUE;
 80041cc:	4b25      	ldr	r3, [pc, #148]	; (8004264 <HAL_RCC_GetSysClockFreq+0x110>)
 80041ce:	61bb      	str	r3, [r7, #24]
 80041d0:	e004      	b.n	80041dc <HAL_RCC_GetSysClockFreq+0x88>
  }
  else if(sysclk_source == RCC_CFGR_SWS_HSE)
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	2b08      	cmp	r3, #8
 80041d6:	d101      	bne.n	80041dc <HAL_RCC_GetSysClockFreq+0x88>
  {
    /* HSE used as system clock source */
    sysclockfreq = HSE_VALUE;
 80041d8:	4b23      	ldr	r3, [pc, #140]	; (8004268 <HAL_RCC_GetSysClockFreq+0x114>)
 80041da:	61bb      	str	r3, [r7, #24]
  else
  {
    /* unexpected case: sysclockfreq at 0 */
  }

  if(sysclk_source == RCC_CFGR_SWS_PLL)
 80041dc:	693b      	ldr	r3, [r7, #16]
 80041de:	2b0c      	cmp	r3, #12
 80041e0:	d134      	bne.n	800424c <HAL_RCC_GetSysClockFreq+0xf8>
    /* PLL used as system clock  source */

    /* PLL_VCO = (HSE_VALUE or HSI_VALUE or MSI_VALUE) * PLLN / PLLM
    SYSCLK = PLL_VCO / PLLR
    */
    pllsource = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC);
 80041e2:	4b1e      	ldr	r3, [pc, #120]	; (800425c <HAL_RCC_GetSysClockFreq+0x108>)
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	f003 0303 	and.w	r3, r3, #3
 80041ea:	60bb      	str	r3, [r7, #8]

    switch (pllsource)
 80041ec:	68bb      	ldr	r3, [r7, #8]
 80041ee:	2b02      	cmp	r3, #2
 80041f0:	d003      	beq.n	80041fa <HAL_RCC_GetSysClockFreq+0xa6>
 80041f2:	68bb      	ldr	r3, [r7, #8]
 80041f4:	2b03      	cmp	r3, #3
 80041f6:	d003      	beq.n	8004200 <HAL_RCC_GetSysClockFreq+0xac>
 80041f8:	e005      	b.n	8004206 <HAL_RCC_GetSysClockFreq+0xb2>
    {
    case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */
      pllvco = HSI_VALUE;
 80041fa:	4b1a      	ldr	r3, [pc, #104]	; (8004264 <HAL_RCC_GetSysClockFreq+0x110>)
 80041fc:	617b      	str	r3, [r7, #20]
      break;
 80041fe:	e005      	b.n	800420c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
      pllvco = HSE_VALUE;
 8004200:	4b19      	ldr	r3, [pc, #100]	; (8004268 <HAL_RCC_GetSysClockFreq+0x114>)
 8004202:	617b      	str	r3, [r7, #20]
      break;
 8004204:	e002      	b.n	800420c <HAL_RCC_GetSysClockFreq+0xb8>

    case RCC_PLLSOURCE_MSI:  /* MSI used as PLL clock source */
    default:
      pllvco = msirange;
 8004206:	69fb      	ldr	r3, [r7, #28]
 8004208:	617b      	str	r3, [r7, #20]
      break;
 800420a:	bf00      	nop
    }
    pllm = (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U ;
 800420c:	4b13      	ldr	r3, [pc, #76]	; (800425c <HAL_RCC_GetSysClockFreq+0x108>)
 800420e:	68db      	ldr	r3, [r3, #12]
 8004210:	091b      	lsrs	r3, r3, #4
 8004212:	f003 0307 	and.w	r3, r3, #7
 8004216:	3301      	adds	r3, #1
 8004218:	607b      	str	r3, [r7, #4]
    pllvco = (pllvco * (READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)) / pllm;
 800421a:	4b10      	ldr	r3, [pc, #64]	; (800425c <HAL_RCC_GetSysClockFreq+0x108>)
 800421c:	68db      	ldr	r3, [r3, #12]
 800421e:	0a1b      	lsrs	r3, r3, #8
 8004220:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004224:	697a      	ldr	r2, [r7, #20]
 8004226:	fb02 f203 	mul.w	r2, r2, r3
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	fbb2 f3f3 	udiv	r3, r2, r3
 8004230:	617b      	str	r3, [r7, #20]
    pllr = ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos) + 1U ) * 2U;
 8004232:	4b0a      	ldr	r3, [pc, #40]	; (800425c <HAL_RCC_GetSysClockFreq+0x108>)
 8004234:	68db      	ldr	r3, [r3, #12]
 8004236:	0e5b      	lsrs	r3, r3, #25
 8004238:	f003 0303 	and.w	r3, r3, #3
 800423c:	3301      	adds	r3, #1
 800423e:	005b      	lsls	r3, r3, #1
 8004240:	603b      	str	r3, [r7, #0]
    sysclockfreq = pllvco / pllr;
 8004242:	697a      	ldr	r2, [r7, #20]
 8004244:	683b      	ldr	r3, [r7, #0]
 8004246:	fbb2 f3f3 	udiv	r3, r2, r3
 800424a:	61bb      	str	r3, [r7, #24]
  }

  return sysclockfreq;
 800424c:	69bb      	ldr	r3, [r7, #24]
}
 800424e:	4618      	mov	r0, r3
 8004250:	3724      	adds	r7, #36	; 0x24
 8004252:	46bd      	mov	sp, r7
 8004254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004258:	4770      	bx	lr
 800425a:	bf00      	nop
 800425c:	40021000 	.word	0x40021000
 8004260:	08008d54 	.word	0x08008d54
 8004264:	00f42400 	.word	0x00f42400
 8004268:	007a1200 	.word	0x007a1200

0800426c <HAL_RCC_GetHCLKFreq>:
  *
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency in Hz
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800426c:	b480      	push	{r7}
 800426e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004270:	4b03      	ldr	r3, [pc, #12]	; (8004280 <HAL_RCC_GetHCLKFreq+0x14>)
 8004272:	681b      	ldr	r3, [r3, #0]
}
 8004274:	4618      	mov	r0, r3
 8004276:	46bd      	mov	sp, r7
 8004278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427c:	4770      	bx	lr
 800427e:	bf00      	nop
 8004280:	20000000 	.word	0x20000000

08004284 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos] & 0x1FU));
 8004288:	f7ff fff0 	bl	800426c <HAL_RCC_GetHCLKFreq>
 800428c:	4602      	mov	r2, r0
 800428e:	4b06      	ldr	r3, [pc, #24]	; (80042a8 <HAL_RCC_GetPCLK1Freq+0x24>)
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	0a1b      	lsrs	r3, r3, #8
 8004294:	f003 0307 	and.w	r3, r3, #7
 8004298:	4904      	ldr	r1, [pc, #16]	; (80042ac <HAL_RCC_GetPCLK1Freq+0x28>)
 800429a:	5ccb      	ldrb	r3, [r1, r3]
 800429c:	f003 031f 	and.w	r3, r3, #31
 80042a0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042a4:	4618      	mov	r0, r3
 80042a6:	bd80      	pop	{r7, pc}
 80042a8:	40021000 	.word	0x40021000
 80042ac:	08008d4c 	.word	0x08008d4c

080042b0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency in Hz
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80042b0:	b580      	push	{r7, lr}
 80042b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> (APBPrescTable[READ_BIT(RCC->CFGR, RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos] & 0x1FU));
 80042b4:	f7ff ffda 	bl	800426c <HAL_RCC_GetHCLKFreq>
 80042b8:	4602      	mov	r2, r0
 80042ba:	4b06      	ldr	r3, [pc, #24]	; (80042d4 <HAL_RCC_GetPCLK2Freq+0x24>)
 80042bc:	689b      	ldr	r3, [r3, #8]
 80042be:	0adb      	lsrs	r3, r3, #11
 80042c0:	f003 0307 	and.w	r3, r3, #7
 80042c4:	4904      	ldr	r1, [pc, #16]	; (80042d8 <HAL_RCC_GetPCLK2Freq+0x28>)
 80042c6:	5ccb      	ldrb	r3, [r1, r3]
 80042c8:	f003 031f 	and.w	r3, r3, #31
 80042cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80042d0:	4618      	mov	r0, r3
 80042d2:	bd80      	pop	{r7, pc}
 80042d4:	40021000 	.word	0x40021000
 80042d8:	08008d4c 	.word	0x08008d4c

080042dc <RCC_SetFlashLatencyFromMSIRange>:
            voltage range.
  * @param  msirange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_11
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t msirange)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b086      	sub	sp, #24
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 80042e4:	2300      	movs	r3, #0
 80042e6:	613b      	str	r3, [r7, #16]

  if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 80042e8:	4b2a      	ldr	r3, [pc, #168]	; (8004394 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042ea:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80042ec:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80042f0:	2b00      	cmp	r3, #0
 80042f2:	d003      	beq.n	80042fc <RCC_SetFlashLatencyFromMSIRange+0x20>
  {
    vos = HAL_PWREx_GetVoltageRange();
 80042f4:	f7ff f924 	bl	8003540 <HAL_PWREx_GetVoltageRange>
 80042f8:	6178      	str	r0, [r7, #20]
 80042fa:	e014      	b.n	8004326 <RCC_SetFlashLatencyFromMSIRange+0x4a>
  }
  else
  {
    __HAL_RCC_PWR_CLK_ENABLE();
 80042fc:	4b25      	ldr	r3, [pc, #148]	; (8004394 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 80042fe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004300:	4a24      	ldr	r2, [pc, #144]	; (8004394 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004302:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8004306:	6593      	str	r3, [r2, #88]	; 0x58
 8004308:	4b22      	ldr	r3, [pc, #136]	; (8004394 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800430a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800430c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004310:	60fb      	str	r3, [r7, #12]
 8004312:	68fb      	ldr	r3, [r7, #12]
    vos = HAL_PWREx_GetVoltageRange();
 8004314:	f7ff f914 	bl	8003540 <HAL_PWREx_GetVoltageRange>
 8004318:	6178      	str	r0, [r7, #20]
    __HAL_RCC_PWR_CLK_DISABLE();
 800431a:	4b1e      	ldr	r3, [pc, #120]	; (8004394 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800431c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800431e:	4a1d      	ldr	r2, [pc, #116]	; (8004394 <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 8004320:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004324:	6593      	str	r3, [r2, #88]	; 0x58
  }

  if(vos == PWR_REGULATOR_VOLTAGE_SCALE1)
 8004326:	697b      	ldr	r3, [r7, #20]
 8004328:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800432c:	d10b      	bne.n	8004346 <RCC_SetFlashLatencyFromMSIRange+0x6a>
  {
    if(msirange > RCC_MSIRANGE_8)
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	2b80      	cmp	r3, #128	; 0x80
 8004332:	d919      	bls.n	8004368 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    {
      /* MSI > 16Mhz */
      if(msirange > RCC_MSIRANGE_10)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	2ba0      	cmp	r3, #160	; 0xa0
 8004338:	d902      	bls.n	8004340 <RCC_SetFlashLatencyFromMSIRange+0x64>
      {
        /* MSI 48Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 800433a:	2302      	movs	r3, #2
 800433c:	613b      	str	r3, [r7, #16]
 800433e:	e013      	b.n	8004368 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else
      {
        /* MSI 24Mhz or 32Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004340:	2301      	movs	r3, #1
 8004342:	613b      	str	r3, [r7, #16]
 8004344:	e010      	b.n	8004368 <RCC_SetFlashLatencyFromMSIRange+0x8c>
        latency = FLASH_LATENCY_1; /* 1WS */
      }
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#else
    if(msirange > RCC_MSIRANGE_8)
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2b80      	cmp	r3, #128	; 0x80
 800434a:	d902      	bls.n	8004352 <RCC_SetFlashLatencyFromMSIRange+0x76>
    {
      /* MSI > 16Mhz */
      latency = FLASH_LATENCY_3; /* 3WS */
 800434c:	2303      	movs	r3, #3
 800434e:	613b      	str	r3, [r7, #16]
 8004350:	e00a      	b.n	8004368 <RCC_SetFlashLatencyFromMSIRange+0x8c>
    }
    else
    {
      if(msirange == RCC_MSIRANGE_8)
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	2b80      	cmp	r3, #128	; 0x80
 8004356:	d102      	bne.n	800435e <RCC_SetFlashLatencyFromMSIRange+0x82>
      {
        /* MSI 16Mhz */
        latency = FLASH_LATENCY_2; /* 2WS */
 8004358:	2302      	movs	r3, #2
 800435a:	613b      	str	r3, [r7, #16]
 800435c:	e004      	b.n	8004368 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      }
      else if(msirange == RCC_MSIRANGE_7)
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	2b70      	cmp	r3, #112	; 0x70
 8004362:	d101      	bne.n	8004368 <RCC_SetFlashLatencyFromMSIRange+0x8c>
      {
        /* MSI 8Mhz */
        latency = FLASH_LATENCY_1; /* 1WS */
 8004364:	2301      	movs	r3, #1
 8004366:	613b      	str	r3, [r7, #16]
      /* else MSI < 8Mhz default FLASH_LATENCY_0 0WS */
    }
#endif
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8004368:	4b0b      	ldr	r3, [pc, #44]	; (8004398 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	f023 0207 	bic.w	r2, r3, #7
 8004370:	4909      	ldr	r1, [pc, #36]	; (8004398 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	4313      	orrs	r3, r2
 8004376:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8004378:	4b07      	ldr	r3, [pc, #28]	; (8004398 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800437a:	681b      	ldr	r3, [r3, #0]
 800437c:	f003 0307 	and.w	r3, r3, #7
 8004380:	693a      	ldr	r2, [r7, #16]
 8004382:	429a      	cmp	r2, r3
 8004384:	d001      	beq.n	800438a <RCC_SetFlashLatencyFromMSIRange+0xae>
  {
    return HAL_ERROR;
 8004386:	2301      	movs	r3, #1
 8004388:	e000      	b.n	800438c <RCC_SetFlashLatencyFromMSIRange+0xb0>
  }

  return HAL_OK;
 800438a:	2300      	movs	r3, #0
}
 800438c:	4618      	mov	r0, r3
 800438e:	3718      	adds	r7, #24
 8004390:	46bd      	mov	sp, r7
 8004392:	bd80      	pop	{r7, pc}
 8004394:	40021000 	.word	0x40021000
 8004398:	40022000 	.word	0x40022000

0800439c <HAL_RCCEx_PeriphCLKConfig>:
  *         the RTC clock source: in this case the access to Backup domain is enabled.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 800439c:	b580      	push	{r7, lr}
 800439e:	b086      	sub	sp, #24
 80043a0:	af00      	add	r7, sp, #0
 80043a2:	6078      	str	r0, [r7, #4]
  uint32_t tmpregister, tickstart;     /* no init needed */
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 80043a4:	2300      	movs	r3, #0
 80043a6:	74fb      	strb	r3, [r7, #19]
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 80043a8:	2300      	movs	r3, #0
 80043aa:	74bb      	strb	r3, [r7, #18]
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

#if defined(SAI1)

  /*-------------------------- SAI1 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d041      	beq.n	800443c <HAL_RCCEx_PeriphCLKConfig+0xa0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLK(PeriphClkInit->Sai1ClockSelection));

    switch(PeriphClkInit->Sai1ClockSelection)
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80043bc:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80043c0:	d02a      	beq.n	8004418 <HAL_RCCEx_PeriphCLKConfig+0x7c>
 80043c2:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 80043c6:	d824      	bhi.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80043c8:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80043cc:	d008      	beq.n	80043e0 <HAL_RCCEx_PeriphCLKConfig+0x44>
 80043ce:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80043d2:	d81e      	bhi.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x76>
 80043d4:	2b00      	cmp	r3, #0
 80043d6:	d00a      	beq.n	80043ee <HAL_RCCEx_PeriphCLKConfig+0x52>
 80043d8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043dc:	d010      	beq.n	8004400 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80043de:	e018      	b.n	8004412 <HAL_RCCEx_PeriphCLKConfig+0x76>
    {
    case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
      /* Enable SAI Clock output generated from System PLL . */
#if defined(RCC_PLLSAI2_SUPPORT)
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 80043e0:	4b86      	ldr	r3, [pc, #536]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043e2:	68db      	ldr	r3, [r3, #12]
 80043e4:	4a85      	ldr	r2, [pc, #532]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80043e6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80043ea:	60d3      	str	r3, [r2, #12]
#else
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI2CLK);
#endif /* RCC_PLLSAI2_SUPPORT */
      /* SAI1 clock source config set later after clock selection check */
      break;
 80043ec:	e015      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x7e>

    case RCC_SAI1CLKSOURCE_PLLSAI1:  /* PLLSAI1 is used as clock source for SAI1*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	3304      	adds	r3, #4
 80043f2:	2100      	movs	r1, #0
 80043f4:	4618      	mov	r0, r3
 80043f6:	f001 f835 	bl	8005464 <RCCEx_PLLSAI1_Config>
 80043fa:	4603      	mov	r3, r0
 80043fc:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 80043fe:	e00c      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x7e>

#if defined(RCC_PLLSAI2_SUPPORT)

    case RCC_SAI1CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI1*/
      /* PLLSAI2 input clock, parameters M, N & P configuration clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	3320      	adds	r3, #32
 8004404:	2100      	movs	r1, #0
 8004406:	4618      	mov	r0, r3
 8004408:	f001 f920 	bl	800564c <RCCEx_PLLSAI2_Config>
 800440c:	4603      	mov	r3, r0
 800440e:	74fb      	strb	r3, [r7, #19]
      /* SAI1 clock source config set later after clock selection check */
      break;
 8004410:	e003      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x7e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI1 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 8004412:	2301      	movs	r3, #1
 8004414:	74fb      	strb	r3, [r7, #19]
      break;
 8004416:	e000      	b.n	800441a <HAL_RCCEx_PeriphCLKConfig+0x7e>
      break;
 8004418:	bf00      	nop
    }

    if(ret == HAL_OK)
 800441a:	7cfb      	ldrb	r3, [r7, #19]
 800441c:	2b00      	cmp	r3, #0
 800441e:	d10b      	bne.n	8004438 <HAL_RCCEx_PeriphCLKConfig+0x9c>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8004420:	4b76      	ldr	r3, [pc, #472]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004422:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004426:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800442e:	4973      	ldr	r1, [pc, #460]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004430:	4313      	orrs	r3, r2
 8004432:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 8004436:	e001      	b.n	800443c <HAL_RCCEx_PeriphCLKConfig+0xa0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004438:	7cfb      	ldrb	r3, [r7, #19]
 800443a:	74bb      	strb	r3, [r7, #18]
#endif /* SAI1 */

#if defined(SAI2)

  /*-------------------------- SAI2 clock source configuration ---------------------*/
  if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	681b      	ldr	r3, [r3, #0]
 8004440:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004444:	2b00      	cmp	r3, #0
 8004446:	d041      	beq.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x130>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLK(PeriphClkInit->Sai2ClockSelection));

    switch(PeriphClkInit->Sai2ClockSelection)
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800444c:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004450:	d02a      	beq.n	80044a8 <HAL_RCCEx_PeriphCLKConfig+0x10c>
 8004452:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004456:	d824      	bhi.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004458:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800445c:	d008      	beq.n	8004470 <HAL_RCCEx_PeriphCLKConfig+0xd4>
 800445e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004462:	d81e      	bhi.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
 8004464:	2b00      	cmp	r3, #0
 8004466:	d00a      	beq.n	800447e <HAL_RCCEx_PeriphCLKConfig+0xe2>
 8004468:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800446c:	d010      	beq.n	8004490 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 800446e:	e018      	b.n	80044a2 <HAL_RCCEx_PeriphCLKConfig+0x106>
    {
    case RCC_SAI2CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
      /* Enable SAI Clock output generated from System PLL . */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
 8004470:	4b62      	ldr	r3, [pc, #392]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004472:	68db      	ldr	r3, [r3, #12]
 8004474:	4a61      	ldr	r2, [pc, #388]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004476:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800447a:	60d3      	str	r3, [r2, #12]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800447c:	e015      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI1: /* PLLSAI1 is used as clock source for SAI2*/
      /* PLLSAI1 input clock, parameters M, N & P configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_P_UPDATE);
 800447e:	687b      	ldr	r3, [r7, #4]
 8004480:	3304      	adds	r3, #4
 8004482:	2100      	movs	r1, #0
 8004484:	4618      	mov	r0, r3
 8004486:	f000 ffed 	bl	8005464 <RCCEx_PLLSAI1_Config>
 800448a:	4603      	mov	r3, r0
 800448c:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 800448e:	e00c      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x10e>

    case RCC_SAI2CLKSOURCE_PLLSAI2:  /* PLLSAI2 is used as clock source for SAI2*/
      /* PLLSAI2 input clock, parameters M, N & P configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_P_UPDATE);
 8004490:	687b      	ldr	r3, [r7, #4]
 8004492:	3320      	adds	r3, #32
 8004494:	2100      	movs	r1, #0
 8004496:	4618      	mov	r0, r3
 8004498:	f001 f8d8 	bl	800564c <RCCEx_PLLSAI2_Config>
 800449c:	4603      	mov	r3, r0
 800449e:	74fb      	strb	r3, [r7, #19]
      /* SAI2 clock source config set later after clock selection check */
      break;
 80044a0:	e003      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x10e>
#endif /* STM32L4P5xx || STM32L4Q5xx || STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx */
      /* SAI2 clock source config set later after clock selection check */
      break;

    default:
      ret = HAL_ERROR;
 80044a2:	2301      	movs	r3, #1
 80044a4:	74fb      	strb	r3, [r7, #19]
      break;
 80044a6:	e000      	b.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x10e>
      break;
 80044a8:	bf00      	nop
    }

    if(ret == HAL_OK)
 80044aa:	7cfb      	ldrb	r3, [r7, #19]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d10b      	bne.n	80044c8 <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      /* Set the source of SAI2 clock*/
      __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80044b0:	4b52      	ldr	r3, [pc, #328]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044b2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80044b6:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80044be:	494f      	ldr	r1, [pc, #316]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044c0:	4313      	orrs	r3, r2
 80044c2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
 80044c6:	e001      	b.n	80044cc <HAL_RCCEx_PeriphCLKConfig+0x130>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80044c8:	7cfb      	ldrb	r3, [r7, #19]
 80044ca:	74bb      	strb	r3, [r7, #18]
    }
  }
#endif /* SAI2 */

  /*-------------------------- RTC clock source configuration ----------------------*/
  if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80044d4:	2b00      	cmp	r3, #0
 80044d6:	f000 80a0 	beq.w	800461a <HAL_RCCEx_PeriphCLKConfig+0x27e>
  {
    FlagStatus       pwrclkchanged = RESET;
 80044da:	2300      	movs	r3, #0
 80044dc:	747b      	strb	r3, [r7, #17]

    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED() != 0U)
 80044de:	4b47      	ldr	r3, [pc, #284]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044e0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	d101      	bne.n	80044ee <HAL_RCCEx_PeriphCLKConfig+0x152>
 80044ea:	2301      	movs	r3, #1
 80044ec:	e000      	b.n	80044f0 <HAL_RCCEx_PeriphCLKConfig+0x154>
 80044ee:	2300      	movs	r3, #0
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	d00d      	beq.n	8004510 <HAL_RCCEx_PeriphCLKConfig+0x174>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80044f4:	4b41      	ldr	r3, [pc, #260]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044f6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044f8:	4a40      	ldr	r2, [pc, #256]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80044fa:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80044fe:	6593      	str	r3, [r2, #88]	; 0x58
 8004500:	4b3e      	ldr	r3, [pc, #248]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004504:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004508:	60bb      	str	r3, [r7, #8]
 800450a:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800450c:	2301      	movs	r3, #1
 800450e:	747b      	strb	r3, [r7, #17]
    }

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8004510:	4b3b      	ldr	r3, [pc, #236]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	4a3a      	ldr	r2, [pc, #232]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 8004516:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800451a:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 800451c:	f7fd f874 	bl	8001608 <HAL_GetTick>
 8004520:	60f8      	str	r0, [r7, #12]

    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004522:	e009      	b.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x19c>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004524:	f7fd f870 	bl	8001608 <HAL_GetTick>
 8004528:	4602      	mov	r2, r0
 800452a:	68fb      	ldr	r3, [r7, #12]
 800452c:	1ad3      	subs	r3, r2, r3
 800452e:	2b02      	cmp	r3, #2
 8004530:	d902      	bls.n	8004538 <HAL_RCCEx_PeriphCLKConfig+0x19c>
      {
        ret = HAL_TIMEOUT;
 8004532:	2303      	movs	r3, #3
 8004534:	74fb      	strb	r3, [r7, #19]
        break;
 8004536:	e005      	b.n	8004544 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
    while(READ_BIT(PWR->CR1, PWR_CR1_DBP) == 0U)
 8004538:	4b31      	ldr	r3, [pc, #196]	; (8004600 <HAL_RCCEx_PeriphCLKConfig+0x264>)
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004540:	2b00      	cmp	r3, #0
 8004542:	d0ef      	beq.n	8004524 <HAL_RCCEx_PeriphCLKConfig+0x188>
      }
    }

    if(ret == HAL_OK)
 8004544:	7cfb      	ldrb	r3, [r7, #19]
 8004546:	2b00      	cmp	r3, #0
 8004548:	d15c      	bne.n	8004604 <HAL_RCCEx_PeriphCLKConfig+0x268>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified from default */
      tmpregister = READ_BIT(RCC->BDCR, RCC_BDCR_RTCSEL);
 800454a:	4b2c      	ldr	r3, [pc, #176]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800454c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004550:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004554:	617b      	str	r3, [r7, #20]

      if((tmpregister != RCC_RTCCLKSOURCE_NONE) && (tmpregister != PeriphClkInit->RTCClockSelection))
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d01f      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x200>
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004562:	697a      	ldr	r2, [r7, #20]
 8004564:	429a      	cmp	r2, r3
 8004566:	d019      	beq.n	800459c <HAL_RCCEx_PeriphCLKConfig+0x200>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpregister = READ_BIT(RCC->BDCR, ~(RCC_BDCR_RTCSEL));
 8004568:	4b24      	ldr	r3, [pc, #144]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800456a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800456e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004572:	617b      	str	r3, [r7, #20]
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004574:	4b21      	ldr	r3, [pc, #132]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004576:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800457a:	4a20      	ldr	r2, [pc, #128]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800457c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004580:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004584:	4b1d      	ldr	r3, [pc, #116]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004586:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800458a:	4a1c      	ldr	r2, [pc, #112]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 800458c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004590:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpregister;
 8004594:	4a19      	ldr	r2, [pc, #100]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	f8c2 3090 	str.w	r3, [r2, #144]	; 0x90
      }

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(tmpregister, RCC_BDCR_LSEON))
 800459c:	697b      	ldr	r3, [r7, #20]
 800459e:	f003 0301 	and.w	r3, r3, #1
 80045a2:	2b00      	cmp	r3, #0
 80045a4:	d016      	beq.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x238>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80045a6:	f7fd f82f 	bl	8001608 <HAL_GetTick>
 80045aa:	60f8      	str	r0, [r7, #12]

        /* Wait till LSE is ready */
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045ac:	e00b      	b.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
        {
          if((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80045ae:	f7fd f82b 	bl	8001608 <HAL_GetTick>
 80045b2:	4602      	mov	r2, r0
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	1ad3      	subs	r3, r2, r3
 80045b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80045bc:	4293      	cmp	r3, r2
 80045be:	d902      	bls.n	80045c6 <HAL_RCCEx_PeriphCLKConfig+0x22a>
          {
            ret = HAL_TIMEOUT;
 80045c0:	2303      	movs	r3, #3
 80045c2:	74fb      	strb	r3, [r7, #19]
            break;
 80045c4:	e006      	b.n	80045d4 <HAL_RCCEx_PeriphCLKConfig+0x238>
        while(READ_BIT(RCC->BDCR, RCC_BDCR_LSERDY) == 0U)
 80045c6:	4b0d      	ldr	r3, [pc, #52]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045c8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045cc:	f003 0302 	and.w	r3, r3, #2
 80045d0:	2b00      	cmp	r3, #0
 80045d2:	d0ec      	beq.n	80045ae <HAL_RCCEx_PeriphCLKConfig+0x212>
          }
        }
      }

      if(ret == HAL_OK)
 80045d4:	7cfb      	ldrb	r3, [r7, #19]
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d10c      	bne.n	80045f4 <HAL_RCCEx_PeriphCLKConfig+0x258>
      {
        /* Apply new RTC clock source selection */
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80045da:	4b08      	ldr	r3, [pc, #32]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045dc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80045e0:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80045ea:	4904      	ldr	r1, [pc, #16]	; (80045fc <HAL_RCCEx_PeriphCLKConfig+0x260>)
 80045ec:	4313      	orrs	r3, r2
 80045ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
 80045f2:	e009      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x26c>
      }
      else
      {
        /* set overall return value */
        status = ret;
 80045f4:	7cfb      	ldrb	r3, [r7, #19]
 80045f6:	74bb      	strb	r3, [r7, #18]
 80045f8:	e006      	b.n	8004608 <HAL_RCCEx_PeriphCLKConfig+0x26c>
 80045fa:	bf00      	nop
 80045fc:	40021000 	.word	0x40021000
 8004600:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004604:	7cfb      	ldrb	r3, [r7, #19]
 8004606:	74bb      	strb	r3, [r7, #18]
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8004608:	7c7b      	ldrb	r3, [r7, #17]
 800460a:	2b01      	cmp	r3, #1
 800460c:	d105      	bne.n	800461a <HAL_RCCEx_PeriphCLKConfig+0x27e>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800460e:	4b9e      	ldr	r3, [pc, #632]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004610:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004612:	4a9d      	ldr	r2, [pc, #628]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004614:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8004618:	6593      	str	r3, [r2, #88]	; 0x58
    }
  }

  /*-------------------------- USART1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 800461a:	687b      	ldr	r3, [r7, #4]
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	f003 0301 	and.w	r3, r3, #1
 8004622:	2b00      	cmp	r3, #0
 8004624:	d00a      	beq.n	800463c <HAL_RCCEx_PeriphCLKConfig+0x2a0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 8004626:	4b98      	ldr	r3, [pc, #608]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004628:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800462c:	f023 0203 	bic.w	r2, r3, #3
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004634:	4994      	ldr	r1, [pc, #592]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004636:	4313      	orrs	r3, r2
 8004638:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- USART2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	681b      	ldr	r3, [r3, #0]
 8004640:	f003 0302 	and.w	r3, r3, #2
 8004644:	2b00      	cmp	r3, #0
 8004646:	d00a      	beq.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x2c2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8004648:	4b8f      	ldr	r3, [pc, #572]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800464a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800464e:	f023 020c 	bic.w	r2, r3, #12
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004656:	498c      	ldr	r1, [pc, #560]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004658:	4313      	orrs	r3, r2
 800465a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(USART3)

  /*-------------------------- USART3 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	f003 0304 	and.w	r3, r3, #4
 8004666:	2b00      	cmp	r3, #0
 8004668:	d00a      	beq.n	8004680 <HAL_RCCEx_PeriphCLKConfig+0x2e4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 800466a:	4b87      	ldr	r3, [pc, #540]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800466c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004670:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004678:	4983      	ldr	r1, [pc, #524]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800467a:	4313      	orrs	r3, r2
 800467c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* USART3 */

#if defined(UART4)

  /*-------------------------- UART4 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	681b      	ldr	r3, [r3, #0]
 8004684:	f003 0308 	and.w	r3, r3, #8
 8004688:	2b00      	cmp	r3, #0
 800468a:	d00a      	beq.n	80046a2 <HAL_RCCEx_PeriphCLKConfig+0x306>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 800468c:	4b7e      	ldr	r3, [pc, #504]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800468e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004692:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8004696:	687b      	ldr	r3, [r7, #4]
 8004698:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800469a:	497b      	ldr	r1, [pc, #492]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800469c:	4313      	orrs	r3, r2
 800469e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* UART4 */

#if defined(UART5)

  /*-------------------------- UART5 clock source configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	f003 0310 	and.w	r3, r3, #16
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d00a      	beq.n	80046c4 <HAL_RCCEx_PeriphCLKConfig+0x328>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 80046ae:	4b76      	ldr	r3, [pc, #472]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046b0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046b4:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80046bc:	4972      	ldr	r1, [pc, #456]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046be:	4313      	orrs	r3, r2
 80046c0:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* UART5 */

  /*-------------------------- LPUART1 clock source configuration ------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	f003 0320 	and.w	r3, r3, #32
 80046cc:	2b00      	cmp	r3, #0
 80046ce:	d00a      	beq.n	80046e6 <HAL_RCCEx_PeriphCLKConfig+0x34a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUART1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 80046d0:	4b6d      	ldr	r3, [pc, #436]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046d2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046d6:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80046de:	496a      	ldr	r1, [pc, #424]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046e0:	4313      	orrs	r3, r2
 80046e2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80046ee:	2b00      	cmp	r3, #0
 80046f0:	d00a      	beq.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x36c>
  {
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 80046f2:	4b65      	ldr	r3, [pc, #404]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80046f4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80046f8:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004700:	4961      	ldr	r1, [pc, #388]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004702:	4313      	orrs	r3, r2
 8004704:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- LPTIM2 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == (RCC_PERIPHCLK_LPTIM2))
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004710:	2b00      	cmp	r3, #0
 8004712:	d00a      	beq.n	800472a <HAL_RCCEx_PeriphCLKConfig+0x38e>
  {
    assert_param(IS_RCC_LPTIM2CLK(PeriphClkInit->Lptim2ClockSelection));
    __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004714:	4b5c      	ldr	r3, [pc, #368]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004716:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800471a:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004722:	4959      	ldr	r1, [pc, #356]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004724:	4313      	orrs	r3, r2
 8004726:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

  /*-------------------------- I2C1 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	681b      	ldr	r3, [r3, #0]
 800472e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004732:	2b00      	cmp	r3, #0
 8004734:	d00a      	beq.n	800474c <HAL_RCCEx_PeriphCLKConfig+0x3b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8004736:	4b54      	ldr	r3, [pc, #336]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004738:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800473c:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004744:	4950      	ldr	r1, [pc, #320]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004746:	4313      	orrs	r3, r2
 8004748:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#if defined(I2C2)

  /*-------------------------- I2C2 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004754:	2b00      	cmp	r3, #0
 8004756:	d00a      	beq.n	800476e <HAL_RCCEx_PeriphCLKConfig+0x3d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8004758:	4b4b      	ldr	r3, [pc, #300]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800475a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800475e:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004766:	4948      	ldr	r1, [pc, #288]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004768:	4313      	orrs	r3, r2
 800476a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
  }

#endif /* I2C2 */

  /*-------------------------- I2C3 clock source configuration ---------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004776:	2b00      	cmp	r3, #0
 8004778:	d00a      	beq.n	8004790 <HAL_RCCEx_PeriphCLKConfig+0x3f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800477a:	4b43      	ldr	r3, [pc, #268]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800477c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004780:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004788:	493f      	ldr	r1, [pc, #252]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800478a:	4313      	orrs	r3, r2
 800478c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* I2C4 */

#if defined(USB_OTG_FS) || defined(USB)

  /*-------------------------- USB clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004798:	2b00      	cmp	r3, #0
 800479a:	d028      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x452>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 800479c:	4b3a      	ldr	r3, [pc, #232]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800479e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80047a2:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047aa:	4937      	ldr	r1, [pc, #220]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047ac:	4313      	orrs	r3, r2
 80047ae:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLL)
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047b6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80047ba:	d106      	bne.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x42e>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 80047bc:	4b32      	ldr	r3, [pc, #200]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047be:	68db      	ldr	r3, [r3, #12]
 80047c0:	4a31      	ldr	r2, [pc, #196]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80047c6:	60d3      	str	r3, [r2, #12]
 80047c8:	e011      	b.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x452>
    }
    else
    {
#if defined(RCC_PLLSAI1_SUPPORT)
      if(PeriphClkInit->UsbClockSelection == RCC_USBCLKSOURCE_PLLSAI1)
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80047ce:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 80047d2:	d10c      	bne.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x452>
      {
        /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
        ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	3304      	adds	r3, #4
 80047d8:	2101      	movs	r1, #1
 80047da:	4618      	mov	r0, r3
 80047dc:	f000 fe42 	bl	8005464 <RCCEx_PLLSAI1_Config>
 80047e0:	4603      	mov	r3, r0
 80047e2:	74fb      	strb	r3, [r7, #19]

        if(ret != HAL_OK)
 80047e4:	7cfb      	ldrb	r3, [r7, #19]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d001      	beq.n	80047ee <HAL_RCCEx_PeriphCLKConfig+0x452>
        {
          /* set overall return value */
          status = ret;
 80047ea:	7cfb      	ldrb	r3, [r7, #19]
 80047ec:	74bb      	strb	r3, [r7, #18]
#endif /* USB_OTG_FS || USB */

#if defined(SDMMC1)

  /*-------------------------- SDMMC1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == (RCC_PERIPHCLK_SDMMC1))
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80047f6:	2b00      	cmp	r3, #0
 80047f8:	d028      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
  {
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 80047fa:	4b23      	ldr	r3, [pc, #140]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 80047fc:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004800:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004808:	491f      	ldr	r1, [pc, #124]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800480a:	4313      	orrs	r3, r2
 800480c:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLL)   /* PLL "Q" ? */
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004814:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004818:	d106      	bne.n	8004828 <HAL_RCCEx_PeriphCLKConfig+0x48c>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 800481a:	4b1b      	ldr	r3, [pc, #108]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800481c:	68db      	ldr	r3, [r3, #12]
 800481e:	4a1a      	ldr	r2, [pc, #104]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004820:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004824:	60d3      	str	r3, [r2, #12]
 8004826:	e011      	b.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* Enable PLLSAI3CLK output */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_SAI3CLK);
    }
#endif
    else if(PeriphClkInit->Sdmmc1ClockSelection == RCC_SDMMC1CLKSOURCE_PLLSAI1)
 8004828:	687b      	ldr	r3, [r7, #4]
 800482a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800482c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004830:	d10c      	bne.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	3304      	adds	r3, #4
 8004836:	2101      	movs	r1, #1
 8004838:	4618      	mov	r0, r3
 800483a:	f000 fe13 	bl	8005464 <RCCEx_PLLSAI1_Config>
 800483e:	4603      	mov	r3, r0
 8004840:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004842:	7cfb      	ldrb	r3, [r7, #19]
 8004844:	2b00      	cmp	r3, #0
 8004846:	d001      	beq.n	800484c <HAL_RCCEx_PeriphCLKConfig+0x4b0>
      {
        /* set overall return value */
        status = ret;
 8004848:	7cfb      	ldrb	r3, [r7, #19]
 800484a:	74bb      	strb	r3, [r7, #18]
  }

#endif /* SDMMC1 */

  /*-------------------------- RNG clock source configuration ----------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == (RCC_PERIPHCLK_RNG))
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	681b      	ldr	r3, [r3, #0]
 8004850:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004854:	2b00      	cmp	r3, #0
 8004856:	d02b      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
  {
    assert_param(IS_RCC_RNGCLKSOURCE(PeriphClkInit->RngClockSelection));
    __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8004858:	4b0b      	ldr	r3, [pc, #44]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800485a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800485e:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8004862:	687b      	ldr	r3, [r7, #4]
 8004864:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004866:	4908      	ldr	r1, [pc, #32]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 8004868:	4313      	orrs	r3, r2
 800486a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

    if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLL)
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004872:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004876:	d109      	bne.n	800488c <HAL_RCCEx_PeriphCLKConfig+0x4f0>
    {
      /* Enable PLL48M1CLK output clock */
      __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL_48M1CLK);
 8004878:	4b03      	ldr	r3, [pc, #12]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800487a:	68db      	ldr	r3, [r3, #12]
 800487c:	4a02      	ldr	r2, [pc, #8]	; (8004888 <HAL_RCCEx_PeriphCLKConfig+0x4ec>)
 800487e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004882:	60d3      	str	r3, [r2, #12]
 8004884:	e014      	b.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
 8004886:	bf00      	nop
 8004888:	40021000 	.word	0x40021000
    }
#if defined(RCC_PLLSAI1_SUPPORT)
    else if(PeriphClkInit->RngClockSelection == RCC_RNGCLKSOURCE_PLLSAI1)
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004890:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004894:	d10c      	bne.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
    {
      /* PLLSAI1 input clock, parameters M, N & Q configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_Q_UPDATE);
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	3304      	adds	r3, #4
 800489a:	2101      	movs	r1, #1
 800489c:	4618      	mov	r0, r3
 800489e:	f000 fde1 	bl	8005464 <RCCEx_PLLSAI1_Config>
 80048a2:	4603      	mov	r3, r0
 80048a4:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048a6:	7cfb      	ldrb	r3, [r7, #19]
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d001      	beq.n	80048b0 <HAL_RCCEx_PeriphCLKConfig+0x514>
      {
        /* set overall return value */
        status = ret;
 80048ac:	7cfb      	ldrb	r3, [r7, #19]
 80048ae:	74bb      	strb	r3, [r7, #18]
    }
  }

  /*-------------------------- ADC clock source configuration ----------------------*/
#if !defined(STM32L412xx) && !defined(STM32L422xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048b8:	2b00      	cmp	r3, #0
 80048ba:	d02f      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x580>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCCLKSOURCE(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC interface clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80048bc:	4b2b      	ldr	r3, [pc, #172]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80048be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048c2:	f023 5240 	bic.w	r2, r3, #805306368	; 0x30000000
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048ca:	4928      	ldr	r1, [pc, #160]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 80048cc:	4313      	orrs	r3, r2
 80048ce:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

#if defined(RCC_PLLSAI1_SUPPORT)
    if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI1)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048d6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048da:	d10d      	bne.n	80048f8 <HAL_RCCEx_PeriphCLKConfig+0x55c>
    {
      /* PLLSAI1 input clock, parameters M, N & R configuration and clock output (PLLSAI1ClockOut) */
      ret = RCCEx_PLLSAI1_Config(&(PeriphClkInit->PLLSAI1), DIVIDER_R_UPDATE);
 80048dc:	687b      	ldr	r3, [r7, #4]
 80048de:	3304      	adds	r3, #4
 80048e0:	2102      	movs	r1, #2
 80048e2:	4618      	mov	r0, r3
 80048e4:	f000 fdbe 	bl	8005464 <RCCEx_PLLSAI1_Config>
 80048e8:	4603      	mov	r3, r0
 80048ea:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 80048ec:	7cfb      	ldrb	r3, [r7, #19]
 80048ee:	2b00      	cmp	r3, #0
 80048f0:	d014      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 80048f2:	7cfb      	ldrb	r3, [r7, #19]
 80048f4:	74bb      	strb	r3, [r7, #18]
 80048f6:	e011      	b.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x580>
    }
#endif /* RCC_PLLSAI1_SUPPORT */

#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || defined(STM32L496xx) || defined(STM32L4A6xx)

    else if(PeriphClkInit->AdcClockSelection == RCC_ADCCLKSOURCE_PLLSAI2)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80048fc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004900:	d10c      	bne.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x580>
    {
      /* PLLSAI2 input clock, parameters M, N & R configuration and clock output (PLLSAI2ClockOut) */
      ret = RCCEx_PLLSAI2_Config(&(PeriphClkInit->PLLSAI2), DIVIDER_R_UPDATE);
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	3320      	adds	r3, #32
 8004906:	2102      	movs	r1, #2
 8004908:	4618      	mov	r0, r3
 800490a:	f000 fe9f 	bl	800564c <RCCEx_PLLSAI2_Config>
 800490e:	4603      	mov	r3, r0
 8004910:	74fb      	strb	r3, [r7, #19]

      if(ret != HAL_OK)
 8004912:	7cfb      	ldrb	r3, [r7, #19]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d001      	beq.n	800491c <HAL_RCCEx_PeriphCLKConfig+0x580>
      {
        /* set overall return value */
        status = ret;
 8004918:	7cfb      	ldrb	r3, [r7, #19]
 800491a:	74bb      	strb	r3, [r7, #18]
#endif /* !STM32L412xx && !STM32L422xx */

#if defined(SWPMI1)

  /*-------------------------- SWPMI1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	681b      	ldr	r3, [r3, #0]
 8004920:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004924:	2b00      	cmp	r3, #0
 8004926:	d00a      	beq.n	800493e <HAL_RCCEx_PeriphCLKConfig+0x5a2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8004928:	4b10      	ldr	r3, [pc, #64]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800492a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800492e:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004936:	490d      	ldr	r1, [pc, #52]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 8004938:	4313      	orrs	r3, r2
 800493a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
#endif /* SWPMI1 */

#if defined(DFSDM1_Filter0)

  /*-------------------------- DFSDM1 clock source configuration -------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004946:	2b00      	cmp	r3, #0
 8004948:	d00b      	beq.n	8004962 <HAL_RCCEx_PeriphCLKConfig+0x5c6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 800494a:	4b08      	ldr	r3, [pc, #32]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800494c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004950:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800495a:	4904      	ldr	r1, [pc, #16]	; (800496c <HAL_RCCEx_PeriphCLKConfig+0x5d0>)
 800495c:	4313      	orrs	r3, r2
 800495e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }
  }

#endif /* OCTOSPI1 || OCTOSPI2 */

  return status;
 8004962:	7cbb      	ldrb	r3, [r7, #18]
}
 8004964:	4618      	mov	r0, r3
 8004966:	3718      	adds	r7, #24
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}
 800496c:	40021000 	.word	0x40021000

08004970 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_OSPI  OctoSPI peripheral clock (only for devices with OctoSPI)
  @endif
  * @retval Frequency in Hz
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 8004970:	b580      	push	{r7, lr}
 8004972:	b088      	sub	sp, #32
 8004974:	af00      	add	r7, sp, #0
 8004976:	6078      	str	r0, [r7, #4]
  uint32_t frequency = 0U;
 8004978:	2300      	movs	r3, #0
 800497a:	61fb      	str	r3, [r7, #28]
#endif

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  if(PeriphClk == RCC_PERIPHCLK_RTC)
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004982:	d13e      	bne.n	8004a02 <HAL_RCCEx_GetPeriphCLKFreq+0x92>
  {
    /* Get the current RTC source */
    srcclk = __HAL_RCC_GET_RTC_SOURCE();
 8004984:	4bbe      	ldr	r3, [pc, #760]	; (8004c80 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8004986:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800498a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800498e:	613b      	str	r3, [r7, #16]

    switch(srcclk)
 8004990:	693b      	ldr	r3, [r7, #16]
 8004992:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004996:	d028      	beq.n	80049ea <HAL_RCCEx_GetPeriphCLKFreq+0x7a>
 8004998:	693b      	ldr	r3, [r7, #16]
 800499a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800499e:	f200 853e 	bhi.w	800541e <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
 80049a2:	693b      	ldr	r3, [r7, #16]
 80049a4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80049a8:	d005      	beq.n	80049b6 <HAL_RCCEx_GetPeriphCLKFreq+0x46>
 80049aa:	693b      	ldr	r3, [r7, #16]
 80049ac:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80049b0:	d00e      	beq.n	80049d0 <HAL_RCCEx_GetPeriphCLKFreq+0x60>
        frequency = HSE_VALUE / 32U;
      }
      break;
    default:
      /* No clock source, frequency default init at 0 */
      break;
 80049b2:	f000 bd34 	b.w	800541e <HAL_RCCEx_GetPeriphCLKFreq+0xaae>
      if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80049b6:	4bb2      	ldr	r3, [pc, #712]	; (8004c80 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 80049b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80049bc:	f003 0302 	and.w	r3, r3, #2
 80049c0:	2b02      	cmp	r3, #2
 80049c2:	f040 852e 	bne.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
        frequency = LSE_VALUE;
 80049c6:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80049ca:	61fb      	str	r3, [r7, #28]
      break;
 80049cc:	f000 bd29 	b.w	8005422 <HAL_RCCEx_GetPeriphCLKFreq+0xab2>
      if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 80049d0:	4bab      	ldr	r3, [pc, #684]	; (8004c80 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 80049d2:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 80049d6:	f003 0302 	and.w	r3, r3, #2
 80049da:	2b02      	cmp	r3, #2
 80049dc:	f040 8523 	bne.w	8005426 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
          frequency = LSI_VALUE;
 80049e0:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80049e4:	61fb      	str	r3, [r7, #28]
      break;
 80049e6:	f000 bd1e 	b.w	8005426 <HAL_RCCEx_GetPeriphCLKFreq+0xab6>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80049ea:	4ba5      	ldr	r3, [pc, #660]	; (8004c80 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049f2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80049f6:	f040 8518 	bne.w	800542a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        frequency = HSE_VALUE / 32U;
 80049fa:	4ba2      	ldr	r3, [pc, #648]	; (8004c84 <HAL_RCCEx_GetPeriphCLKFreq+0x314>)
 80049fc:	61fb      	str	r3, [r7, #28]
      break;
 80049fe:	f000 bd14 	b.w	800542a <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
    }
  }
  else
  {
    /* Other external peripheral clock source than RTC */
    pll_oscsource = __HAL_RCC_GET_PLL_OSCSOURCE();
 8004a02:	4b9f      	ldr	r3, [pc, #636]	; (8004c80 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8004a04:	68db      	ldr	r3, [r3, #12]
 8004a06:	f003 0303 	and.w	r3, r3, #3
 8004a0a:	617b      	str	r3, [r7, #20]

    /* Compute PLL clock input */
    switch(pll_oscsource)
 8004a0c:	697b      	ldr	r3, [r7, #20]
 8004a0e:	2b03      	cmp	r3, #3
 8004a10:	d036      	beq.n	8004a80 <HAL_RCCEx_GetPeriphCLKFreq+0x110>
 8004a12:	697b      	ldr	r3, [r7, #20]
 8004a14:	2b03      	cmp	r3, #3
 8004a16:	d840      	bhi.n	8004a9a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
 8004a18:	697b      	ldr	r3, [r7, #20]
 8004a1a:	2b01      	cmp	r3, #1
 8004a1c:	d003      	beq.n	8004a26 <HAL_RCCEx_GetPeriphCLKFreq+0xb6>
 8004a1e:	697b      	ldr	r3, [r7, #20]
 8004a20:	2b02      	cmp	r3, #2
 8004a22:	d020      	beq.n	8004a66 <HAL_RCCEx_GetPeriphCLKFreq+0xf6>
 8004a24:	e039      	b.n	8004a9a <HAL_RCCEx_GetPeriphCLKFreq+0x12a>
    {
    case RCC_PLLSOURCE_MSI:   /* MSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004a26:	4b96      	ldr	r3, [pc, #600]	; (8004c80 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8004a28:	681b      	ldr	r3, [r3, #0]
 8004a2a:	f003 0302 	and.w	r3, r3, #2
 8004a2e:	2b02      	cmp	r3, #2
 8004a30:	d116      	bne.n	8004a60 <HAL_RCCEx_GetPeriphCLKFreq+0xf0>
      {
        /*MSI frequency range in HZ*/
        pllvco = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004a32:	4b93      	ldr	r3, [pc, #588]	; (8004c80 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8004a34:	681b      	ldr	r3, [r3, #0]
 8004a36:	f003 0308 	and.w	r3, r3, #8
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	d005      	beq.n	8004a4a <HAL_RCCEx_GetPeriphCLKFreq+0xda>
 8004a3e:	4b90      	ldr	r3, [pc, #576]	; (8004c80 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	091b      	lsrs	r3, r3, #4
 8004a44:	f003 030f 	and.w	r3, r3, #15
 8004a48:	e005      	b.n	8004a56 <HAL_RCCEx_GetPeriphCLKFreq+0xe6>
 8004a4a:	4b8d      	ldr	r3, [pc, #564]	; (8004c80 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8004a4c:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004a50:	0a1b      	lsrs	r3, r3, #8
 8004a52:	f003 030f 	and.w	r3, r3, #15
 8004a56:	4a8c      	ldr	r2, [pc, #560]	; (8004c88 <HAL_RCCEx_GetPeriphCLKFreq+0x318>)
 8004a58:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004a5c:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004a5e:	e01f      	b.n	8004aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004a60:	2300      	movs	r3, #0
 8004a62:	61bb      	str	r3, [r7, #24]
      break;
 8004a64:	e01c      	b.n	8004aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSI:   /* HSI ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004a66:	4b86      	ldr	r3, [pc, #536]	; (8004c80 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8004a68:	681b      	ldr	r3, [r3, #0]
 8004a6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004a72:	d102      	bne.n	8004a7a <HAL_RCCEx_GetPeriphCLKFreq+0x10a>
      {
        pllvco = HSI_VALUE;
 8004a74:	4b85      	ldr	r3, [pc, #532]	; (8004c8c <HAL_RCCEx_GetPeriphCLKFreq+0x31c>)
 8004a76:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004a78:	e012      	b.n	8004aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004a7a:	2300      	movs	r3, #0
 8004a7c:	61bb      	str	r3, [r7, #24]
      break;
 8004a7e:	e00f      	b.n	8004aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    case RCC_PLLSOURCE_HSE:   /* HSE ? */
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8004a80:	4b7f      	ldr	r3, [pc, #508]	; (8004c80 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a88:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8004a8c:	d102      	bne.n	8004a94 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
      {
        pllvco = HSE_VALUE;
 8004a8e:	4b80      	ldr	r3, [pc, #512]	; (8004c90 <HAL_RCCEx_GetPeriphCLKFreq+0x320>)
 8004a90:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        pllvco = 0U;
      }
      break;
 8004a92:	e005      	b.n	8004aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
        pllvco = 0U;
 8004a94:	2300      	movs	r3, #0
 8004a96:	61bb      	str	r3, [r7, #24]
      break;
 8004a98:	e002      	b.n	8004aa0 <HAL_RCCEx_GetPeriphCLKFreq+0x130>
    default:
      /* No source */
      pllvco = 0U;
 8004a9a:	2300      	movs	r3, #0
 8004a9c:	61bb      	str	r3, [r7, #24]
      break;
 8004a9e:	bf00      	nop
    }

    switch(PeriphClk)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004aa6:	f000 80d2 	beq.w	8004c4e <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8004ab0:	f200 84bd 	bhi.w	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8004ab4:	687b      	ldr	r3, [r7, #4]
 8004ab6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004aba:	f000 80c8 	beq.w	8004c4e <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8004ac4:	f200 84b3 	bhi.w	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ace:	f000 835b 	beq.w	8005188 <HAL_RCCEx_GetPeriphCLKFreq+0x818>
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004ad8:	f200 84a9 	bhi.w	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8004adc:	687b      	ldr	r3, [r7, #4]
 8004ade:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004ae2:	f000 847f 	beq.w	80053e4 <HAL_RCCEx_GetPeriphCLKFreq+0xa74>
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004aec:	f200 849f 	bhi.w	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004af6:	f000 82ce 	beq.w	8005096 <HAL_RCCEx_GetPeriphCLKFreq+0x726>
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004b00:	f200 8495 	bhi.w	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b0a:	f000 80a0 	beq.w	8004c4e <HAL_RCCEx_GetPeriphCLKFreq+0x2de>
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004b14:	f200 848b 	bhi.w	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b1e:	f000 808f 	beq.w	8004c40 <HAL_RCCEx_GetPeriphCLKFreq+0x2d0>
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004b28:	f200 8481 	bhi.w	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b32:	d07e      	beq.n	8004c32 <HAL_RCCEx_GetPeriphCLKFreq+0x2c2>
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004b3a:	f200 8478 	bhi.w	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b44:	f000 8404 	beq.w	8005350 <HAL_RCCEx_GetPeriphCLKFreq+0x9e0>
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004b4e:	f200 846e 	bhi.w	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b58:	f000 83b0 	beq.w	80052bc <HAL_RCCEx_GetPeriphCLKFreq+0x94c>
 8004b5c:	687b      	ldr	r3, [r7, #4]
 8004b5e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004b62:	f200 8464 	bhi.w	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b6c:	f000 837a 	beq.w	8005264 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
 8004b70:	687b      	ldr	r3, [r7, #4]
 8004b72:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004b76:	f200 845a 	bhi.w	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8004b7a:	687b      	ldr	r3, [r7, #4]
 8004b7c:	2b80      	cmp	r3, #128	; 0x80
 8004b7e:	f000 8345 	beq.w	800520c <HAL_RCCEx_GetPeriphCLKFreq+0x89c>
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	2b80      	cmp	r3, #128	; 0x80
 8004b86:	f200 8452 	bhi.w	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	2b20      	cmp	r3, #32
 8004b8e:	d84b      	bhi.n	8004c28 <HAL_RCCEx_GetPeriphCLKFreq+0x2b8>
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	f000 844b 	beq.w	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	3b01      	subs	r3, #1
 8004b9c:	2b1f      	cmp	r3, #31
 8004b9e:	f200 8446 	bhi.w	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
 8004ba2:	a201      	add	r2, pc, #4	; (adr r2, 8004ba8 <HAL_RCCEx_GetPeriphCLKFreq+0x238>)
 8004ba4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004ba8:	08004d93 	.word	0x08004d93
 8004bac:	08004e03 	.word	0x08004e03
 8004bb0:	0800542f 	.word	0x0800542f
 8004bb4:	08004e97 	.word	0x08004e97
 8004bb8:	0800542f 	.word	0x0800542f
 8004bbc:	0800542f 	.word	0x0800542f
 8004bc0:	0800542f 	.word	0x0800542f
 8004bc4:	08004f0f 	.word	0x08004f0f
 8004bc8:	0800542f 	.word	0x0800542f
 8004bcc:	0800542f 	.word	0x0800542f
 8004bd0:	0800542f 	.word	0x0800542f
 8004bd4:	0800542f 	.word	0x0800542f
 8004bd8:	0800542f 	.word	0x0800542f
 8004bdc:	0800542f 	.word	0x0800542f
 8004be0:	0800542f 	.word	0x0800542f
 8004be4:	08004f93 	.word	0x08004f93
 8004be8:	0800542f 	.word	0x0800542f
 8004bec:	0800542f 	.word	0x0800542f
 8004bf0:	0800542f 	.word	0x0800542f
 8004bf4:	0800542f 	.word	0x0800542f
 8004bf8:	0800542f 	.word	0x0800542f
 8004bfc:	0800542f 	.word	0x0800542f
 8004c00:	0800542f 	.word	0x0800542f
 8004c04:	0800542f 	.word	0x0800542f
 8004c08:	0800542f 	.word	0x0800542f
 8004c0c:	0800542f 	.word	0x0800542f
 8004c10:	0800542f 	.word	0x0800542f
 8004c14:	0800542f 	.word	0x0800542f
 8004c18:	0800542f 	.word	0x0800542f
 8004c1c:	0800542f 	.word	0x0800542f
 8004c20:	0800542f 	.word	0x0800542f
 8004c24:	08005015 	.word	0x08005015
 8004c28:	687b      	ldr	r3, [r7, #4]
 8004c2a:	2b40      	cmp	r3, #64	; 0x40
 8004c2c:	f000 82bd 	beq.w	80051aa <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
      }

#endif /* OCTOSPI1 || OCTOSPI2 */

    default:
      break;
 8004c30:	e3fd      	b.n	800542e <HAL_RCCEx_GetPeriphCLKFreq+0xabe>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI1, pllvco);
 8004c32:	69b9      	ldr	r1, [r7, #24]
 8004c34:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8004c38:	f000 fde6 	bl	8005808 <RCCEx_GetSAIxPeriphCLKFreq>
 8004c3c:	61f8      	str	r0, [r7, #28]
      break;
 8004c3e:	e3f7      	b.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      frequency = RCCEx_GetSAIxPeriphCLKFreq(RCC_PERIPHCLK_SAI2, pllvco);
 8004c40:	69b9      	ldr	r1, [r7, #24]
 8004c42:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8004c46:	f000 fddf 	bl	8005808 <RCCEx_GetSAIxPeriphCLKFreq>
 8004c4a:	61f8      	str	r0, [r7, #28]
      break;
 8004c4c:	e3f0      	b.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = READ_BIT(RCC->CCIPR, RCC_CCIPR_CLK48SEL);
 8004c4e:	4b0c      	ldr	r3, [pc, #48]	; (8004c80 <HAL_RCCEx_GetPeriphCLKFreq+0x310>)
 8004c50:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004c54:	f003 6340 	and.w	r3, r3, #201326592	; 0xc000000
 8004c58:	613b      	str	r3, [r7, #16]
 8004c5a:	693b      	ldr	r3, [r7, #16]
 8004c5c:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004c60:	d018      	beq.n	8004c94 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
 8004c62:	693b      	ldr	r3, [r7, #16]
 8004c64:	f1b3 6f40 	cmp.w	r3, #201326592	; 0xc000000
 8004c68:	f200 808b 	bhi.w	8004d82 <HAL_RCCEx_GetPeriphCLKFreq+0x412>
 8004c6c:	693b      	ldr	r3, [r7, #16]
 8004c6e:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004c72:	d059      	beq.n	8004d28 <HAL_RCCEx_GetPeriphCLKFreq+0x3b8>
 8004c74:	693b      	ldr	r3, [r7, #16]
 8004c76:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004c7a:	d028      	beq.n	8004cce <HAL_RCCEx_GetPeriphCLKFreq+0x35e>
          break;
 8004c7c:	e081      	b.n	8004d82 <HAL_RCCEx_GetPeriphCLKFreq+0x412>
 8004c7e:	bf00      	nop
 8004c80:	40021000 	.word	0x40021000
 8004c84:	0003d090 	.word	0x0003d090
 8004c88:	08008d54 	.word	0x08008d54
 8004c8c:	00f42400 	.word	0x00f42400
 8004c90:	007a1200 	.word	0x007a1200
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_MSIRDY))
 8004c94:	4bae      	ldr	r3, [pc, #696]	; (8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	f003 0302 	and.w	r3, r3, #2
 8004c9c:	2b02      	cmp	r3, #2
 8004c9e:	d172      	bne.n	8004d86 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
            frequency = MSIRangeTable[(__HAL_RCC_GET_MSI_RANGE() >> 4U)];
 8004ca0:	4bab      	ldr	r3, [pc, #684]	; (8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8004ca2:	681b      	ldr	r3, [r3, #0]
 8004ca4:	f003 0308 	and.w	r3, r3, #8
 8004ca8:	2b00      	cmp	r3, #0
 8004caa:	d005      	beq.n	8004cb8 <HAL_RCCEx_GetPeriphCLKFreq+0x348>
 8004cac:	4ba8      	ldr	r3, [pc, #672]	; (8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	091b      	lsrs	r3, r3, #4
 8004cb2:	f003 030f 	and.w	r3, r3, #15
 8004cb6:	e005      	b.n	8004cc4 <HAL_RCCEx_GetPeriphCLKFreq+0x354>
 8004cb8:	4ba5      	ldr	r3, [pc, #660]	; (8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8004cba:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004cbe:	0a1b      	lsrs	r3, r3, #8
 8004cc0:	f003 030f 	and.w	r3, r3, #15
 8004cc4:	4aa3      	ldr	r2, [pc, #652]	; (8004f54 <HAL_RCCEx_GetPeriphCLKFreq+0x5e4>)
 8004cc6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004cca:	61fb      	str	r3, [r7, #28]
          break;
 8004ccc:	e05b      	b.n	8004d86 <HAL_RCCEx_GetPeriphCLKFreq+0x416>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY))
 8004cce:	4ba0      	ldr	r3, [pc, #640]	; (8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8004cd6:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004cda:	d156      	bne.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
            if(HAL_IS_BIT_SET(RCC->PLLCFGR, RCC_PLLCFGR_PLLQEN))
 8004cdc:	4b9c      	ldr	r3, [pc, #624]	; (8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8004cde:	68db      	ldr	r3, [r3, #12]
 8004ce0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004ce4:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004ce8:	d14f      	bne.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
              plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 8004cea:	4b99      	ldr	r3, [pc, #612]	; (8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	0a1b      	lsrs	r3, r3, #8
 8004cf0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004cf4:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004cf6:	69bb      	ldr	r3, [r7, #24]
 8004cf8:	68fa      	ldr	r2, [r7, #12]
 8004cfa:	fb02 f203 	mul.w	r2, r2, r3
 8004cfe:	4b94      	ldr	r3, [pc, #592]	; (8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8004d00:	68db      	ldr	r3, [r3, #12]
 8004d02:	091b      	lsrs	r3, r3, #4
 8004d04:	f003 0307 	and.w	r3, r3, #7
 8004d08:	3301      	adds	r3, #1
 8004d0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d0e:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLQ) >> RCC_PLLCFGR_PLLQ_Pos) + 1U) << 1U));
 8004d10:	4b8f      	ldr	r3, [pc, #572]	; (8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8004d12:	68db      	ldr	r3, [r3, #12]
 8004d14:	0d5b      	lsrs	r3, r3, #21
 8004d16:	f003 0303 	and.w	r3, r3, #3
 8004d1a:	3301      	adds	r3, #1
 8004d1c:	005b      	lsls	r3, r3, #1
 8004d1e:	69ba      	ldr	r2, [r7, #24]
 8004d20:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d24:	61fb      	str	r3, [r7, #28]
          break;
 8004d26:	e030      	b.n	8004d8a <HAL_RCCEx_GetPeriphCLKFreq+0x41a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY))
 8004d28:	4b89      	ldr	r3, [pc, #548]	; (8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8004d2a:	681b      	ldr	r3, [r3, #0]
 8004d2c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8004d30:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8004d34:	d12b      	bne.n	8004d8e <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
            if(HAL_IS_BIT_SET(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1QEN))
 8004d36:	4b86      	ldr	r3, [pc, #536]	; (8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8004d38:	691b      	ldr	r3, [r3, #16]
 8004d3a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d3e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8004d42:	d124      	bne.n	8004d8e <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
              plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 8004d44:	4b82      	ldr	r3, [pc, #520]	; (8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8004d46:	691b      	ldr	r3, [r3, #16]
 8004d48:	0a1b      	lsrs	r3, r3, #8
 8004d4a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8004d4e:	60fb      	str	r3, [r7, #12]
              pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8004d50:	69bb      	ldr	r3, [r7, #24]
 8004d52:	68fa      	ldr	r2, [r7, #12]
 8004d54:	fb02 f203 	mul.w	r2, r2, r3
 8004d58:	4b7d      	ldr	r3, [pc, #500]	; (8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8004d5a:	68db      	ldr	r3, [r3, #12]
 8004d5c:	091b      	lsrs	r3, r3, #4
 8004d5e:	f003 0307 	and.w	r3, r3, #7
 8004d62:	3301      	adds	r3, #1
 8004d64:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d68:	61bb      	str	r3, [r7, #24]
              frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1Q) >> RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) + 1U) << 1U));
 8004d6a:	4b79      	ldr	r3, [pc, #484]	; (8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	0d5b      	lsrs	r3, r3, #21
 8004d70:	f003 0303 	and.w	r3, r3, #3
 8004d74:	3301      	adds	r3, #1
 8004d76:	005b      	lsls	r3, r3, #1
 8004d78:	69ba      	ldr	r2, [r7, #24]
 8004d7a:	fbb2 f3f3 	udiv	r3, r2, r3
 8004d7e:	61fb      	str	r3, [r7, #28]
          break;
 8004d80:	e005      	b.n	8004d8e <HAL_RCCEx_GetPeriphCLKFreq+0x41e>
          break;
 8004d82:	bf00      	nop
 8004d84:	e354      	b.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8004d86:	bf00      	nop
 8004d88:	e352      	b.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8004d8a:	bf00      	nop
 8004d8c:	e350      	b.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8004d8e:	bf00      	nop
        break;
 8004d90:	e34e      	b.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_USART1_SOURCE();
 8004d92:	4b6f      	ldr	r3, [pc, #444]	; (8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8004d94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004d98:	f003 0303 	and.w	r3, r3, #3
 8004d9c:	613b      	str	r3, [r7, #16]
 8004d9e:	693b      	ldr	r3, [r7, #16]
 8004da0:	2b03      	cmp	r3, #3
 8004da2:	d828      	bhi.n	8004df6 <HAL_RCCEx_GetPeriphCLKFreq+0x486>
 8004da4:	a201      	add	r2, pc, #4	; (adr r2, 8004dac <HAL_RCCEx_GetPeriphCLKFreq+0x43c>)
 8004da6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004daa:	bf00      	nop
 8004dac:	08004dbd 	.word	0x08004dbd
 8004db0:	08004dc5 	.word	0x08004dc5
 8004db4:	08004dcd 	.word	0x08004dcd
 8004db8:	08004de1 	.word	0x08004de1
          frequency = HAL_RCC_GetPCLK2Freq();
 8004dbc:	f7ff fa78 	bl	80042b0 <HAL_RCC_GetPCLK2Freq>
 8004dc0:	61f8      	str	r0, [r7, #28]
          break;
 8004dc2:	e01d      	b.n	8004e00 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
          frequency = HAL_RCC_GetSysClockFreq();
 8004dc4:	f7ff f9c6 	bl	8004154 <HAL_RCC_GetSysClockFreq>
 8004dc8:	61f8      	str	r0, [r7, #28]
          break;
 8004dca:	e019      	b.n	8004e00 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004dcc:	4b60      	ldr	r3, [pc, #384]	; (8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dd4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004dd8:	d10f      	bne.n	8004dfa <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
            frequency = HSI_VALUE;
 8004dda:	4b5f      	ldr	r3, [pc, #380]	; (8004f58 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 8004ddc:	61fb      	str	r3, [r7, #28]
          break;
 8004dde:	e00c      	b.n	8004dfa <HAL_RCCEx_GetPeriphCLKFreq+0x48a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004de0:	4b5b      	ldr	r3, [pc, #364]	; (8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8004de2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004de6:	f003 0302 	and.w	r3, r3, #2
 8004dea:	2b02      	cmp	r3, #2
 8004dec:	d107      	bne.n	8004dfe <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
            frequency = LSE_VALUE;
 8004dee:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004df2:	61fb      	str	r3, [r7, #28]
          break;
 8004df4:	e003      	b.n	8004dfe <HAL_RCCEx_GetPeriphCLKFreq+0x48e>
          break;
 8004df6:	bf00      	nop
 8004df8:	e31a      	b.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8004dfa:	bf00      	nop
 8004dfc:	e318      	b.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8004dfe:	bf00      	nop
        break;
 8004e00:	e316      	b.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_USART2_SOURCE();
 8004e02:	4b53      	ldr	r3, [pc, #332]	; (8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8004e04:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e08:	f003 030c 	and.w	r3, r3, #12
 8004e0c:	613b      	str	r3, [r7, #16]
 8004e0e:	693b      	ldr	r3, [r7, #16]
 8004e10:	2b0c      	cmp	r3, #12
 8004e12:	d83a      	bhi.n	8004e8a <HAL_RCCEx_GetPeriphCLKFreq+0x51a>
 8004e14:	a201      	add	r2, pc, #4	; (adr r2, 8004e1c <HAL_RCCEx_GetPeriphCLKFreq+0x4ac>)
 8004e16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004e1a:	bf00      	nop
 8004e1c:	08004e51 	.word	0x08004e51
 8004e20:	08004e8b 	.word	0x08004e8b
 8004e24:	08004e8b 	.word	0x08004e8b
 8004e28:	08004e8b 	.word	0x08004e8b
 8004e2c:	08004e59 	.word	0x08004e59
 8004e30:	08004e8b 	.word	0x08004e8b
 8004e34:	08004e8b 	.word	0x08004e8b
 8004e38:	08004e8b 	.word	0x08004e8b
 8004e3c:	08004e61 	.word	0x08004e61
 8004e40:	08004e8b 	.word	0x08004e8b
 8004e44:	08004e8b 	.word	0x08004e8b
 8004e48:	08004e8b 	.word	0x08004e8b
 8004e4c:	08004e75 	.word	0x08004e75
          frequency = HAL_RCC_GetPCLK1Freq();
 8004e50:	f7ff fa18 	bl	8004284 <HAL_RCC_GetPCLK1Freq>
 8004e54:	61f8      	str	r0, [r7, #28]
          break;
 8004e56:	e01d      	b.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x524>
          frequency = HAL_RCC_GetSysClockFreq();
 8004e58:	f7ff f97c 	bl	8004154 <HAL_RCC_GetSysClockFreq>
 8004e5c:	61f8      	str	r0, [r7, #28]
          break;
 8004e5e:	e019      	b.n	8004e94 <HAL_RCCEx_GetPeriphCLKFreq+0x524>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004e60:	4b3b      	ldr	r3, [pc, #236]	; (8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e68:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004e6c:	d10f      	bne.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
            frequency = HSI_VALUE;
 8004e6e:	4b3a      	ldr	r3, [pc, #232]	; (8004f58 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 8004e70:	61fb      	str	r3, [r7, #28]
          break;
 8004e72:	e00c      	b.n	8004e8e <HAL_RCCEx_GetPeriphCLKFreq+0x51e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004e74:	4b36      	ldr	r3, [pc, #216]	; (8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8004e76:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004e7a:	f003 0302 	and.w	r3, r3, #2
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d107      	bne.n	8004e92 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
            frequency = LSE_VALUE;
 8004e82:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004e86:	61fb      	str	r3, [r7, #28]
          break;
 8004e88:	e003      	b.n	8004e92 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
          break;
 8004e8a:	bf00      	nop
 8004e8c:	e2d0      	b.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8004e8e:	bf00      	nop
 8004e90:	e2ce      	b.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8004e92:	bf00      	nop
        break;
 8004e94:	e2cc      	b.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_USART3_SOURCE();
 8004e96:	4b2e      	ldr	r3, [pc, #184]	; (8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8004e98:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004e9c:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8004ea0:	613b      	str	r3, [r7, #16]
 8004ea2:	693b      	ldr	r3, [r7, #16]
 8004ea4:	2b30      	cmp	r3, #48	; 0x30
 8004ea6:	d021      	beq.n	8004eec <HAL_RCCEx_GetPeriphCLKFreq+0x57c>
 8004ea8:	693b      	ldr	r3, [r7, #16]
 8004eaa:	2b30      	cmp	r3, #48	; 0x30
 8004eac:	d829      	bhi.n	8004f02 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
 8004eae:	693b      	ldr	r3, [r7, #16]
 8004eb0:	2b20      	cmp	r3, #32
 8004eb2:	d011      	beq.n	8004ed8 <HAL_RCCEx_GetPeriphCLKFreq+0x568>
 8004eb4:	693b      	ldr	r3, [r7, #16]
 8004eb6:	2b20      	cmp	r3, #32
 8004eb8:	d823      	bhi.n	8004f02 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
 8004eba:	693b      	ldr	r3, [r7, #16]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d003      	beq.n	8004ec8 <HAL_RCCEx_GetPeriphCLKFreq+0x558>
 8004ec0:	693b      	ldr	r3, [r7, #16]
 8004ec2:	2b10      	cmp	r3, #16
 8004ec4:	d004      	beq.n	8004ed0 <HAL_RCCEx_GetPeriphCLKFreq+0x560>
          break;
 8004ec6:	e01c      	b.n	8004f02 <HAL_RCCEx_GetPeriphCLKFreq+0x592>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004ec8:	f7ff f9dc 	bl	8004284 <HAL_RCC_GetPCLK1Freq>
 8004ecc:	61f8      	str	r0, [r7, #28]
          break;
 8004ece:	e01d      	b.n	8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
          frequency = HAL_RCC_GetSysClockFreq();
 8004ed0:	f7ff f940 	bl	8004154 <HAL_RCC_GetSysClockFreq>
 8004ed4:	61f8      	str	r0, [r7, #28]
          break;
 8004ed6:	e019      	b.n	8004f0c <HAL_RCCEx_GetPeriphCLKFreq+0x59c>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004ed8:	4b1d      	ldr	r3, [pc, #116]	; (8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ee0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004ee4:	d10f      	bne.n	8004f06 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
            frequency = HSI_VALUE;
 8004ee6:	4b1c      	ldr	r3, [pc, #112]	; (8004f58 <HAL_RCCEx_GetPeriphCLKFreq+0x5e8>)
 8004ee8:	61fb      	str	r3, [r7, #28]
          break;
 8004eea:	e00c      	b.n	8004f06 <HAL_RCCEx_GetPeriphCLKFreq+0x596>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004eec:	4b18      	ldr	r3, [pc, #96]	; (8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8004eee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ef2:	f003 0302 	and.w	r3, r3, #2
 8004ef6:	2b02      	cmp	r3, #2
 8004ef8:	d107      	bne.n	8004f0a <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
            frequency = LSE_VALUE;
 8004efa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004efe:	61fb      	str	r3, [r7, #28]
          break;
 8004f00:	e003      	b.n	8004f0a <HAL_RCCEx_GetPeriphCLKFreq+0x59a>
          break;
 8004f02:	bf00      	nop
 8004f04:	e294      	b.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8004f06:	bf00      	nop
 8004f08:	e292      	b.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8004f0a:	bf00      	nop
        break;
 8004f0c:	e290      	b.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_UART4_SOURCE();
 8004f0e:	4b10      	ldr	r3, [pc, #64]	; (8004f50 <HAL_RCCEx_GetPeriphCLKFreq+0x5e0>)
 8004f10:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f14:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 8004f18:	613b      	str	r3, [r7, #16]
 8004f1a:	693b      	ldr	r3, [r7, #16]
 8004f1c:	2bc0      	cmp	r3, #192	; 0xc0
 8004f1e:	d027      	beq.n	8004f70 <HAL_RCCEx_GetPeriphCLKFreq+0x600>
 8004f20:	693b      	ldr	r3, [r7, #16]
 8004f22:	2bc0      	cmp	r3, #192	; 0xc0
 8004f24:	d82f      	bhi.n	8004f86 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8004f26:	693b      	ldr	r3, [r7, #16]
 8004f28:	2b80      	cmp	r3, #128	; 0x80
 8004f2a:	d017      	beq.n	8004f5c <HAL_RCCEx_GetPeriphCLKFreq+0x5ec>
 8004f2c:	693b      	ldr	r3, [r7, #16]
 8004f2e:	2b80      	cmp	r3, #128	; 0x80
 8004f30:	d829      	bhi.n	8004f86 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
 8004f32:	693b      	ldr	r3, [r7, #16]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d003      	beq.n	8004f40 <HAL_RCCEx_GetPeriphCLKFreq+0x5d0>
 8004f38:	693b      	ldr	r3, [r7, #16]
 8004f3a:	2b40      	cmp	r3, #64	; 0x40
 8004f3c:	d004      	beq.n	8004f48 <HAL_RCCEx_GetPeriphCLKFreq+0x5d8>
          break;
 8004f3e:	e022      	b.n	8004f86 <HAL_RCCEx_GetPeriphCLKFreq+0x616>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004f40:	f7ff f9a0 	bl	8004284 <HAL_RCC_GetPCLK1Freq>
 8004f44:	61f8      	str	r0, [r7, #28]
          break;
 8004f46:	e023      	b.n	8004f90 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
          frequency = HAL_RCC_GetSysClockFreq();
 8004f48:	f7ff f904 	bl	8004154 <HAL_RCC_GetSysClockFreq>
 8004f4c:	61f8      	str	r0, [r7, #28]
          break;
 8004f4e:	e01f      	b.n	8004f90 <HAL_RCCEx_GetPeriphCLKFreq+0x620>
 8004f50:	40021000 	.word	0x40021000
 8004f54:	08008d54 	.word	0x08008d54
 8004f58:	00f42400 	.word	0x00f42400
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004f5c:	4ba9      	ldr	r3, [pc, #676]	; (8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004f64:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004f68:	d10f      	bne.n	8004f8a <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
            frequency = HSI_VALUE;
 8004f6a:	4ba7      	ldr	r3, [pc, #668]	; (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x898>)
 8004f6c:	61fb      	str	r3, [r7, #28]
          break;
 8004f6e:	e00c      	b.n	8004f8a <HAL_RCCEx_GetPeriphCLKFreq+0x61a>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004f70:	4ba4      	ldr	r3, [pc, #656]	; (8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8004f72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004f76:	f003 0302 	and.w	r3, r3, #2
 8004f7a:	2b02      	cmp	r3, #2
 8004f7c:	d107      	bne.n	8004f8e <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
            frequency = LSE_VALUE;
 8004f7e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8004f82:	61fb      	str	r3, [r7, #28]
          break;
 8004f84:	e003      	b.n	8004f8e <HAL_RCCEx_GetPeriphCLKFreq+0x61e>
          break;
 8004f86:	bf00      	nop
 8004f88:	e252      	b.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8004f8a:	bf00      	nop
 8004f8c:	e250      	b.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8004f8e:	bf00      	nop
        break;
 8004f90:	e24e      	b.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_UART5_SOURCE();
 8004f92:	4b9c      	ldr	r3, [pc, #624]	; (8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8004f94:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004f98:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004f9c:	613b      	str	r3, [r7, #16]
 8004f9e:	693b      	ldr	r3, [r7, #16]
 8004fa0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fa4:	d025      	beq.n	8004ff2 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004fac:	d82c      	bhi.n	8005008 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fb4:	d013      	beq.n	8004fde <HAL_RCCEx_GetPeriphCLKFreq+0x66e>
 8004fb6:	693b      	ldr	r3, [r7, #16]
 8004fb8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004fbc:	d824      	bhi.n	8005008 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
 8004fbe:	693b      	ldr	r3, [r7, #16]
 8004fc0:	2b00      	cmp	r3, #0
 8004fc2:	d004      	beq.n	8004fce <HAL_RCCEx_GetPeriphCLKFreq+0x65e>
 8004fc4:	693b      	ldr	r3, [r7, #16]
 8004fc6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004fca:	d004      	beq.n	8004fd6 <HAL_RCCEx_GetPeriphCLKFreq+0x666>
          break;
 8004fcc:	e01c      	b.n	8005008 <HAL_RCCEx_GetPeriphCLKFreq+0x698>
          frequency = HAL_RCC_GetPCLK1Freq();
 8004fce:	f7ff f959 	bl	8004284 <HAL_RCC_GetPCLK1Freq>
 8004fd2:	61f8      	str	r0, [r7, #28]
          break;
 8004fd4:	e01d      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
          frequency = HAL_RCC_GetSysClockFreq();
 8004fd6:	f7ff f8bd 	bl	8004154 <HAL_RCC_GetSysClockFreq>
 8004fda:	61f8      	str	r0, [r7, #28]
          break;
 8004fdc:	e019      	b.n	8005012 <HAL_RCCEx_GetPeriphCLKFreq+0x6a2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8004fde:	4b89      	ldr	r3, [pc, #548]	; (8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8004fe0:	681b      	ldr	r3, [r3, #0]
 8004fe2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004fe6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004fea:	d10f      	bne.n	800500c <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
            frequency = HSI_VALUE;
 8004fec:	4b86      	ldr	r3, [pc, #536]	; (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x898>)
 8004fee:	61fb      	str	r3, [r7, #28]
          break;
 8004ff0:	e00c      	b.n	800500c <HAL_RCCEx_GetPeriphCLKFreq+0x69c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8004ff2:	4b84      	ldr	r3, [pc, #528]	; (8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8004ff4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8004ff8:	f003 0302 	and.w	r3, r3, #2
 8004ffc:	2b02      	cmp	r3, #2
 8004ffe:	d107      	bne.n	8005010 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
            frequency = LSE_VALUE;
 8005000:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005004:	61fb      	str	r3, [r7, #28]
          break;
 8005006:	e003      	b.n	8005010 <HAL_RCCEx_GetPeriphCLKFreq+0x6a0>
          break;
 8005008:	bf00      	nop
 800500a:	e211      	b.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800500c:	bf00      	nop
 800500e:	e20f      	b.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8005010:	bf00      	nop
        break;
 8005012:	e20d      	b.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_LPUART1_SOURCE();
 8005014:	4b7b      	ldr	r3, [pc, #492]	; (8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8005016:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800501a:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800501e:	613b      	str	r3, [r7, #16]
 8005020:	693b      	ldr	r3, [r7, #16]
 8005022:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8005026:	d025      	beq.n	8005074 <HAL_RCCEx_GetPeriphCLKFreq+0x704>
 8005028:	693b      	ldr	r3, [r7, #16]
 800502a:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800502e:	d82c      	bhi.n	800508a <HAL_RCCEx_GetPeriphCLKFreq+0x71a>
 8005030:	693b      	ldr	r3, [r7, #16]
 8005032:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005036:	d013      	beq.n	8005060 <HAL_RCCEx_GetPeriphCLKFreq+0x6f0>
 8005038:	693b      	ldr	r3, [r7, #16]
 800503a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800503e:	d824      	bhi.n	800508a <HAL_RCCEx_GetPeriphCLKFreq+0x71a>
 8005040:	693b      	ldr	r3, [r7, #16]
 8005042:	2b00      	cmp	r3, #0
 8005044:	d004      	beq.n	8005050 <HAL_RCCEx_GetPeriphCLKFreq+0x6e0>
 8005046:	693b      	ldr	r3, [r7, #16]
 8005048:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800504c:	d004      	beq.n	8005058 <HAL_RCCEx_GetPeriphCLKFreq+0x6e8>
          break;
 800504e:	e01c      	b.n	800508a <HAL_RCCEx_GetPeriphCLKFreq+0x71a>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005050:	f7ff f918 	bl	8004284 <HAL_RCC_GetPCLK1Freq>
 8005054:	61f8      	str	r0, [r7, #28]
          break;
 8005056:	e01d      	b.n	8005094 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
          frequency = HAL_RCC_GetSysClockFreq();
 8005058:	f7ff f87c 	bl	8004154 <HAL_RCC_GetSysClockFreq>
 800505c:	61f8      	str	r0, [r7, #28]
          break;
 800505e:	e019      	b.n	8005094 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005060:	4b68      	ldr	r3, [pc, #416]	; (8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8005062:	681b      	ldr	r3, [r3, #0]
 8005064:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005068:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800506c:	d10f      	bne.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
            frequency = HSI_VALUE;
 800506e:	4b66      	ldr	r3, [pc, #408]	; (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x898>)
 8005070:	61fb      	str	r3, [r7, #28]
          break;
 8005072:	e00c      	b.n	800508e <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 8005074:	4b63      	ldr	r3, [pc, #396]	; (8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8005076:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800507a:	f003 0302 	and.w	r3, r3, #2
 800507e:	2b02      	cmp	r3, #2
 8005080:	d107      	bne.n	8005092 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
            frequency = LSE_VALUE;
 8005082:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8005086:	61fb      	str	r3, [r7, #28]
          break;
 8005088:	e003      	b.n	8005092 <HAL_RCCEx_GetPeriphCLKFreq+0x722>
          break;
 800508a:	bf00      	nop
 800508c:	e1d0      	b.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800508e:	bf00      	nop
 8005090:	e1ce      	b.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8005092:	bf00      	nop
        break;
 8005094:	e1cc      	b.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005096:	4b5b      	ldr	r3, [pc, #364]	; (8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8005098:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800509c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80050a0:	613b      	str	r3, [r7, #16]
 80050a2:	693b      	ldr	r3, [r7, #16]
 80050a4:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80050a8:	d00c      	beq.n	80050c4 <HAL_RCCEx_GetPeriphCLKFreq+0x754>
 80050aa:	693b      	ldr	r3, [r7, #16]
 80050ac:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 80050b0:	d864      	bhi.n	800517c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
 80050b2:	693b      	ldr	r3, [r7, #16]
 80050b4:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80050b8:	d008      	beq.n	80050cc <HAL_RCCEx_GetPeriphCLKFreq+0x75c>
 80050ba:	693b      	ldr	r3, [r7, #16]
 80050bc:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80050c0:	d030      	beq.n	8005124 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>
          break;
 80050c2:	e05b      	b.n	800517c <HAL_RCCEx_GetPeriphCLKFreq+0x80c>
          frequency = HAL_RCC_GetSysClockFreq();
 80050c4:	f7ff f846 	bl	8004154 <HAL_RCC_GetSysClockFreq>
 80050c8:	61f8      	str	r0, [r7, #28]
          break;
 80050ca:	e05c      	b.n	8005186 <HAL_RCCEx_GetPeriphCLKFreq+0x816>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_ADC1CLK) != 0U))
 80050cc:	4b4d      	ldr	r3, [pc, #308]	; (8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80050ce:	681b      	ldr	r3, [r3, #0]
 80050d0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80050d4:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80050d8:	d152      	bne.n	8005180 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
 80050da:	4b4a      	ldr	r3, [pc, #296]	; (8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80050dc:	691b      	ldr	r3, [r3, #16]
 80050de:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d04c      	beq.n	8005180 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
            plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 80050e6:	4b47      	ldr	r3, [pc, #284]	; (8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80050e8:	691b      	ldr	r3, [r3, #16]
 80050ea:	0a1b      	lsrs	r3, r3, #8
 80050ec:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80050f0:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 80050f2:	69bb      	ldr	r3, [r7, #24]
 80050f4:	68fa      	ldr	r2, [r7, #12]
 80050f6:	fb02 f203 	mul.w	r2, r2, r3
 80050fa:	4b42      	ldr	r3, [pc, #264]	; (8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80050fc:	68db      	ldr	r3, [r3, #12]
 80050fe:	091b      	lsrs	r3, r3, #4
 8005100:	f003 0307 	and.w	r3, r3, #7
 8005104:	3301      	adds	r3, #1
 8005106:	fbb2 f3f3 	udiv	r3, r2, r3
 800510a:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1R) >> RCC_PLLSAI1CFGR_PLLSAI1R_Pos) + 1U) << 1U));
 800510c:	4b3d      	ldr	r3, [pc, #244]	; (8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800510e:	691b      	ldr	r3, [r3, #16]
 8005110:	0e5b      	lsrs	r3, r3, #25
 8005112:	f003 0303 	and.w	r3, r3, #3
 8005116:	3301      	adds	r3, #1
 8005118:	005b      	lsls	r3, r3, #1
 800511a:	69ba      	ldr	r2, [r7, #24]
 800511c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005120:	61fb      	str	r3, [r7, #28]
          break;
 8005122:	e02d      	b.n	8005180 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_ADC2CLK) != 0U))
 8005124:	4b37      	ldr	r3, [pc, #220]	; (8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800512c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005130:	d128      	bne.n	8005184 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
 8005132:	4b34      	ldr	r3, [pc, #208]	; (8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8005134:	695b      	ldr	r3, [r3, #20]
 8005136:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800513a:	2b00      	cmp	r3, #0
 800513c:	d022      	beq.n	8005184 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
            plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 800513e:	4b31      	ldr	r3, [pc, #196]	; (8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8005140:	695b      	ldr	r3, [r3, #20]
 8005142:	0a1b      	lsrs	r3, r3, #8
 8005144:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005148:	60fb      	str	r3, [r7, #12]
            pllvco = ((pllvco * plln) / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800514a:	69bb      	ldr	r3, [r7, #24]
 800514c:	68fa      	ldr	r2, [r7, #12]
 800514e:	fb02 f203 	mul.w	r2, r2, r3
 8005152:	4b2c      	ldr	r3, [pc, #176]	; (8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8005154:	68db      	ldr	r3, [r3, #12]
 8005156:	091b      	lsrs	r3, r3, #4
 8005158:	f003 0307 	and.w	r3, r3, #7
 800515c:	3301      	adds	r3, #1
 800515e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005162:	61bb      	str	r3, [r7, #24]
            frequency = (pllvco / (((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2R) >> RCC_PLLSAI2CFGR_PLLSAI2R_Pos) + 1U) << 1U));
 8005164:	4b27      	ldr	r3, [pc, #156]	; (8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 8005166:	695b      	ldr	r3, [r3, #20]
 8005168:	0e5b      	lsrs	r3, r3, #25
 800516a:	f003 0303 	and.w	r3, r3, #3
 800516e:	3301      	adds	r3, #1
 8005170:	005b      	lsls	r3, r3, #1
 8005172:	69ba      	ldr	r2, [r7, #24]
 8005174:	fbb2 f3f3 	udiv	r3, r2, r3
 8005178:	61fb      	str	r3, [r7, #28]
          break;
 800517a:	e003      	b.n	8005184 <HAL_RCCEx_GetPeriphCLKFreq+0x814>
          break;
 800517c:	bf00      	nop
 800517e:	e157      	b.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8005180:	bf00      	nop
 8005182:	e155      	b.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8005184:	bf00      	nop
        break;
 8005186:	e153      	b.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_DFSDM1_SOURCE();
 8005188:	4b1e      	ldr	r3, [pc, #120]	; (8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 800518a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800518e:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8005192:	613b      	str	r3, [r7, #16]
        if(srcclk == RCC_DFSDM1CLKSOURCE_PCLK2)
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d103      	bne.n	80051a2 <HAL_RCCEx_GetPeriphCLKFreq+0x832>
          frequency = HAL_RCC_GetPCLK2Freq();
 800519a:	f7ff f889 	bl	80042b0 <HAL_RCC_GetPCLK2Freq>
 800519e:	61f8      	str	r0, [r7, #28]
        break;
 80051a0:	e146      	b.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          frequency = HAL_RCC_GetSysClockFreq();
 80051a2:	f7fe ffd7 	bl	8004154 <HAL_RCC_GetSysClockFreq>
 80051a6:	61f8      	str	r0, [r7, #28]
        break;
 80051a8:	e142      	b.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_I2C1_SOURCE();
 80051aa:	4b16      	ldr	r3, [pc, #88]	; (8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80051ac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051b0:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 80051b4:	613b      	str	r3, [r7, #16]
 80051b6:	693b      	ldr	r3, [r7, #16]
 80051b8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051bc:	d013      	beq.n	80051e6 <HAL_RCCEx_GetPeriphCLKFreq+0x876>
 80051be:	693b      	ldr	r3, [r7, #16]
 80051c0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80051c4:	d819      	bhi.n	80051fa <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
 80051c6:	693b      	ldr	r3, [r7, #16]
 80051c8:	2b00      	cmp	r3, #0
 80051ca:	d004      	beq.n	80051d6 <HAL_RCCEx_GetPeriphCLKFreq+0x866>
 80051cc:	693b      	ldr	r3, [r7, #16]
 80051ce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80051d2:	d004      	beq.n	80051de <HAL_RCCEx_GetPeriphCLKFreq+0x86e>
          break;
 80051d4:	e011      	b.n	80051fa <HAL_RCCEx_GetPeriphCLKFreq+0x88a>
          frequency = HAL_RCC_GetPCLK1Freq();
 80051d6:	f7ff f855 	bl	8004284 <HAL_RCC_GetPCLK1Freq>
 80051da:	61f8      	str	r0, [r7, #28]
          break;
 80051dc:	e010      	b.n	8005200 <HAL_RCCEx_GetPeriphCLKFreq+0x890>
          frequency = HAL_RCC_GetSysClockFreq();
 80051de:	f7fe ffb9 	bl	8004154 <HAL_RCC_GetSysClockFreq>
 80051e2:	61f8      	str	r0, [r7, #28]
          break;
 80051e4:	e00c      	b.n	8005200 <HAL_RCCEx_GetPeriphCLKFreq+0x890>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80051e6:	4b07      	ldr	r3, [pc, #28]	; (8005204 <HAL_RCCEx_GetPeriphCLKFreq+0x894>)
 80051e8:	681b      	ldr	r3, [r3, #0]
 80051ea:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80051ee:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80051f2:	d104      	bne.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
            frequency = HSI_VALUE;
 80051f4:	4b04      	ldr	r3, [pc, #16]	; (8005208 <HAL_RCCEx_GetPeriphCLKFreq+0x898>)
 80051f6:	61fb      	str	r3, [r7, #28]
          break;
 80051f8:	e001      	b.n	80051fe <HAL_RCCEx_GetPeriphCLKFreq+0x88e>
          break;
 80051fa:	bf00      	nop
 80051fc:	e118      	b.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 80051fe:	bf00      	nop
        break;
 8005200:	e116      	b.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 8005202:	bf00      	nop
 8005204:	40021000 	.word	0x40021000
 8005208:	00f42400 	.word	0x00f42400
        srcclk = __HAL_RCC_GET_I2C2_SOURCE();
 800520c:	4b8b      	ldr	r3, [pc, #556]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800520e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005212:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8005216:	613b      	str	r3, [r7, #16]
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800521e:	d013      	beq.n	8005248 <HAL_RCCEx_GetPeriphCLKFreq+0x8d8>
 8005220:	693b      	ldr	r3, [r7, #16]
 8005222:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8005226:	d819      	bhi.n	800525c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
 8005228:	693b      	ldr	r3, [r7, #16]
 800522a:	2b00      	cmp	r3, #0
 800522c:	d004      	beq.n	8005238 <HAL_RCCEx_GetPeriphCLKFreq+0x8c8>
 800522e:	693b      	ldr	r3, [r7, #16]
 8005230:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005234:	d004      	beq.n	8005240 <HAL_RCCEx_GetPeriphCLKFreq+0x8d0>
          break;
 8005236:	e011      	b.n	800525c <HAL_RCCEx_GetPeriphCLKFreq+0x8ec>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005238:	f7ff f824 	bl	8004284 <HAL_RCC_GetPCLK1Freq>
 800523c:	61f8      	str	r0, [r7, #28]
          break;
 800523e:	e010      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          frequency = HAL_RCC_GetSysClockFreq();
 8005240:	f7fe ff88 	bl	8004154 <HAL_RCC_GetSysClockFreq>
 8005244:	61f8      	str	r0, [r7, #28]
          break;
 8005246:	e00c      	b.n	8005262 <HAL_RCCEx_GetPeriphCLKFreq+0x8f2>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005248:	4b7c      	ldr	r3, [pc, #496]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800524a:	681b      	ldr	r3, [r3, #0]
 800524c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005250:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005254:	d104      	bne.n	8005260 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
            frequency = HSI_VALUE;
 8005256:	4b7a      	ldr	r3, [pc, #488]	; (8005440 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8005258:	61fb      	str	r3, [r7, #28]
          break;
 800525a:	e001      	b.n	8005260 <HAL_RCCEx_GetPeriphCLKFreq+0x8f0>
          break;
 800525c:	bf00      	nop
 800525e:	e0e7      	b.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8005260:	bf00      	nop
        break;
 8005262:	e0e5      	b.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_I2C3_SOURCE();
 8005264:	4b75      	ldr	r3, [pc, #468]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005266:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800526a:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800526e:	613b      	str	r3, [r7, #16]
 8005270:	693b      	ldr	r3, [r7, #16]
 8005272:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005276:	d013      	beq.n	80052a0 <HAL_RCCEx_GetPeriphCLKFreq+0x930>
 8005278:	693b      	ldr	r3, [r7, #16]
 800527a:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800527e:	d819      	bhi.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
 8005280:	693b      	ldr	r3, [r7, #16]
 8005282:	2b00      	cmp	r3, #0
 8005284:	d004      	beq.n	8005290 <HAL_RCCEx_GetPeriphCLKFreq+0x920>
 8005286:	693b      	ldr	r3, [r7, #16]
 8005288:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800528c:	d004      	beq.n	8005298 <HAL_RCCEx_GetPeriphCLKFreq+0x928>
          break;
 800528e:	e011      	b.n	80052b4 <HAL_RCCEx_GetPeriphCLKFreq+0x944>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005290:	f7fe fff8 	bl	8004284 <HAL_RCC_GetPCLK1Freq>
 8005294:	61f8      	str	r0, [r7, #28]
          break;
 8005296:	e010      	b.n	80052ba <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
          frequency = HAL_RCC_GetSysClockFreq();
 8005298:	f7fe ff5c 	bl	8004154 <HAL_RCC_GetSysClockFreq>
 800529c:	61f8      	str	r0, [r7, #28]
          break;
 800529e:	e00c      	b.n	80052ba <HAL_RCCEx_GetPeriphCLKFreq+0x94a>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80052a0:	4b66      	ldr	r3, [pc, #408]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80052a2:	681b      	ldr	r3, [r3, #0]
 80052a4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052a8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80052ac:	d104      	bne.n	80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
            frequency = HSI_VALUE;
 80052ae:	4b64      	ldr	r3, [pc, #400]	; (8005440 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 80052b0:	61fb      	str	r3, [r7, #28]
          break;
 80052b2:	e001      	b.n	80052b8 <HAL_RCCEx_GetPeriphCLKFreq+0x948>
          break;
 80052b4:	bf00      	nop
 80052b6:	e0bb      	b.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 80052b8:	bf00      	nop
        break;
 80052ba:	e0b9      	b.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_LPTIM1_SOURCE();
 80052bc:	4b5f      	ldr	r3, [pc, #380]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80052be:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80052c2:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
 80052c6:	613b      	str	r3, [r7, #16]
 80052c8:	693b      	ldr	r3, [r7, #16]
 80052ca:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80052ce:	d02c      	beq.n	800532a <HAL_RCCEx_GetPeriphCLKFreq+0x9ba>
 80052d0:	693b      	ldr	r3, [r7, #16]
 80052d2:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 80052d6:	d833      	bhi.n	8005340 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80052de:	d01a      	beq.n	8005316 <HAL_RCCEx_GetPeriphCLKFreq+0x9a6>
 80052e0:	693b      	ldr	r3, [r7, #16]
 80052e2:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 80052e6:	d82b      	bhi.n	8005340 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
 80052e8:	693b      	ldr	r3, [r7, #16]
 80052ea:	2b00      	cmp	r3, #0
 80052ec:	d004      	beq.n	80052f8 <HAL_RCCEx_GetPeriphCLKFreq+0x988>
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80052f4:	d004      	beq.n	8005300 <HAL_RCCEx_GetPeriphCLKFreq+0x990>
          break;
 80052f6:	e023      	b.n	8005340 <HAL_RCCEx_GetPeriphCLKFreq+0x9d0>
          frequency = HAL_RCC_GetPCLK1Freq();
 80052f8:	f7fe ffc4 	bl	8004284 <HAL_RCC_GetPCLK1Freq>
 80052fc:	61f8      	str	r0, [r7, #28]
          break;
 80052fe:	e026      	b.n	800534e <HAL_RCCEx_GetPeriphCLKFreq+0x9de>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005300:	4b4e      	ldr	r3, [pc, #312]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005302:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8005306:	f003 0302 	and.w	r3, r3, #2
 800530a:	2b02      	cmp	r3, #2
 800530c:	d11a      	bne.n	8005344 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
              frequency = LSI_VALUE;
 800530e:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 8005312:	61fb      	str	r3, [r7, #28]
          break;
 8005314:	e016      	b.n	8005344 <HAL_RCCEx_GetPeriphCLKFreq+0x9d4>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005316:	4b49      	ldr	r3, [pc, #292]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800531e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005322:	d111      	bne.n	8005348 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
            frequency = HSI_VALUE;
 8005324:	4b46      	ldr	r3, [pc, #280]	; (8005440 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8005326:	61fb      	str	r3, [r7, #28]
          break;
 8005328:	e00e      	b.n	8005348 <HAL_RCCEx_GetPeriphCLKFreq+0x9d8>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 800532a:	4b44      	ldr	r3, [pc, #272]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800532c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005330:	f003 0302 	and.w	r3, r3, #2
 8005334:	2b02      	cmp	r3, #2
 8005336:	d109      	bne.n	800534c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
            frequency = LSE_VALUE;
 8005338:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800533c:	61fb      	str	r3, [r7, #28]
          break;
 800533e:	e005      	b.n	800534c <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
          break;
 8005340:	bf00      	nop
 8005342:	e075      	b.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8005344:	bf00      	nop
 8005346:	e073      	b.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 8005348:	bf00      	nop
 800534a:	e071      	b.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 800534c:	bf00      	nop
        break;
 800534e:	e06f      	b.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
       srcclk = __HAL_RCC_GET_LPTIM2_SOURCE();
 8005350:	4b3a      	ldr	r3, [pc, #232]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005352:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005356:	f403 1340 	and.w	r3, r3, #3145728	; 0x300000
 800535a:	613b      	str	r3, [r7, #16]
 800535c:	693b      	ldr	r3, [r7, #16]
 800535e:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005362:	d02c      	beq.n	80053be <HAL_RCCEx_GetPeriphCLKFreq+0xa4e>
 8005364:	693b      	ldr	r3, [r7, #16]
 8005366:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800536a:	d833      	bhi.n	80053d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 800536c:	693b      	ldr	r3, [r7, #16]
 800536e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005372:	d01a      	beq.n	80053aa <HAL_RCCEx_GetPeriphCLKFreq+0xa3a>
 8005374:	693b      	ldr	r3, [r7, #16]
 8005376:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800537a:	d82b      	bhi.n	80053d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
 800537c:	693b      	ldr	r3, [r7, #16]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d004      	beq.n	800538c <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8005382:	693b      	ldr	r3, [r7, #16]
 8005384:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005388:	d004      	beq.n	8005394 <HAL_RCCEx_GetPeriphCLKFreq+0xa24>
          break;
 800538a:	e023      	b.n	80053d4 <HAL_RCCEx_GetPeriphCLKFreq+0xa64>
          frequency = HAL_RCC_GetPCLK1Freq();
 800538c:	f7fe ff7a 	bl	8004284 <HAL_RCC_GetPCLK1Freq>
 8005390:	61f8      	str	r0, [r7, #28]
          break;
 8005392:	e026      	b.n	80053e2 <HAL_RCCEx_GetPeriphCLKFreq+0xa72>
          if(HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY))
 8005394:	4b29      	ldr	r3, [pc, #164]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 8005396:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800539a:	f003 0302 	and.w	r3, r3, #2
 800539e:	2b02      	cmp	r3, #2
 80053a0:	d11a      	bne.n	80053d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
              frequency = LSI_VALUE;
 80053a2:	f44f 43fa 	mov.w	r3, #32000	; 0x7d00
 80053a6:	61fb      	str	r3, [r7, #28]
          break;
 80053a8:	e016      	b.n	80053d8 <HAL_RCCEx_GetPeriphCLKFreq+0xa68>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 80053aa:	4b24      	ldr	r3, [pc, #144]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80053b2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80053b6:	d111      	bne.n	80053dc <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
            frequency = HSI_VALUE;
 80053b8:	4b21      	ldr	r3, [pc, #132]	; (8005440 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 80053ba:	61fb      	str	r3, [r7, #28]
          break;
 80053bc:	e00e      	b.n	80053dc <HAL_RCCEx_GetPeriphCLKFreq+0xa6c>
          if(HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSERDY))
 80053be:	4b1f      	ldr	r3, [pc, #124]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80053c0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80053c4:	f003 0302 	and.w	r3, r3, #2
 80053c8:	2b02      	cmp	r3, #2
 80053ca:	d109      	bne.n	80053e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
            frequency = LSE_VALUE;
 80053cc:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80053d0:	61fb      	str	r3, [r7, #28]
          break;
 80053d2:	e005      	b.n	80053e0 <HAL_RCCEx_GetPeriphCLKFreq+0xa70>
          break;
 80053d4:	bf00      	nop
 80053d6:	e02b      	b.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 80053d8:	bf00      	nop
 80053da:	e029      	b.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 80053dc:	bf00      	nop
 80053de:	e027      	b.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
          break;
 80053e0:	bf00      	nop
        break;
 80053e2:	e025      	b.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
        srcclk = __HAL_RCC_GET_SWPMI1_SOURCE();
 80053e4:	4b15      	ldr	r3, [pc, #84]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 80053e6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80053ea:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80053ee:	613b      	str	r3, [r7, #16]
 80053f0:	693b      	ldr	r3, [r7, #16]
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d004      	beq.n	8005400 <HAL_RCCEx_GetPeriphCLKFreq+0xa90>
 80053f6:	693b      	ldr	r3, [r7, #16]
 80053f8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80053fc:	d004      	beq.n	8005408 <HAL_RCCEx_GetPeriphCLKFreq+0xa98>
          break;
 80053fe:	e00d      	b.n	800541c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          frequency = HAL_RCC_GetPCLK1Freq();
 8005400:	f7fe ff40 	bl	8004284 <HAL_RCC_GetPCLK1Freq>
 8005404:	61f8      	str	r0, [r7, #28]
          break;
 8005406:	e009      	b.n	800541c <HAL_RCCEx_GetPeriphCLKFreq+0xaac>
          if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005408:	4b0c      	ldr	r3, [pc, #48]	; (800543c <HAL_RCCEx_GetPeriphCLKFreq+0xacc>)
 800540a:	681b      	ldr	r3, [r3, #0]
 800540c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005410:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005414:	d101      	bne.n	800541a <HAL_RCCEx_GetPeriphCLKFreq+0xaaa>
            frequency = HSI_VALUE;
 8005416:	4b0a      	ldr	r3, [pc, #40]	; (8005440 <HAL_RCCEx_GetPeriphCLKFreq+0xad0>)
 8005418:	61fb      	str	r3, [r7, #28]
          break;
 800541a:	bf00      	nop
        break;
 800541c:	e008      	b.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 800541e:	bf00      	nop
 8005420:	e006      	b.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 8005422:	bf00      	nop
 8005424:	e004      	b.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 8005426:	bf00      	nop
 8005428:	e002      	b.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 800542a:	bf00      	nop
 800542c:	e000      	b.n	8005430 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
      break;
 800542e:	bf00      	nop
    }
  }

  return(frequency);
 8005430:	69fb      	ldr	r3, [r7, #28]
}
 8005432:	4618      	mov	r0, r3
 8005434:	3720      	adds	r7, #32
 8005436:	46bd      	mov	sp, r7
 8005438:	bd80      	pop	{r7, pc}
 800543a:	bf00      	nop
 800543c:	40021000 	.word	0x40021000
 8005440:	00f42400 	.word	0x00f42400

08005444 <HAL_RCCEx_EnableMSIPLLMode>:
  * @note   Prior to enable the PLL-mode of the MSI for automatic hardware
  *         calibration LSE oscillator is to be enabled with HAL_RCC_OscConfig().
  * @retval None
  */
void HAL_RCCEx_EnableMSIPLLMode(void)
{
 8005444:	b480      	push	{r7}
 8005446:	af00      	add	r7, sp, #0
  SET_BIT(RCC->CR, RCC_CR_MSIPLLEN) ;
 8005448:	4b05      	ldr	r3, [pc, #20]	; (8005460 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800544a:	681b      	ldr	r3, [r3, #0]
 800544c:	4a04      	ldr	r2, [pc, #16]	; (8005460 <HAL_RCCEx_EnableMSIPLLMode+0x1c>)
 800544e:	f043 0304 	orr.w	r3, r3, #4
 8005452:	6013      	str	r3, [r2, #0]
}
 8005454:	bf00      	nop
 8005456:	46bd      	mov	sp, r7
 8005458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800545c:	4770      	bx	lr
 800545e:	bf00      	nop
 8005460:	40021000 	.word	0x40021000

08005464 <RCCEx_PLLSAI1_Config>:
  * @note   PLLSAI1 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI1_Config(RCC_PLLSAI1InitTypeDef *PllSai1, uint32_t Divider)
{
 8005464:	b580      	push	{r7, lr}
 8005466:	b084      	sub	sp, #16
 8005468:	af00      	add	r7, sp, #0
 800546a:	6078      	str	r0, [r7, #4]
 800546c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800546e:	2300      	movs	r3, #0
 8005470:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI1M_VALUE(PllSai1->PLLSAI1M));
  assert_param(IS_RCC_PLLSAI1N_VALUE(PllSai1->PLLSAI1N));
  assert_param(IS_RCC_PLLSAI1CLOCKOUT_VALUE(PllSai1->PLLSAI1ClockOut));

  /* Check that PLLSAI1 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 8005472:	4b75      	ldr	r3, [pc, #468]	; (8005648 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005474:	68db      	ldr	r3, [r3, #12]
 8005476:	f003 0303 	and.w	r3, r3, #3
 800547a:	2b00      	cmp	r3, #0
 800547c:	d018      	beq.n	80054b0 <RCCEx_PLLSAI1_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai1->PLLSAI1Source)
 800547e:	4b72      	ldr	r3, [pc, #456]	; (8005648 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005480:	68db      	ldr	r3, [r3, #12]
 8005482:	f003 0203 	and.w	r2, r3, #3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	681b      	ldr	r3, [r3, #0]
 800548a:	429a      	cmp	r2, r3
 800548c:	d10d      	bne.n	80054aa <RCCEx_PLLSAI1_Config+0x46>
       ||
       (PllSai1->PLLSAI1Source == RCC_PLLSOURCE_NONE)
 800548e:	687b      	ldr	r3, [r7, #4]
 8005490:	681b      	ldr	r3, [r3, #0]
       ||
 8005492:	2b00      	cmp	r3, #0
 8005494:	d009      	beq.n	80054aa <RCCEx_PLLSAI1_Config+0x46>
#if !defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai1->PLLSAI1M)
 8005496:	4b6c      	ldr	r3, [pc, #432]	; (8005648 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005498:	68db      	ldr	r3, [r3, #12]
 800549a:	091b      	lsrs	r3, r3, #4
 800549c:	f003 0307 	and.w	r3, r3, #7
 80054a0:	1c5a      	adds	r2, r3, #1
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	685b      	ldr	r3, [r3, #4]
       ||
 80054a6:	429a      	cmp	r2, r3
 80054a8:	d047      	beq.n	800553a <RCCEx_PLLSAI1_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 80054aa:	2301      	movs	r3, #1
 80054ac:	73fb      	strb	r3, [r7, #15]
 80054ae:	e044      	b.n	800553a <RCCEx_PLLSAI1_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI1 clock source availability */
    switch(PllSai1->PLLSAI1Source)
 80054b0:	687b      	ldr	r3, [r7, #4]
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	2b03      	cmp	r3, #3
 80054b6:	d018      	beq.n	80054ea <RCCEx_PLLSAI1_Config+0x86>
 80054b8:	2b03      	cmp	r3, #3
 80054ba:	d825      	bhi.n	8005508 <RCCEx_PLLSAI1_Config+0xa4>
 80054bc:	2b01      	cmp	r3, #1
 80054be:	d002      	beq.n	80054c6 <RCCEx_PLLSAI1_Config+0x62>
 80054c0:	2b02      	cmp	r3, #2
 80054c2:	d009      	beq.n	80054d8 <RCCEx_PLLSAI1_Config+0x74>
 80054c4:	e020      	b.n	8005508 <RCCEx_PLLSAI1_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80054c6:	4b60      	ldr	r3, [pc, #384]	; (8005648 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054c8:	681b      	ldr	r3, [r3, #0]
 80054ca:	f003 0302 	and.w	r3, r3, #2
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d11d      	bne.n	800550e <RCCEx_PLLSAI1_Config+0xaa>
      {
        status = HAL_ERROR;
 80054d2:	2301      	movs	r3, #1
 80054d4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054d6:	e01a      	b.n	800550e <RCCEx_PLLSAI1_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80054d8:	4b5b      	ldr	r3, [pc, #364]	; (8005648 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d116      	bne.n	8005512 <RCCEx_PLLSAI1_Config+0xae>
      {
        status = HAL_ERROR;
 80054e4:	2301      	movs	r3, #1
 80054e6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80054e8:	e013      	b.n	8005512 <RCCEx_PLLSAI1_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80054ea:	4b57      	ldr	r3, [pc, #348]	; (8005648 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d10f      	bne.n	8005516 <RCCEx_PLLSAI1_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80054f6:	4b54      	ldr	r3, [pc, #336]	; (8005648 <RCCEx_PLLSAI1_Config+0x1e4>)
 80054f8:	681b      	ldr	r3, [r3, #0]
 80054fa:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d109      	bne.n	8005516 <RCCEx_PLLSAI1_Config+0xb2>
        {
          status = HAL_ERROR;
 8005502:	2301      	movs	r3, #1
 8005504:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 8005506:	e006      	b.n	8005516 <RCCEx_PLLSAI1_Config+0xb2>
    default:
      status = HAL_ERROR;
 8005508:	2301      	movs	r3, #1
 800550a:	73fb      	strb	r3, [r7, #15]
      break;
 800550c:	e004      	b.n	8005518 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 800550e:	bf00      	nop
 8005510:	e002      	b.n	8005518 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005512:	bf00      	nop
 8005514:	e000      	b.n	8005518 <RCCEx_PLLSAI1_Config+0xb4>
      break;
 8005516:	bf00      	nop
    }

    if(status == HAL_OK)
 8005518:	7bfb      	ldrb	r3, [r7, #15]
 800551a:	2b00      	cmp	r3, #0
 800551c:	d10d      	bne.n	800553a <RCCEx_PLLSAI1_Config+0xd6>
#if defined(RCC_PLLSAI1M_DIV_1_16_SUPPORT)
      /* Set PLLSAI1 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai1->PLLSAI1Source);
#else
      /* Set PLLSAI1 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai1->PLLSAI1Source | (PllSai1->PLLSAI1M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 800551e:	4b4a      	ldr	r3, [pc, #296]	; (8005648 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005520:	68db      	ldr	r3, [r3, #12]
 8005522:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	6819      	ldr	r1, [r3, #0]
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	685b      	ldr	r3, [r3, #4]
 800552e:	3b01      	subs	r3, #1
 8005530:	011b      	lsls	r3, r3, #4
 8005532:	430b      	orrs	r3, r1
 8005534:	4944      	ldr	r1, [pc, #272]	; (8005648 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005536:	4313      	orrs	r3, r2
 8005538:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 800553a:	7bfb      	ldrb	r3, [r7, #15]
 800553c:	2b00      	cmp	r3, #0
 800553e:	d17d      	bne.n	800563c <RCCEx_PLLSAI1_Config+0x1d8>
  {
    /* Disable the PLLSAI1 */
    __HAL_RCC_PLLSAI1_DISABLE();
 8005540:	4b41      	ldr	r3, [pc, #260]	; (8005648 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	4a40      	ldr	r2, [pc, #256]	; (8005648 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005546:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800554a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800554c:	f7fc f85c 	bl	8001608 <HAL_GetTick>
 8005550:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI1 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005552:	e009      	b.n	8005568 <RCCEx_PLLSAI1_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005554:	f7fc f858 	bl	8001608 <HAL_GetTick>
 8005558:	4602      	mov	r2, r0
 800555a:	68bb      	ldr	r3, [r7, #8]
 800555c:	1ad3      	subs	r3, r2, r3
 800555e:	2b02      	cmp	r3, #2
 8005560:	d902      	bls.n	8005568 <RCCEx_PLLSAI1_Config+0x104>
      {
        status = HAL_TIMEOUT;
 8005562:	2303      	movs	r3, #3
 8005564:	73fb      	strb	r3, [r7, #15]
        break;
 8005566:	e005      	b.n	8005574 <RCCEx_PLLSAI1_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) != 0U)
 8005568:	4b37      	ldr	r3, [pc, #220]	; (8005648 <RCCEx_PLLSAI1_Config+0x1e4>)
 800556a:	681b      	ldr	r3, [r3, #0]
 800556c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005570:	2b00      	cmp	r3, #0
 8005572:	d1ef      	bne.n	8005554 <RCCEx_PLLSAI1_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 8005574:	7bfb      	ldrb	r3, [r7, #15]
 8005576:	2b00      	cmp	r3, #0
 8005578:	d160      	bne.n	800563c <RCCEx_PLLSAI1_Config+0x1d8>
    {
      if(Divider == DIVIDER_P_UPDATE)
 800557a:	683b      	ldr	r3, [r7, #0]
 800557c:	2b00      	cmp	r3, #0
 800557e:	d111      	bne.n	80055a4 <RCCEx_PLLSAI1_Config+0x140>
        MODIFY_REG(RCC->PLLSAI1CFGR,
                   RCC_PLLSAI1CFGR_PLLSAI1N | RCC_PLLSAI1CFGR_PLLSAI1PDIV,
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (PllSai1->PLLSAI1P << RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI1CFGR,
 8005580:	4b31      	ldr	r3, [pc, #196]	; (8005648 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005582:	691b      	ldr	r3, [r3, #16]
 8005584:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005588:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800558c:	687a      	ldr	r2, [r7, #4]
 800558e:	6892      	ldr	r2, [r2, #8]
 8005590:	0211      	lsls	r1, r2, #8
 8005592:	687a      	ldr	r2, [r7, #4]
 8005594:	68d2      	ldr	r2, [r2, #12]
 8005596:	0912      	lsrs	r2, r2, #4
 8005598:	0452      	lsls	r2, r2, #17
 800559a:	430a      	orrs	r2, r1
 800559c:	492a      	ldr	r1, [pc, #168]	; (8005648 <RCCEx_PLLSAI1_Config+0x1e4>)
 800559e:	4313      	orrs	r3, r2
 80055a0:	610b      	str	r3, [r1, #16]
 80055a2:	e027      	b.n	80055f4 <RCCEx_PLLSAI1_Config+0x190>
                   ((PllSai1->PLLSAI1P >> 4U) << RCC_PLLSAI1CFGR_PLLSAI1P_Pos));
#endif /* RCC_PLLSAI1P_DIV_2_31_SUPPORT */

#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }
      else if(Divider == DIVIDER_Q_UPDATE)
 80055a4:	683b      	ldr	r3, [r7, #0]
 80055a6:	2b01      	cmp	r3, #1
 80055a8:	d112      	bne.n	80055d0 <RCCEx_PLLSAI1_Config+0x16c>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1Q >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1Q_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor Q and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055aa:	4b27      	ldr	r3, [pc, #156]	; (8005648 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055ac:	691b      	ldr	r3, [r3, #16]
 80055ae:	f423 03c0 	bic.w	r3, r3, #6291456	; 0x600000
 80055b2:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80055b6:	687a      	ldr	r2, [r7, #4]
 80055b8:	6892      	ldr	r2, [r2, #8]
 80055ba:	0211      	lsls	r1, r2, #8
 80055bc:	687a      	ldr	r2, [r7, #4]
 80055be:	6912      	ldr	r2, [r2, #16]
 80055c0:	0852      	lsrs	r2, r2, #1
 80055c2:	3a01      	subs	r2, #1
 80055c4:	0552      	lsls	r2, r2, #21
 80055c6:	430a      	orrs	r2, r1
 80055c8:	491f      	ldr	r1, [pc, #124]	; (8005648 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055ca:	4313      	orrs	r3, r2
 80055cc:	610b      	str	r3, [r1, #16]
 80055ce:	e011      	b.n	80055f4 <RCCEx_PLLSAI1_Config+0x190>
                   (PllSai1->PLLSAI1N << RCC_PLLSAI1CFGR_PLLSAI1N_Pos) |
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos) |
                   ((PllSai1->PLLSAI1M - 1U) << RCC_PLLSAI1CFGR_PLLSAI1M_Pos));
#else
        /* Configure the PLLSAI1 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI1CFGR,
 80055d0:	4b1d      	ldr	r3, [pc, #116]	; (8005648 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055d2:	691b      	ldr	r3, [r3, #16]
 80055d4:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 80055d8:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 80055dc:	687a      	ldr	r2, [r7, #4]
 80055de:	6892      	ldr	r2, [r2, #8]
 80055e0:	0211      	lsls	r1, r2, #8
 80055e2:	687a      	ldr	r2, [r7, #4]
 80055e4:	6952      	ldr	r2, [r2, #20]
 80055e6:	0852      	lsrs	r2, r2, #1
 80055e8:	3a01      	subs	r2, #1
 80055ea:	0652      	lsls	r2, r2, #25
 80055ec:	430a      	orrs	r2, r1
 80055ee:	4916      	ldr	r1, [pc, #88]	; (8005648 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055f0:	4313      	orrs	r3, r2
 80055f2:	610b      	str	r3, [r1, #16]
                   (((PllSai1->PLLSAI1R >> 1U) - 1U) << RCC_PLLSAI1CFGR_PLLSAI1R_Pos));
#endif /* RCC_PLLSAI1M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI1 again by setting PLLSAI1ON to 1*/
      __HAL_RCC_PLLSAI1_ENABLE();
 80055f4:	4b14      	ldr	r3, [pc, #80]	; (8005648 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055f6:	681b      	ldr	r3, [r3, #0]
 80055f8:	4a13      	ldr	r2, [pc, #76]	; (8005648 <RCCEx_PLLSAI1_Config+0x1e4>)
 80055fa:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 80055fe:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005600:	f7fc f802 	bl	8001608 <HAL_GetTick>
 8005604:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI1 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 8005606:	e009      	b.n	800561c <RCCEx_PLLSAI1_Config+0x1b8>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI1_TIMEOUT_VALUE)
 8005608:	f7fb fffe 	bl	8001608 <HAL_GetTick>
 800560c:	4602      	mov	r2, r0
 800560e:	68bb      	ldr	r3, [r7, #8]
 8005610:	1ad3      	subs	r3, r2, r3
 8005612:	2b02      	cmp	r3, #2
 8005614:	d902      	bls.n	800561c <RCCEx_PLLSAI1_Config+0x1b8>
        {
          status = HAL_TIMEOUT;
 8005616:	2303      	movs	r3, #3
 8005618:	73fb      	strb	r3, [r7, #15]
          break;
 800561a:	e005      	b.n	8005628 <RCCEx_PLLSAI1_Config+0x1c4>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI1RDY) == 0U)
 800561c:	4b0a      	ldr	r3, [pc, #40]	; (8005648 <RCCEx_PLLSAI1_Config+0x1e4>)
 800561e:	681b      	ldr	r3, [r3, #0]
 8005620:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005624:	2b00      	cmp	r3, #0
 8005626:	d0ef      	beq.n	8005608 <RCCEx_PLLSAI1_Config+0x1a4>
        }
      }

      if(status == HAL_OK)
 8005628:	7bfb      	ldrb	r3, [r7, #15]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d106      	bne.n	800563c <RCCEx_PLLSAI1_Config+0x1d8>
      {
        /* Configure the PLLSAI1 Clock output(s) */
        __HAL_RCC_PLLSAI1CLKOUT_ENABLE(PllSai1->PLLSAI1ClockOut);
 800562e:	4b06      	ldr	r3, [pc, #24]	; (8005648 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005630:	691a      	ldr	r2, [r3, #16]
 8005632:	687b      	ldr	r3, [r7, #4]
 8005634:	699b      	ldr	r3, [r3, #24]
 8005636:	4904      	ldr	r1, [pc, #16]	; (8005648 <RCCEx_PLLSAI1_Config+0x1e4>)
 8005638:	4313      	orrs	r3, r2
 800563a:	610b      	str	r3, [r1, #16]
      }
    }
  }

  return status;
 800563c:	7bfb      	ldrb	r3, [r7, #15]
}
 800563e:	4618      	mov	r0, r3
 8005640:	3710      	adds	r7, #16
 8005642:	46bd      	mov	sp, r7
 8005644:	bd80      	pop	{r7, pc}
 8005646:	bf00      	nop
 8005648:	40021000 	.word	0x40021000

0800564c <RCCEx_PLLSAI2_Config>:
  * @note   PLLSAI2 is temporary disable to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLLSAI2_Config(RCC_PLLSAI2InitTypeDef *PllSai2, uint32_t Divider)
{
 800564c:	b580      	push	{r7, lr}
 800564e:	b084      	sub	sp, #16
 8005650:	af00      	add	r7, sp, #0
 8005652:	6078      	str	r0, [r7, #4]
 8005654:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8005656:	2300      	movs	r3, #0
 8005658:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLLSAI2M_VALUE(PllSai2->PLLSAI2M));
  assert_param(IS_RCC_PLLSAI2N_VALUE(PllSai2->PLLSAI2N));
  assert_param(IS_RCC_PLLSAI2CLOCKOUT_VALUE(PllSai2->PLLSAI2ClockOut));

  /* Check that PLLSAI2 clock source and divider M can be applied */
  if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_NONE)
 800565a:	4b6a      	ldr	r3, [pc, #424]	; (8005804 <RCCEx_PLLSAI2_Config+0x1b8>)
 800565c:	68db      	ldr	r3, [r3, #12]
 800565e:	f003 0303 	and.w	r3, r3, #3
 8005662:	2b00      	cmp	r3, #0
 8005664:	d018      	beq.n	8005698 <RCCEx_PLLSAI2_Config+0x4c>
  {
    /* PLL clock source and divider M already set, check that no request for change  */
    if((__HAL_RCC_GET_PLL_OSCSOURCE() != PllSai2->PLLSAI2Source)
 8005666:	4b67      	ldr	r3, [pc, #412]	; (8005804 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005668:	68db      	ldr	r3, [r3, #12]
 800566a:	f003 0203 	and.w	r2, r3, #3
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	429a      	cmp	r2, r3
 8005674:	d10d      	bne.n	8005692 <RCCEx_PLLSAI2_Config+0x46>
       ||
       (PllSai2->PLLSAI2Source == RCC_PLLSOURCE_NONE)
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	681b      	ldr	r3, [r3, #0]
       ||
 800567a:	2b00      	cmp	r3, #0
 800567c:	d009      	beq.n	8005692 <RCCEx_PLLSAI2_Config+0x46>
#if !defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
       ||
       (((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U) != PllSai2->PLLSAI2M)
 800567e:	4b61      	ldr	r3, [pc, #388]	; (8005804 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005680:	68db      	ldr	r3, [r3, #12]
 8005682:	091b      	lsrs	r3, r3, #4
 8005684:	f003 0307 	and.w	r3, r3, #7
 8005688:	1c5a      	adds	r2, r3, #1
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	685b      	ldr	r3, [r3, #4]
       ||
 800568e:	429a      	cmp	r2, r3
 8005690:	d047      	beq.n	8005722 <RCCEx_PLLSAI2_Config+0xd6>
#endif
      )
    {
      status = HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	73fb      	strb	r3, [r7, #15]
 8005696:	e044      	b.n	8005722 <RCCEx_PLLSAI2_Config+0xd6>
    }
  }
  else
  {
    /* Check PLLSAI2 clock source availability */
    switch(PllSai2->PLLSAI2Source)
 8005698:	687b      	ldr	r3, [r7, #4]
 800569a:	681b      	ldr	r3, [r3, #0]
 800569c:	2b03      	cmp	r3, #3
 800569e:	d018      	beq.n	80056d2 <RCCEx_PLLSAI2_Config+0x86>
 80056a0:	2b03      	cmp	r3, #3
 80056a2:	d825      	bhi.n	80056f0 <RCCEx_PLLSAI2_Config+0xa4>
 80056a4:	2b01      	cmp	r3, #1
 80056a6:	d002      	beq.n	80056ae <RCCEx_PLLSAI2_Config+0x62>
 80056a8:	2b02      	cmp	r3, #2
 80056aa:	d009      	beq.n	80056c0 <RCCEx_PLLSAI2_Config+0x74>
 80056ac:	e020      	b.n	80056f0 <RCCEx_PLLSAI2_Config+0xa4>
    {
    case RCC_PLLSOURCE_MSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_MSIRDY))
 80056ae:	4b55      	ldr	r3, [pc, #340]	; (8005804 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056b0:	681b      	ldr	r3, [r3, #0]
 80056b2:	f003 0302 	and.w	r3, r3, #2
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d11d      	bne.n	80056f6 <RCCEx_PLLSAI2_Config+0xaa>
      {
        status = HAL_ERROR;
 80056ba:	2301      	movs	r3, #1
 80056bc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056be:	e01a      	b.n	80056f6 <RCCEx_PLLSAI2_Config+0xaa>
    case RCC_PLLSOURCE_HSI:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSIRDY))
 80056c0:	4b50      	ldr	r3, [pc, #320]	; (8005804 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056c2:	681b      	ldr	r3, [r3, #0]
 80056c4:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d116      	bne.n	80056fa <RCCEx_PLLSAI2_Config+0xae>
      {
        status = HAL_ERROR;
 80056cc:	2301      	movs	r3, #1
 80056ce:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80056d0:	e013      	b.n	80056fa <RCCEx_PLLSAI2_Config+0xae>
    case RCC_PLLSOURCE_HSE:
      if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSERDY))
 80056d2:	4b4c      	ldr	r3, [pc, #304]	; (8005804 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d10f      	bne.n	80056fe <RCCEx_PLLSAI2_Config+0xb2>
      {
        if(HAL_IS_BIT_CLR(RCC->CR, RCC_CR_HSEBYP))
 80056de:	4b49      	ldr	r3, [pc, #292]	; (8005804 <RCCEx_PLLSAI2_Config+0x1b8>)
 80056e0:	681b      	ldr	r3, [r3, #0]
 80056e2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80056e6:	2b00      	cmp	r3, #0
 80056e8:	d109      	bne.n	80056fe <RCCEx_PLLSAI2_Config+0xb2>
        {
          status = HAL_ERROR;
 80056ea:	2301      	movs	r3, #1
 80056ec:	73fb      	strb	r3, [r7, #15]
        }
      }
      break;
 80056ee:	e006      	b.n	80056fe <RCCEx_PLLSAI2_Config+0xb2>
    default:
      status = HAL_ERROR;
 80056f0:	2301      	movs	r3, #1
 80056f2:	73fb      	strb	r3, [r7, #15]
      break;
 80056f4:	e004      	b.n	8005700 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80056f6:	bf00      	nop
 80056f8:	e002      	b.n	8005700 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80056fa:	bf00      	nop
 80056fc:	e000      	b.n	8005700 <RCCEx_PLLSAI2_Config+0xb4>
      break;
 80056fe:	bf00      	nop
    }

    if(status == HAL_OK)
 8005700:	7bfb      	ldrb	r3, [r7, #15]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d10d      	bne.n	8005722 <RCCEx_PLLSAI2_Config+0xd6>
#if defined(RCC_PLLSAI2M_DIV_1_16_SUPPORT)
      /* Set PLLSAI2 clock source */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC, PllSai2->PLLSAI2Source);
#else
      /* Set PLLSAI2 clock source and divider M */
      MODIFY_REG(RCC->PLLCFGR, RCC_PLLCFGR_PLLSRC | RCC_PLLCFGR_PLLM, PllSai2->PLLSAI2Source | (PllSai2->PLLSAI2M - 1U) << RCC_PLLCFGR_PLLM_Pos);
 8005706:	4b3f      	ldr	r3, [pc, #252]	; (8005804 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005708:	68db      	ldr	r3, [r3, #12]
 800570a:	f023 0273 	bic.w	r2, r3, #115	; 0x73
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	6819      	ldr	r1, [r3, #0]
 8005712:	687b      	ldr	r3, [r7, #4]
 8005714:	685b      	ldr	r3, [r3, #4]
 8005716:	3b01      	subs	r3, #1
 8005718:	011b      	lsls	r3, r3, #4
 800571a:	430b      	orrs	r3, r1
 800571c:	4939      	ldr	r1, [pc, #228]	; (8005804 <RCCEx_PLLSAI2_Config+0x1b8>)
 800571e:	4313      	orrs	r3, r2
 8005720:	60cb      	str	r3, [r1, #12]
#endif
    }
  }

  if(status == HAL_OK)
 8005722:	7bfb      	ldrb	r3, [r7, #15]
 8005724:	2b00      	cmp	r3, #0
 8005726:	d167      	bne.n	80057f8 <RCCEx_PLLSAI2_Config+0x1ac>
  {
    /* Disable the PLLSAI2 */
    __HAL_RCC_PLLSAI2_DISABLE();
 8005728:	4b36      	ldr	r3, [pc, #216]	; (8005804 <RCCEx_PLLSAI2_Config+0x1b8>)
 800572a:	681b      	ldr	r3, [r3, #0]
 800572c:	4a35      	ldr	r2, [pc, #212]	; (8005804 <RCCEx_PLLSAI2_Config+0x1b8>)
 800572e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005732:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8005734:	f7fb ff68 	bl	8001608 <HAL_GetTick>
 8005738:	60b8      	str	r0, [r7, #8]

    /* Wait till PLLSAI2 is ready to be updated */
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 800573a:	e009      	b.n	8005750 <RCCEx_PLLSAI2_Config+0x104>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 800573c:	f7fb ff64 	bl	8001608 <HAL_GetTick>
 8005740:	4602      	mov	r2, r0
 8005742:	68bb      	ldr	r3, [r7, #8]
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	2b02      	cmp	r3, #2
 8005748:	d902      	bls.n	8005750 <RCCEx_PLLSAI2_Config+0x104>
      {
        status = HAL_TIMEOUT;
 800574a:	2303      	movs	r3, #3
 800574c:	73fb      	strb	r3, [r7, #15]
        break;
 800574e:	e005      	b.n	800575c <RCCEx_PLLSAI2_Config+0x110>
    while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) != 0U)
 8005750:	4b2c      	ldr	r3, [pc, #176]	; (8005804 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005758:	2b00      	cmp	r3, #0
 800575a:	d1ef      	bne.n	800573c <RCCEx_PLLSAI2_Config+0xf0>
      }
    }

    if(status == HAL_OK)
 800575c:	7bfb      	ldrb	r3, [r7, #15]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d14a      	bne.n	80057f8 <RCCEx_PLLSAI2_Config+0x1ac>
    {
      if(Divider == DIVIDER_P_UPDATE)
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	2b00      	cmp	r3, #0
 8005766:	d111      	bne.n	800578c <RCCEx_PLLSAI2_Config+0x140>
        MODIFY_REG(RCC->PLLSAI2CFGR,
                   RCC_PLLSAI2CFGR_PLLSAI2N | RCC_PLLSAI2CFGR_PLLSAI2PDIV,
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (PllSai2->PLLSAI2P << RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos));
#else
        MODIFY_REG(RCC->PLLSAI2CFGR,
 8005768:	4b26      	ldr	r3, [pc, #152]	; (8005804 <RCCEx_PLLSAI2_Config+0x1b8>)
 800576a:	695b      	ldr	r3, [r3, #20]
 800576c:	f423 331f 	bic.w	r3, r3, #162816	; 0x27c00
 8005770:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005774:	687a      	ldr	r2, [r7, #4]
 8005776:	6892      	ldr	r2, [r2, #8]
 8005778:	0211      	lsls	r1, r2, #8
 800577a:	687a      	ldr	r2, [r7, #4]
 800577c:	68d2      	ldr	r2, [r2, #12]
 800577e:	0912      	lsrs	r2, r2, #4
 8005780:	0452      	lsls	r2, r2, #17
 8005782:	430a      	orrs	r2, r1
 8005784:	491f      	ldr	r1, [pc, #124]	; (8005804 <RCCEx_PLLSAI2_Config+0x1b8>)
 8005786:	4313      	orrs	r3, r2
 8005788:	614b      	str	r3, [r1, #20]
 800578a:	e011      	b.n	80057b0 <RCCEx_PLLSAI2_Config+0x164>
                   (PllSai2->PLLSAI2N << RCC_PLLSAI2CFGR_PLLSAI2N_Pos) |
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos) |
                   ((PllSai2->PLLSAI2M - 1U) << RCC_PLLSAI2CFGR_PLLSAI2M_Pos));
#else
        /* Configure the PLLSAI2 Division factor R and Multiplication factor N*/
        MODIFY_REG(RCC->PLLSAI2CFGR,
 800578c:	4b1d      	ldr	r3, [pc, #116]	; (8005804 <RCCEx_PLLSAI2_Config+0x1b8>)
 800578e:	695b      	ldr	r3, [r3, #20]
 8005790:	f023 63c0 	bic.w	r3, r3, #100663296	; 0x6000000
 8005794:	f423 43fe 	bic.w	r3, r3, #32512	; 0x7f00
 8005798:	687a      	ldr	r2, [r7, #4]
 800579a:	6892      	ldr	r2, [r2, #8]
 800579c:	0211      	lsls	r1, r2, #8
 800579e:	687a      	ldr	r2, [r7, #4]
 80057a0:	6912      	ldr	r2, [r2, #16]
 80057a2:	0852      	lsrs	r2, r2, #1
 80057a4:	3a01      	subs	r2, #1
 80057a6:	0652      	lsls	r2, r2, #25
 80057a8:	430a      	orrs	r2, r1
 80057aa:	4916      	ldr	r1, [pc, #88]	; (8005804 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057ac:	4313      	orrs	r3, r2
 80057ae:	614b      	str	r3, [r1, #20]
                   (((PllSai2->PLLSAI2R >> 1U) - 1U) << RCC_PLLSAI2CFGR_PLLSAI2R_Pos));
#endif /* RCC_PLLSAI2M_DIV_1_16_SUPPORT */
      }

      /* Enable the PLLSAI2 again by setting PLLSAI2ON to 1*/
      __HAL_RCC_PLLSAI2_ENABLE();
 80057b0:	4b14      	ldr	r3, [pc, #80]	; (8005804 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057b2:	681b      	ldr	r3, [r3, #0]
 80057b4:	4a13      	ldr	r2, [pc, #76]	; (8005804 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80057ba:	6013      	str	r3, [r2, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80057bc:	f7fb ff24 	bl	8001608 <HAL_GetTick>
 80057c0:	60b8      	str	r0, [r7, #8]

      /* Wait till PLLSAI2 is ready */
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80057c2:	e009      	b.n	80057d8 <RCCEx_PLLSAI2_Config+0x18c>
      {
        if((HAL_GetTick() - tickstart) > PLLSAI2_TIMEOUT_VALUE)
 80057c4:	f7fb ff20 	bl	8001608 <HAL_GetTick>
 80057c8:	4602      	mov	r2, r0
 80057ca:	68bb      	ldr	r3, [r7, #8]
 80057cc:	1ad3      	subs	r3, r2, r3
 80057ce:	2b02      	cmp	r3, #2
 80057d0:	d902      	bls.n	80057d8 <RCCEx_PLLSAI2_Config+0x18c>
        {
          status = HAL_TIMEOUT;
 80057d2:	2303      	movs	r3, #3
 80057d4:	73fb      	strb	r3, [r7, #15]
          break;
 80057d6:	e005      	b.n	80057e4 <RCCEx_PLLSAI2_Config+0x198>
      while(READ_BIT(RCC->CR, RCC_CR_PLLSAI2RDY) == 0U)
 80057d8:	4b0a      	ldr	r3, [pc, #40]	; (8005804 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d0ef      	beq.n	80057c4 <RCCEx_PLLSAI2_Config+0x178>
        }
      }

      if(status == HAL_OK)
 80057e4:	7bfb      	ldrb	r3, [r7, #15]
 80057e6:	2b00      	cmp	r3, #0
 80057e8:	d106      	bne.n	80057f8 <RCCEx_PLLSAI2_Config+0x1ac>
      {
        /* Configure the PLLSAI2 Clock output(s) */
        __HAL_RCC_PLLSAI2CLKOUT_ENABLE(PllSai2->PLLSAI2ClockOut);
 80057ea:	4b06      	ldr	r3, [pc, #24]	; (8005804 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057ec:	695a      	ldr	r2, [r3, #20]
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	695b      	ldr	r3, [r3, #20]
 80057f2:	4904      	ldr	r1, [pc, #16]	; (8005804 <RCCEx_PLLSAI2_Config+0x1b8>)
 80057f4:	4313      	orrs	r3, r2
 80057f6:	614b      	str	r3, [r1, #20]
      }
    }
  }

  return status;
 80057f8:	7bfb      	ldrb	r3, [r7, #15]
}
 80057fa:	4618      	mov	r0, r3
 80057fc:	3710      	adds	r7, #16
 80057fe:	46bd      	mov	sp, r7
 8005800:	bd80      	pop	{r7, pc}
 8005802:	bf00      	nop
 8005804:	40021000 	.word	0x40021000

08005808 <RCCEx_GetSAIxPeriphCLKFreq>:
#endif /* RCC_PLLSAI2_SUPPORT */

#if defined(SAI1)

static uint32_t RCCEx_GetSAIxPeriphCLKFreq(uint32_t PeriphClk, uint32_t InputFrequency)
{
 8005808:	b480      	push	{r7}
 800580a:	b089      	sub	sp, #36	; 0x24
 800580c:	af00      	add	r7, sp, #0
 800580e:	6078      	str	r0, [r7, #4]
 8005810:	6039      	str	r1, [r7, #0]
  uint32_t frequency = 0U;
 8005812:	2300      	movs	r3, #0
 8005814:	61fb      	str	r3, [r7, #28]
  uint32_t srcclk = 0U;
 8005816:	2300      	movs	r3, #0
 8005818:	61bb      	str	r3, [r7, #24]
  uint32_t pllvco, plln;    /* no init needed */
#if defined(RCC_PLLP_SUPPORT)
  uint32_t pllp = 0U;
 800581a:	2300      	movs	r3, #0
 800581c:	617b      	str	r3, [r7, #20]
#endif /* RCC_PLLP_SUPPORT */

  /* Handle SAIs */
  if(PeriphClk == RCC_PERIPHCLK_SAI1)
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005824:	d10c      	bne.n	8005840 <RCCEx_GetSAIxPeriphCLKFreq+0x38>
  {
    srcclk = __HAL_RCC_GET_SAI1_SOURCE();
 8005826:	4b6e      	ldr	r3, [pc, #440]	; (80059e0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005828:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800582c:	f403 0340 	and.w	r3, r3, #12582912	; 0xc00000
 8005830:	61bb      	str	r3, [r7, #24]
    if(srcclk == RCC_SAI1CLKSOURCE_PIN)
 8005832:	69bb      	ldr	r3, [r7, #24]
 8005834:	f5b3 0f40 	cmp.w	r3, #12582912	; 0xc00000
 8005838:	d112      	bne.n	8005860 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      frequency = EXTERNAL_SAI1_CLOCK_VALUE;
 800583a:	4b6a      	ldr	r3, [pc, #424]	; (80059e4 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 800583c:	61fb      	str	r3, [r7, #28]
 800583e:	e00f      	b.n	8005860 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    /* Else, PLL clock output to check below */
  }
#if defined(SAI2)
  else
  {
    if(PeriphClk == RCC_PERIPHCLK_SAI2)
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005846:	d10b      	bne.n	8005860 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
    {
      srcclk = __HAL_RCC_GET_SAI2_SOURCE();
 8005848:	4b65      	ldr	r3, [pc, #404]	; (80059e0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800584a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800584e:	f003 7340 	and.w	r3, r3, #50331648	; 0x3000000
 8005852:	61bb      	str	r3, [r7, #24]
      if(srcclk == RCC_SAI2CLKSOURCE_PIN)
 8005854:	69bb      	ldr	r3, [r7, #24]
 8005856:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800585a:	d101      	bne.n	8005860 <RCCEx_GetSAIxPeriphCLKFreq+0x58>
      {
        frequency = EXTERNAL_SAI2_CLOCK_VALUE;
 800585c:	4b61      	ldr	r3, [pc, #388]	; (80059e4 <RCCEx_GetSAIxPeriphCLKFreq+0x1dc>)
 800585e:	61fb      	str	r3, [r7, #28]
      /* Else, PLL clock output to check below */
    }
  }
#endif /* SAI2 */

  if(frequency == 0U)
 8005860:	69fb      	ldr	r3, [r7, #28]
 8005862:	2b00      	cmp	r3, #0
 8005864:	f040 80b4 	bne.w	80059d0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
  {
    pllvco = InputFrequency;
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	613b      	str	r3, [r7, #16]

#if defined(SAI2)
    if((srcclk == RCC_SAI1CLKSOURCE_PLL) || (srcclk == RCC_SAI2CLKSOURCE_PLL))
 800586c:	69bb      	ldr	r3, [r7, #24]
 800586e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 8005872:	d003      	beq.n	800587c <RCCEx_GetSAIxPeriphCLKFreq+0x74>
 8005874:	69bb      	ldr	r3, [r7, #24]
 8005876:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800587a:	d135      	bne.n	80058e8 <RCCEx_GetSAIxPeriphCLKFreq+0xe0>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 800587c:	4b58      	ldr	r3, [pc, #352]	; (80059e0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800587e:	681b      	ldr	r3, [r3, #0]
 8005880:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005884:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005888:	f040 80a1 	bne.w	80059ce <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
 800588c:	4b54      	ldr	r3, [pc, #336]	; (80059e0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800588e:	68db      	ldr	r3, [r3, #12]
 8005890:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005894:	2b00      	cmp	r3, #0
 8005896:	f000 809a 	beq.w	80059ce <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      {
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 800589a:	4b51      	ldr	r3, [pc, #324]	; (80059e0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800589c:	68db      	ldr	r3, [r3, #12]
 800589e:	091b      	lsrs	r3, r3, #4
 80058a0:	f003 0307 	and.w	r3, r3, #7
 80058a4:	3301      	adds	r3, #1
 80058a6:	693a      	ldr	r2, [r7, #16]
 80058a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ac:	613b      	str	r3, [r7, #16]
        /* f(PLLSAI3CLK) = f(VCO input) * PLLN / PLLP */
        plln = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos;
 80058ae:	4b4c      	ldr	r3, [pc, #304]	; (80059e0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80058b0:	68db      	ldr	r3, [r3, #12]
 80058b2:	0a1b      	lsrs	r3, r3, #8
 80058b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80058b8:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLP_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLPDIV) >> RCC_PLLCFGR_PLLPDIV_Pos;
#endif
        if(pllp == 0U)
 80058ba:	697b      	ldr	r3, [r7, #20]
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d10a      	bne.n	80058d6 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
        {
          if(READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLP) != 0U)
 80058c0:	4b47      	ldr	r3, [pc, #284]	; (80059e0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80058c2:	68db      	ldr	r3, [r3, #12]
 80058c4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d002      	beq.n	80058d2 <RCCEx_GetSAIxPeriphCLKFreq+0xca>
          {
            pllp = 17U;
 80058cc:	2311      	movs	r3, #17
 80058ce:	617b      	str	r3, [r7, #20]
 80058d0:	e001      	b.n	80058d6 <RCCEx_GetSAIxPeriphCLKFreq+0xce>
          }
          else
          {
            pllp = 7U;
 80058d2:	2307      	movs	r3, #7
 80058d4:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80058d6:	693b      	ldr	r3, [r7, #16]
 80058d8:	68fa      	ldr	r2, [r7, #12]
 80058da:	fb02 f203 	mul.w	r2, r2, r3
 80058de:	697b      	ldr	r3, [r7, #20]
 80058e0:	fbb2 f3f3 	udiv	r3, r2, r3
 80058e4:	61fb      	str	r3, [r7, #28]
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80058e6:	e072      	b.n	80059ce <RCCEx_GetSAIxPeriphCLKFreq+0x1c6>
      }
    }
    else if(srcclk == 0U)  /* RCC_SAI1CLKSOURCE_PLLSAI1 || RCC_SAI2CLKSOURCE_PLLSAI1 */
 80058e8:	69bb      	ldr	r3, [r7, #24]
 80058ea:	2b00      	cmp	r3, #0
 80058ec:	d133      	bne.n	8005956 <RCCEx_GetSAIxPeriphCLKFreq+0x14e>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI1RDY) && (__HAL_RCC_GET_PLLSAI1CLKOUT_CONFIG(RCC_PLLSAI1_SAI1CLK) != 0U))
 80058ee:	4b3c      	ldr	r3, [pc, #240]	; (80059e0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80058f0:	681b      	ldr	r3, [r3, #0]
 80058f2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80058f6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80058fa:	d169      	bne.n	80059d0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 80058fc:	4b38      	ldr	r3, [pc, #224]	; (80059e0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80058fe:	691b      	ldr	r3, [r3, #16]
 8005900:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005904:	2b00      	cmp	r3, #0
 8005906:	d063      	beq.n	80059d0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI1M exists: apply PLLSAI1M divider for PLLSAI1 output computation */
        /* f(PLLSAI1 Source) / PLLSAI1M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1M) >> RCC_PLLSAI1CFGR_PLLSAI1M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005908:	4b35      	ldr	r3, [pc, #212]	; (80059e0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800590a:	68db      	ldr	r3, [r3, #12]
 800590c:	091b      	lsrs	r3, r3, #4
 800590e:	f003 0307 	and.w	r3, r3, #7
 8005912:	3301      	adds	r3, #1
 8005914:	693a      	ldr	r2, [r7, #16]
 8005916:	fbb2 f3f3 	udiv	r3, r2, r3
 800591a:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI1CLK) = f(VCOSAI1 input) * PLLSAI1N / PLLSAI1P */
        plln = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1N) >> RCC_PLLSAI1CFGR_PLLSAI1N_Pos;
 800591c:	4b30      	ldr	r3, [pc, #192]	; (80059e0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 800591e:	691b      	ldr	r3, [r3, #16]
 8005920:	0a1b      	lsrs	r3, r3, #8
 8005922:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8005926:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI1P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1PDIV) >> RCC_PLLSAI1CFGR_PLLSAI1PDIV_Pos;
#endif
        if(pllp == 0U)
 8005928:	697b      	ldr	r3, [r7, #20]
 800592a:	2b00      	cmp	r3, #0
 800592c:	d10a      	bne.n	8005944 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
        {
          if(READ_BIT(RCC->PLLSAI1CFGR, RCC_PLLSAI1CFGR_PLLSAI1P) != 0U)
 800592e:	4b2c      	ldr	r3, [pc, #176]	; (80059e0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005930:	691b      	ldr	r3, [r3, #16]
 8005932:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005936:	2b00      	cmp	r3, #0
 8005938:	d002      	beq.n	8005940 <RCCEx_GetSAIxPeriphCLKFreq+0x138>
          {
            pllp = 17U;
 800593a:	2311      	movs	r3, #17
 800593c:	617b      	str	r3, [r7, #20]
 800593e:	e001      	b.n	8005944 <RCCEx_GetSAIxPeriphCLKFreq+0x13c>
          }
          else
          {
            pllp = 7U;
 8005940:	2307      	movs	r3, #7
 8005942:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 8005944:	693b      	ldr	r3, [r7, #16]
 8005946:	68fa      	ldr	r2, [r7, #12]
 8005948:	fb02 f203 	mul.w	r2, r2, r3
 800594c:	697b      	ldr	r3, [r7, #20]
 800594e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005952:	61fb      	str	r3, [r7, #28]
 8005954:	e03c      	b.n	80059d0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    }
#endif /* SAI2 */

#if defined(RCC_PLLSAI2_SUPPORT)

    else if((srcclk == RCC_SAI1CLKSOURCE_PLLSAI2) || (srcclk == RCC_SAI2CLKSOURCE_PLLSAI2))
 8005956:	69bb      	ldr	r3, [r7, #24]
 8005958:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800595c:	d003      	beq.n	8005966 <RCCEx_GetSAIxPeriphCLKFreq+0x15e>
 800595e:	69bb      	ldr	r3, [r7, #24]
 8005960:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005964:	d134      	bne.n	80059d0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
    {
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLSAI2RDY) && (__HAL_RCC_GET_PLLSAI2CLKOUT_CONFIG(RCC_PLLSAI2_SAI2CLK) != 0U))
 8005966:	4b1e      	ldr	r3, [pc, #120]	; (80059e0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005968:	681b      	ldr	r3, [r3, #0]
 800596a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800596e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005972:	d12d      	bne.n	80059d0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
 8005974:	4b1a      	ldr	r3, [pc, #104]	; (80059e0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005976:	695b      	ldr	r3, [r3, #20]
 8005978:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800597c:	2b00      	cmp	r3, #0
 800597e:	d027      	beq.n	80059d0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
        /* PLLSAI2M exists: apply PLLSAI2M divider for PLLSAI2 output computation */
        /* f(PLLSAI2 Source) / PLLSAI2M */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2M) >> RCC_PLLSAI2CFGR_PLLSAI2M_Pos) + 1U));
#else
        /* f(PLL Source) / PLLM */
        pllvco = (pllvco / ((READ_BIT(RCC->PLLCFGR, RCC_PLLCFGR_PLLM) >> RCC_PLLCFGR_PLLM_Pos) + 1U));
 8005980:	4b17      	ldr	r3, [pc, #92]	; (80059e0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005982:	68db      	ldr	r3, [r3, #12]
 8005984:	091b      	lsrs	r3, r3, #4
 8005986:	f003 0307 	and.w	r3, r3, #7
 800598a:	3301      	adds	r3, #1
 800598c:	693a      	ldr	r2, [r7, #16]
 800598e:	fbb2 f3f3 	udiv	r3, r2, r3
 8005992:	613b      	str	r3, [r7, #16]
#endif
        /* f(PLLSAI2CLK) = f(VCOSAI2 input) * PLLSAI2N / PLLSAI2P */
        plln = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2N) >> RCC_PLLSAI2CFGR_PLLSAI2N_Pos;
 8005994:	4b12      	ldr	r3, [pc, #72]	; (80059e0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 8005996:	695b      	ldr	r3, [r3, #20]
 8005998:	0a1b      	lsrs	r3, r3, #8
 800599a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800599e:	60fb      	str	r3, [r7, #12]
#if defined(RCC_PLLSAI2P_DIV_2_31_SUPPORT)
        pllp = READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2PDIV) >> RCC_PLLSAI2CFGR_PLLSAI2PDIV_Pos;
#endif
        if(pllp == 0U)
 80059a0:	697b      	ldr	r3, [r7, #20]
 80059a2:	2b00      	cmp	r3, #0
 80059a4:	d10a      	bne.n	80059bc <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
        {
          if(READ_BIT(RCC->PLLSAI2CFGR, RCC_PLLSAI2CFGR_PLLSAI2P) != 0U)
 80059a6:	4b0e      	ldr	r3, [pc, #56]	; (80059e0 <RCCEx_GetSAIxPeriphCLKFreq+0x1d8>)
 80059a8:	695b      	ldr	r3, [r3, #20]
 80059aa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d002      	beq.n	80059b8 <RCCEx_GetSAIxPeriphCLKFreq+0x1b0>
          {
            pllp = 17U;
 80059b2:	2311      	movs	r3, #17
 80059b4:	617b      	str	r3, [r7, #20]
 80059b6:	e001      	b.n	80059bc <RCCEx_GetSAIxPeriphCLKFreq+0x1b4>
          }
          else
          {
            pllp = 7U;
 80059b8:	2307      	movs	r3, #7
 80059ba:	617b      	str	r3, [r7, #20]
          }
        }
        frequency = (pllvco * plln) / pllp;
 80059bc:	693b      	ldr	r3, [r7, #16]
 80059be:	68fa      	ldr	r2, [r7, #12]
 80059c0:	fb02 f203 	mul.w	r2, r2, r3
 80059c4:	697b      	ldr	r3, [r7, #20]
 80059c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80059ca:	61fb      	str	r3, [r7, #28]
 80059cc:	e000      	b.n	80059d0 <RCCEx_GetSAIxPeriphCLKFreq+0x1c8>
      if(HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLRDY) && (__HAL_RCC_GET_PLLCLKOUT_CONFIG(RCC_PLL_SAI3CLK) != 0U))
 80059ce:	bf00      	nop
      /* No clock source, frequency default init at 0 */
    }
  }


  return frequency;
 80059d0:	69fb      	ldr	r3, [r7, #28]
}
 80059d2:	4618      	mov	r0, r3
 80059d4:	3724      	adds	r7, #36	; 0x24
 80059d6:	46bd      	mov	sp, r7
 80059d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059dc:	4770      	bx	lr
 80059de:	bf00      	nop
 80059e0:	40021000 	.word	0x40021000
 80059e4:	001fff68 	.word	0x001fff68

080059e8 <HAL_SAI_Init>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SAI_Init(SAI_HandleTypeDef *hsai)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b088      	sub	sp, #32
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
#endif /* SAI2 */
  uint32_t ckstr_bits;
  uint32_t syncen_bits;

  /* Check the SAI handle allocation */
  if (hsai == NULL)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d101      	bne.n	80059fa <HAL_SAI_Init+0x12>
  {
    return HAL_ERROR;
 80059f6:	2301      	movs	r3, #1
 80059f8:	e155      	b.n	8005ca6 <HAL_SAI_Init+0x2be>
    }
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  if (hsai->State == HAL_SAI_STATE_RESET)
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	f893 307d 	ldrb.w	r3, [r3, #125]	; 0x7d
 8005a00:	b2db      	uxtb	r3, r3
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d106      	bne.n	8005a14 <HAL_SAI_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hsai->Lock = HAL_UNLOCKED;
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c
      hsai->MspInitCallback = HAL_SAI_MspInit;
    }
    hsai->MspInitCallback(hsai);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_SAI_MspInit(hsai);
 8005a0e:	6878      	ldr	r0, [r7, #4]
 8005a10:	f7fb fc6c 	bl	80012ec <HAL_SAI_MspInit>
#endif
  }

  /* Disable the selected SAI peripheral */
  if (SAI_Disable(hsai) != HAL_OK)
 8005a14:	6878      	ldr	r0, [r7, #4]
 8005a16:	f000 f959 	bl	8005ccc <SAI_Disable>
 8005a1a:	4603      	mov	r3, r0
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d001      	beq.n	8005a24 <HAL_SAI_Init+0x3c>
  {
    return HAL_ERROR;
 8005a20:	2301      	movs	r3, #1
 8005a22:	e140      	b.n	8005ca6 <HAL_SAI_Init+0x2be>
  }

  hsai->State = HAL_SAI_STATE_BUSY;
 8005a24:	687b      	ldr	r3, [r7, #4]
 8005a26:	2202      	movs	r2, #2
 8005a28:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* SAI Block Synchro Configuration -----------------------------------------*/
  /* This setting must be done with both audio block (A & B) disabled         */
#if defined(SAI2)
  switch (hsai->Init.SynchroExt)
 8005a2c:	687b      	ldr	r3, [r7, #4]
 8005a2e:	68db      	ldr	r3, [r3, #12]
 8005a30:	2b02      	cmp	r3, #2
 8005a32:	d00c      	beq.n	8005a4e <HAL_SAI_Init+0x66>
 8005a34:	2b02      	cmp	r3, #2
 8005a36:	d80d      	bhi.n	8005a54 <HAL_SAI_Init+0x6c>
 8005a38:	2b00      	cmp	r3, #0
 8005a3a:	d002      	beq.n	8005a42 <HAL_SAI_Init+0x5a>
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d003      	beq.n	8005a48 <HAL_SAI_Init+0x60>
 8005a40:	e008      	b.n	8005a54 <HAL_SAI_Init+0x6c>
  {
    case SAI_SYNCEXT_DISABLE :
      tmpregisterGCR = 0;
 8005a42:	2300      	movs	r3, #0
 8005a44:	61fb      	str	r3, [r7, #28]
      break;
 8005a46:	e008      	b.n	8005a5a <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKA_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_0;
 8005a48:	2310      	movs	r3, #16
 8005a4a:	61fb      	str	r3, [r7, #28]
      break;
 8005a4c:	e005      	b.n	8005a5a <HAL_SAI_Init+0x72>
    case SAI_SYNCEXT_OUTBLOCKB_ENABLE :
      tmpregisterGCR = SAI_GCR_SYNCOUT_1;
 8005a4e:	2320      	movs	r3, #32
 8005a50:	61fb      	str	r3, [r7, #28]
      break;
 8005a52:	e002      	b.n	8005a5a <HAL_SAI_Init+0x72>
    default :
      tmpregisterGCR = 0;
 8005a54:	2300      	movs	r3, #0
 8005a56:	61fb      	str	r3, [r7, #28]
      break;
 8005a58:	bf00      	nop
  }
#endif /* SAI2 */

  switch (hsai->Init.Synchro)
 8005a5a:	687b      	ldr	r3, [r7, #4]
 8005a5c:	689b      	ldr	r3, [r3, #8]
 8005a5e:	2b03      	cmp	r3, #3
 8005a60:	d81d      	bhi.n	8005a9e <HAL_SAI_Init+0xb6>
 8005a62:	a201      	add	r2, pc, #4	; (adr r2, 8005a68 <HAL_SAI_Init+0x80>)
 8005a64:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a68:	08005a79 	.word	0x08005a79
 8005a6c:	08005a7f 	.word	0x08005a7f
 8005a70:	08005a87 	.word	0x08005a87
 8005a74:	08005a8f 	.word	0x08005a8f
  {
    case SAI_ASYNCHRONOUS :
      syncen_bits = 0;
 8005a78:	2300      	movs	r3, #0
 8005a7a:	617b      	str	r3, [r7, #20]
      break;
 8005a7c:	e012      	b.n	8005aa4 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS :
      syncen_bits = SAI_xCR1_SYNCEN_0;
 8005a7e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005a82:	617b      	str	r3, [r7, #20]
      break;
 8005a84:	e00e      	b.n	8005aa4 <HAL_SAI_Init+0xbc>
#if defined(SAI2)
    case SAI_SYNCHRONOUS_EXT_SAI1 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005a86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005a8a:	617b      	str	r3, [r7, #20]
      break;
 8005a8c:	e00a      	b.n	8005aa4 <HAL_SAI_Init+0xbc>
    case SAI_SYNCHRONOUS_EXT_SAI2 :
      syncen_bits = SAI_xCR1_SYNCEN_1;
 8005a8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005a92:	617b      	str	r3, [r7, #20]
      tmpregisterGCR |= SAI_GCR_SYNCIN_0;
 8005a94:	69fb      	ldr	r3, [r7, #28]
 8005a96:	f043 0301 	orr.w	r3, r3, #1
 8005a9a:	61fb      	str	r3, [r7, #28]
      break;
 8005a9c:	e002      	b.n	8005aa4 <HAL_SAI_Init+0xbc>
#endif /* SAI2 */
    default :
      syncen_bits = 0;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	617b      	str	r3, [r7, #20]
      break;
 8005aa2:	bf00      	nop
  }

#if defined(SAI2)
  if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	681b      	ldr	r3, [r3, #0]
 8005aa8:	4a81      	ldr	r2, [pc, #516]	; (8005cb0 <HAL_SAI_Init+0x2c8>)
 8005aaa:	4293      	cmp	r3, r2
 8005aac:	d004      	beq.n	8005ab8 <HAL_SAI_Init+0xd0>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	681b      	ldr	r3, [r3, #0]
 8005ab2:	4a80      	ldr	r2, [pc, #512]	; (8005cb4 <HAL_SAI_Init+0x2cc>)
 8005ab4:	4293      	cmp	r3, r2
 8005ab6:	d103      	bne.n	8005ac0 <HAL_SAI_Init+0xd8>
  {
    SAI1->GCR = tmpregisterGCR;
 8005ab8:	4a7f      	ldr	r2, [pc, #508]	; (8005cb8 <HAL_SAI_Init+0x2d0>)
 8005aba:	69fb      	ldr	r3, [r7, #28]
 8005abc:	6013      	str	r3, [r2, #0]
 8005abe:	e002      	b.n	8005ac6 <HAL_SAI_Init+0xde>
  }
  else
  {
    SAI2->GCR = tmpregisterGCR;
 8005ac0:	4a7e      	ldr	r2, [pc, #504]	; (8005cbc <HAL_SAI_Init+0x2d4>)
 8005ac2:	69fb      	ldr	r3, [r7, #28]
 8005ac4:	6013      	str	r3, [r2, #0]
  }
#else
  SAI1->GCR = 0;
#endif /* SAI2 */

  if (hsai->Init.AudioFrequency != SAI_AUDIO_FREQUENCY_MCKDIV)
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	69db      	ldr	r3, [r3, #28]
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d041      	beq.n	8005b52 <HAL_SAI_Init+0x16a>
#if defined(STM32L471xx) || defined(STM32L475xx) || defined(STM32L476xx) || defined(STM32L485xx) || defined(STM32L486xx) || \
    defined(STM32L496xx) || defined(STM32L4A6xx) || \
    defined(STM32L4R5xx) || defined(STM32L4R7xx) || defined(STM32L4R9xx) || defined(STM32L4S5xx) || defined(STM32L4S7xx) || defined(STM32L4S9xx) || \
    defined(STM32L4P5xx) || defined(STM32L4Q5xx)

    if ((hsai->Instance == SAI1_Block_A) || (hsai->Instance == SAI1_Block_B))
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	681b      	ldr	r3, [r3, #0]
 8005ad2:	4a77      	ldr	r2, [pc, #476]	; (8005cb0 <HAL_SAI_Init+0x2c8>)
 8005ad4:	4293      	cmp	r3, r2
 8005ad6:	d004      	beq.n	8005ae2 <HAL_SAI_Init+0xfa>
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	681b      	ldr	r3, [r3, #0]
 8005adc:	4a75      	ldr	r2, [pc, #468]	; (8005cb4 <HAL_SAI_Init+0x2cc>)
 8005ade:	4293      	cmp	r3, r2
 8005ae0:	d105      	bne.n	8005aee <HAL_SAI_Init+0x106>
    {
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI1);
 8005ae2:	f44f 6000 	mov.w	r0, #2048	; 0x800
 8005ae6:	f7fe ff43 	bl	8004970 <HAL_RCCEx_GetPeriphCLKFreq>
 8005aea:	6138      	str	r0, [r7, #16]
 8005aec:	e004      	b.n	8005af8 <HAL_SAI_Init+0x110>
    }
    else
    {
      /* SAI2_Block_A or SAI2_Block_B */
      freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_SAI2);
 8005aee:	f44f 5080 	mov.w	r0, #4096	; 0x1000
 8005af2:	f7fe ff3d 	bl	8004970 <HAL_RCCEx_GetPeriphCLKFreq>
 8005af6:	6138      	str	r0, [r7, #16]
    /* Configure Master Clock using the following formula :
       MCLK_x = SAI_CK_x / (MCKDIV[3:0] * 2) with MCLK_x = 256 * FS
       FS = SAI_CK_x / (MCKDIV[3:0] * 2) * 256
       MCKDIV[3:0] = SAI_CK_x / FS * 512 */
    /* (freq x 10) to keep Significant digits */
    tmpval = (freq * 10U) / (hsai->Init.AudioFrequency * 2U * 256U);
 8005af8:	693a      	ldr	r2, [r7, #16]
 8005afa:	4613      	mov	r3, r2
 8005afc:	009b      	lsls	r3, r3, #2
 8005afe:	4413      	add	r3, r2
 8005b00:	005b      	lsls	r3, r3, #1
 8005b02:	461a      	mov	r2, r3
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	69db      	ldr	r3, [r3, #28]
 8005b08:	025b      	lsls	r3, r3, #9
 8005b0a:	fbb2 f3f3 	udiv	r3, r2, r3
 8005b0e:	60fb      	str	r3, [r7, #12]
    hsai->Init.Mckdiv = tmpval / 10U;
 8005b10:	68fb      	ldr	r3, [r7, #12]
 8005b12:	4a6b      	ldr	r2, [pc, #428]	; (8005cc0 <HAL_SAI_Init+0x2d8>)
 8005b14:	fba2 2303 	umull	r2, r3, r2, r3
 8005b18:	08da      	lsrs	r2, r3, #3
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	621a      	str	r2, [r3, #32]

    /* Round result to the nearest integer */
    if ((tmpval % 10U) > 8U)
 8005b1e:	68f9      	ldr	r1, [r7, #12]
 8005b20:	4b67      	ldr	r3, [pc, #412]	; (8005cc0 <HAL_SAI_Init+0x2d8>)
 8005b22:	fba3 2301 	umull	r2, r3, r3, r1
 8005b26:	08da      	lsrs	r2, r3, #3
 8005b28:	4613      	mov	r3, r2
 8005b2a:	009b      	lsls	r3, r3, #2
 8005b2c:	4413      	add	r3, r2
 8005b2e:	005b      	lsls	r3, r3, #1
 8005b30:	1aca      	subs	r2, r1, r3
 8005b32:	2a08      	cmp	r2, #8
 8005b34:	d904      	bls.n	8005b40 <HAL_SAI_Init+0x158>
    {
      hsai->Init.Mckdiv += 1U;
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	6a1b      	ldr	r3, [r3, #32]
 8005b3a:	1c5a      	adds	r2, r3, #1
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	621a      	str	r2, [r3, #32]
    }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
    /* STM32L4P5xx || STM32L4Q5xx */

    /* For SPDIF protocol, SAI shall provide a bit clock twice faster the symbol-rate */
    if (hsai->Init.Protocol == SAI_SPDIF_PROTOCOL)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005b44:	2b04      	cmp	r3, #4
 8005b46:	d104      	bne.n	8005b52 <HAL_SAI_Init+0x16a>
    {
      hsai->Init.Mckdiv = hsai->Init.Mckdiv >> 1;
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	6a1b      	ldr	r3, [r3, #32]
 8005b4c:	085a      	lsrs	r2, r3, #1
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	621a      	str	r2, [r3, #32]
  }
  /* Check the SAI Block master clock divider parameter */
  assert_param(IS_SAI_BLOCK_MASTER_DIVIDER(hsai->Init.Mckdiv));

  /* Compute CKSTR bits of SAI CR1 according ClockStrobing and AudioMode */
  if ((hsai->Init.AudioMode == SAI_MODEMASTER_TX) || (hsai->Init.AudioMode == SAI_MODESLAVE_TX))
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d003      	beq.n	8005b62 <HAL_SAI_Init+0x17a>
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	685b      	ldr	r3, [r3, #4]
 8005b5e:	2b02      	cmp	r3, #2
 8005b60:	d109      	bne.n	8005b76 <HAL_SAI_Init+0x18e>
  {
    /* Transmit */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? 0U : SAI_xCR1_CKSTR;
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d101      	bne.n	8005b6e <HAL_SAI_Init+0x186>
 8005b6a:	2300      	movs	r3, #0
 8005b6c:	e001      	b.n	8005b72 <HAL_SAI_Init+0x18a>
 8005b6e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b72:	61bb      	str	r3, [r7, #24]
 8005b74:	e008      	b.n	8005b88 <HAL_SAI_Init+0x1a0>
  }
  else
  {
    /* Receive */
    ckstr_bits = (hsai->Init.ClockStrobing == SAI_CLOCKSTROBING_RISINGEDGE) ? SAI_xCR1_CKSTR : 0U;
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b7a:	2b01      	cmp	r3, #1
 8005b7c:	d102      	bne.n	8005b84 <HAL_SAI_Init+0x19c>
 8005b7e:	f44f 7300 	mov.w	r3, #512	; 0x200
 8005b82:	e000      	b.n	8005b86 <HAL_SAI_Init+0x19e>
 8005b84:	2300      	movs	r3, #0
 8005b86:	61bb      	str	r3, [r7, #24]
                          ckstr_bits | syncen_bits |                             \
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20) |     \
                          hsai->Init.MckOverSampling);
#else
  hsai->Instance->CR1 &= ~(SAI_xCR1_MODE | SAI_xCR1_PRTCFG |  SAI_xCR1_DS |      \
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	6819      	ldr	r1, [r3, #0]
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	4b4c      	ldr	r3, [pc, #304]	; (8005cc4 <HAL_SAI_Init+0x2dc>)
 8005b94:	400b      	ands	r3, r1
 8005b96:	6013      	str	r3, [r2, #0]
                           SAI_xCR1_LSBFIRST | SAI_xCR1_CKSTR | SAI_xCR1_SYNCEN | \
                           SAI_xCR1_MONO | SAI_xCR1_OUTDRIV  | SAI_xCR1_DMAEN |  \
                           SAI_xCR1_NODIV | SAI_xCR1_MCKDIV);

  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	6819      	ldr	r1, [r3, #0]
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	685a      	ldr	r2, [r3, #4]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ba6:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005bac:	431a      	orrs	r2, r3
                          hsai->Init.DataSize | hsai->Init.FirstBit  |           \
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bb2:	431a      	orrs	r2, r3
 8005bb4:	69bb      	ldr	r3, [r7, #24]
 8005bb6:	431a      	orrs	r2, r3
                          ckstr_bits | syncen_bits |                             \
 8005bb8:	697b      	ldr	r3, [r7, #20]
 8005bba:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                          ckstr_bits | syncen_bits |                             \
 8005bc0:	431a      	orrs	r2, r3
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	691b      	ldr	r3, [r3, #16]
 8005bc6:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	695b      	ldr	r3, [r3, #20]
                          hsai->Init.MonoStereoMode | hsai->Init.OutputDrive |   \
 8005bcc:	431a      	orrs	r2, r3
                          hsai->Init.NoDivider | (hsai->Init.Mckdiv << 20));
 8005bce:	687b      	ldr	r3, [r7, #4]
 8005bd0:	6a1b      	ldr	r3, [r3, #32]
 8005bd2:	051b      	lsls	r3, r3, #20
 8005bd4:	431a      	orrs	r2, r3
  hsai->Instance->CR1 |= (hsai->Init.AudioMode | hsai->Init.Protocol |           \
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	430a      	orrs	r2, r1
 8005bdc:	601a      	str	r2, [r3, #0]
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* SAI CR2 Configuration */
  hsai->Instance->CR2 &= ~(SAI_xCR2_FTH | SAI_xCR2_FFLUSH | SAI_xCR2_COMP | SAI_xCR2_CPL);
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	685b      	ldr	r3, [r3, #4]
 8005be4:	687a      	ldr	r2, [r7, #4]
 8005be6:	6812      	ldr	r2, [r2, #0]
 8005be8:	f423 4360 	bic.w	r3, r3, #57344	; 0xe000
 8005bec:	f023 030f 	bic.w	r3, r3, #15
 8005bf0:	6053      	str	r3, [r2, #4]
  hsai->Instance->CR2 |= (hsai->Init.FIFOThreshold | hsai->Init.CompandingMode | hsai->Init.TriState);
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	6859      	ldr	r1, [r3, #4]
 8005bf8:	687b      	ldr	r3, [r7, #4]
 8005bfa:	699a      	ldr	r2, [r3, #24]
 8005bfc:	687b      	ldr	r3, [r7, #4]
 8005bfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005c00:	431a      	orrs	r2, r3
 8005c02:	687b      	ldr	r3, [r7, #4]
 8005c04:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c06:	431a      	orrs	r2, r3
 8005c08:	687b      	ldr	r3, [r7, #4]
 8005c0a:	681b      	ldr	r3, [r3, #0]
 8005c0c:	430a      	orrs	r2, r1
 8005c0e:	605a      	str	r2, [r3, #4]

  /* SAI Frame Configuration -----------------------------------------*/
  hsai->Instance->FRCR &= (~(SAI_xFRCR_FRL | SAI_xFRCR_FSALL | SAI_xFRCR_FSDEF | \
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	6899      	ldr	r1, [r3, #8]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681a      	ldr	r2, [r3, #0]
 8005c1a:	4b2b      	ldr	r3, [pc, #172]	; (8005cc8 <HAL_SAI_Init+0x2e0>)
 8005c1c:	400b      	ands	r3, r1
 8005c1e:	6093      	str	r3, [r2, #8]
                             SAI_xFRCR_FSPOL | SAI_xFRCR_FSOFF));
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	6899      	ldr	r1, [r3, #8]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2a:	1e5a      	subs	r2, r3, #1
                           hsai->FrameInit.FSOffset |
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005c30:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSDefinition |
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
                           hsai->FrameInit.FSOffset |
 8005c36:	431a      	orrs	r2, r3
                           hsai->FrameInit.FSPolarity   |
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
                           hsai->FrameInit.FSDefinition |
 8005c3c:	431a      	orrs	r2, r3
                           ((hsai->FrameInit.ActiveFrameLength - 1U) << 8));
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c42:	3b01      	subs	r3, #1
 8005c44:	021b      	lsls	r3, r3, #8
                           hsai->FrameInit.FSPolarity   |
 8005c46:	431a      	orrs	r2, r3
  hsai->Instance->FRCR |= ((hsai->FrameInit.FrameLength - 1U) |
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	430a      	orrs	r2, r1
 8005c4e:	609a      	str	r2, [r3, #8]

  /* SAI Block_x SLOT Configuration ------------------------------------------*/
  /* This register has no meaning in AC 97 and SPDIF audio protocol */
  hsai->Instance->SLOTR &= (~(SAI_xSLOTR_FBOFF | SAI_xSLOTR_SLOTSZ |  \
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	68d9      	ldr	r1, [r3, #12]
 8005c56:	687b      	ldr	r3, [r7, #4]
 8005c58:	681a      	ldr	r2, [r3, #0]
 8005c5a:	f24f 0320 	movw	r3, #61472	; 0xf020
 8005c5e:	400b      	ands	r3, r1
 8005c60:	60d3      	str	r3, [r2, #12]
                              SAI_xSLOTR_NBSLOT | SAI_xSLOTR_SLOTEN));

  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005c62:	687b      	ldr	r3, [r7, #4]
 8005c64:	681b      	ldr	r3, [r3, #0]
 8005c66:	68d9      	ldr	r1, [r3, #12]
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005c70:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8005c76:	041b      	lsls	r3, r3, #16
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005c78:	431a      	orrs	r2, r3
                           (hsai->SlotInit.SlotActive << 16) | ((hsai->SlotInit.SlotNumber - 1U) <<  8);
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005c7e:	3b01      	subs	r3, #1
 8005c80:	021b      	lsls	r3, r3, #8
 8005c82:	431a      	orrs	r2, r3
  hsai->Instance->SLOTR |= hsai->SlotInit.FirstBitOffset | hsai->SlotInit.SlotSize | \
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	430a      	orrs	r2, r1
 8005c8a:	60da      	str	r2, [r3, #12]
  }
#endif /* STM32L4R5xx || STM32L4R7xx || STM32L4R9xx || STM32L4S5xx || STM32L4S7xx || STM32L4S9xx || */
  /* STM32L4P5xx || STM32L4Q5xx */

  /* Initialize the error code */
  hsai->ErrorCode = HAL_SAI_ERROR_NONE;
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2200      	movs	r2, #0
 8005c90:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Initialize the SAI state */
  hsai->State = HAL_SAI_STATE_READY;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	2201      	movs	r2, #1
 8005c98:	f883 207d 	strb.w	r2, [r3, #125]	; 0x7d

  /* Release Lock */
  __HAL_UNLOCK(hsai);
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2200      	movs	r2, #0
 8005ca0:	f883 207c 	strb.w	r2, [r3, #124]	; 0x7c

  return HAL_OK;
 8005ca4:	2300      	movs	r3, #0
}
 8005ca6:	4618      	mov	r0, r3
 8005ca8:	3720      	adds	r7, #32
 8005caa:	46bd      	mov	sp, r7
 8005cac:	bd80      	pop	{r7, pc}
 8005cae:	bf00      	nop
 8005cb0:	40015404 	.word	0x40015404
 8005cb4:	40015424 	.word	0x40015424
 8005cb8:	40015400 	.word	0x40015400
 8005cbc:	40015800 	.word	0x40015800
 8005cc0:	cccccccd 	.word	0xcccccccd
 8005cc4:	ff05c010 	.word	0xff05c010
 8005cc8:	fff88000 	.word	0xfff88000

08005ccc <SAI_Disable>:
  * @param  hsai pointer to a SAI_HandleTypeDef structure that contains
  *              the configuration information for SAI module.
  * @retval None
  */
static HAL_StatusTypeDef SAI_Disable(SAI_HandleTypeDef *hsai)
{
 8005ccc:	b480      	push	{r7}
 8005cce:	b085      	sub	sp, #20
 8005cd0:	af00      	add	r7, sp, #0
 8005cd2:	6078      	str	r0, [r7, #4]
  uint32_t count = SAI_DEFAULT_TIMEOUT * (SystemCoreClock / 7U / 1000U);
 8005cd4:	4b18      	ldr	r3, [pc, #96]	; (8005d38 <SAI_Disable+0x6c>)
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	4a18      	ldr	r2, [pc, #96]	; (8005d3c <SAI_Disable+0x70>)
 8005cda:	fba2 2303 	umull	r2, r3, r2, r3
 8005cde:	0b1b      	lsrs	r3, r3, #12
 8005ce0:	009b      	lsls	r3, r3, #2
 8005ce2:	60fb      	str	r3, [r7, #12]
  HAL_StatusTypeDef status = HAL_OK;
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	72fb      	strb	r3, [r7, #11]

  /* Disable the SAI instance */
  __HAL_SAI_DISABLE(hsai);
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	681a      	ldr	r2, [r3, #0]
 8005cee:	687b      	ldr	r3, [r7, #4]
 8005cf0:	681b      	ldr	r3, [r3, #0]
 8005cf2:	f422 3280 	bic.w	r2, r2, #65536	; 0x10000
 8005cf6:	601a      	str	r2, [r3, #0]

  do
  {
    /* Check for the Timeout */
    if (count == 0U)
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	2b00      	cmp	r3, #0
 8005cfc:	d10a      	bne.n	8005d14 <SAI_Disable+0x48>
    {
      /* Update error code */
      hsai->ErrorCode |= HAL_SAI_ERROR_TIMEOUT;
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8005d04:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
      status = HAL_TIMEOUT;
 8005d0e:	2303      	movs	r3, #3
 8005d10:	72fb      	strb	r3, [r7, #11]
      break;
 8005d12:	e009      	b.n	8005d28 <SAI_Disable+0x5c>
    }
    count--;
 8005d14:	68fb      	ldr	r3, [r7, #12]
 8005d16:	3b01      	subs	r3, #1
 8005d18:	60fb      	str	r3, [r7, #12]
  }
  while ((hsai->Instance->CR1 & SAI_xCR1_SAIEN) != 0U);
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d24:	2b00      	cmp	r3, #0
 8005d26:	d1e7      	bne.n	8005cf8 <SAI_Disable+0x2c>

  return status;
 8005d28:	7afb      	ldrb	r3, [r7, #11]
}
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	3714      	adds	r7, #20
 8005d2e:	46bd      	mov	sp, r7
 8005d30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d34:	4770      	bx	lr
 8005d36:	bf00      	nop
 8005d38:	20000000 	.word	0x20000000
 8005d3c:	95cbec1b 	.word	0x95cbec1b

08005d40 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b084      	sub	sp, #16
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	2b00      	cmp	r3, #0
 8005d4c:	d101      	bne.n	8005d52 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005d4e:	2301      	movs	r3, #1
 8005d50:	e095      	b.n	8005e7e <HAL_SPI_Init+0x13e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d108      	bne.n	8005d6c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005d5a:	687b      	ldr	r3, [r7, #4]
 8005d5c:	685b      	ldr	r3, [r3, #4]
 8005d5e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8005d62:	d009      	beq.n	8005d78 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	2200      	movs	r2, #0
 8005d68:	61da      	str	r2, [r3, #28]
 8005d6a:	e005      	b.n	8005d78 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	2200      	movs	r2, #0
 8005d70:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005d72:	687b      	ldr	r3, [r7, #4]
 8005d74:	2200      	movs	r2, #0
 8005d76:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	2200      	movs	r2, #0
 8005d7c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d106      	bne.n	8005d98 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2200      	movs	r2, #0
 8005d8e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f7fb fa08 	bl	80011a8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	2202      	movs	r2, #2
 8005d9c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005da0:	687b      	ldr	r3, [r7, #4]
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	681a      	ldr	r2, [r3, #0]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8005dae:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	68db      	ldr	r3, [r3, #12]
 8005db4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005db8:	d902      	bls.n	8005dc0 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8005dba:	2300      	movs	r3, #0
 8005dbc:	60fb      	str	r3, [r7, #12]
 8005dbe:	e002      	b.n	8005dc6 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8005dc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005dc4:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	68db      	ldr	r3, [r3, #12]
 8005dca:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8005dce:	d007      	beq.n	8005de0 <HAL_SPI_Init+0xa0>
 8005dd0:	687b      	ldr	r3, [r7, #4]
 8005dd2:	68db      	ldr	r3, [r3, #12]
 8005dd4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8005dd8:	d002      	beq.n	8005de0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	2200      	movs	r2, #0
 8005dde:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	685b      	ldr	r3, [r3, #4]
 8005de4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8005de8:	687b      	ldr	r3, [r7, #4]
 8005dea:	689b      	ldr	r3, [r3, #8]
 8005dec:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8005df0:	431a      	orrs	r2, r3
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	f003 0302 	and.w	r3, r3, #2
 8005dfa:	431a      	orrs	r2, r3
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	695b      	ldr	r3, [r3, #20]
 8005e00:	f003 0301 	and.w	r3, r3, #1
 8005e04:	431a      	orrs	r2, r3
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	699b      	ldr	r3, [r3, #24]
 8005e0a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e0e:	431a      	orrs	r2, r3
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	69db      	ldr	r3, [r3, #28]
 8005e14:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8005e18:	431a      	orrs	r2, r3
 8005e1a:	687b      	ldr	r3, [r7, #4]
 8005e1c:	6a1b      	ldr	r3, [r3, #32]
 8005e1e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005e22:	ea42 0103 	orr.w	r1, r2, r3
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005e2a:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	681b      	ldr	r3, [r3, #0]
 8005e32:	430a      	orrs	r2, r1
 8005e34:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	699b      	ldr	r3, [r3, #24]
 8005e3a:	0c1b      	lsrs	r3, r3, #16
 8005e3c:	f003 0204 	and.w	r2, r3, #4
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e44:	f003 0310 	and.w	r3, r3, #16
 8005e48:	431a      	orrs	r2, r3
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005e4e:	f003 0308 	and.w	r3, r3, #8
 8005e52:	431a      	orrs	r2, r3
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8005e5c:	ea42 0103 	orr.w	r1, r2, r3
 8005e60:	68fb      	ldr	r3, [r7, #12]
 8005e62:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	430a      	orrs	r2, r1
 8005e6c:	605a      	str	r2, [r3, #4]
#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	2200      	movs	r2, #0
 8005e72:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	2201      	movs	r2, #1
 8005e78:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8005e7c:	2300      	movs	r3, #0
}
 8005e7e:	4618      	mov	r0, r3
 8005e80:	3710      	adds	r7, #16
 8005e82:	46bd      	mov	sp, r7
 8005e84:	bd80      	pop	{r7, pc}

08005e86 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005e86:	b580      	push	{r7, lr}
 8005e88:	b082      	sub	sp, #8
 8005e8a:	af00      	add	r7, sp, #0
 8005e8c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2b00      	cmp	r3, #0
 8005e92:	d101      	bne.n	8005e98 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005e94:	2301      	movs	r3, #1
 8005e96:	e040      	b.n	8005f1a <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d106      	bne.n	8005eae <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	2200      	movs	r2, #0
 8005ea4:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f7fb f9c1 	bl	8001230 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	2224      	movs	r2, #36	; 0x24
 8005eb2:	679a      	str	r2, [r3, #120]	; 0x78

  __HAL_UART_DISABLE(huart);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	681a      	ldr	r2, [r3, #0]
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	681b      	ldr	r3, [r3, #0]
 8005ebe:	f022 0201 	bic.w	r2, r2, #1
 8005ec2:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8005ec4:	6878      	ldr	r0, [r7, #4]
 8005ec6:	f000 f82d 	bl	8005f24 <UART_SetConfig>
 8005eca:	4603      	mov	r3, r0
 8005ecc:	2b01      	cmp	r3, #1
 8005ece:	d101      	bne.n	8005ed4 <HAL_UART_Init+0x4e>
  {
    return HAL_ERROR;
 8005ed0:	2301      	movs	r3, #1
 8005ed2:	e022      	b.n	8005f1a <HAL_UART_Init+0x94>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8005ed4:	687b      	ldr	r3, [r7, #4]
 8005ed6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d002      	beq.n	8005ee2 <HAL_UART_Init+0x5c>
  {
    UART_AdvFeatureConfig(huart);
 8005edc:	6878      	ldr	r0, [r7, #4]
 8005ede:	f000 faab 	bl	8006438 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005ee2:	687b      	ldr	r3, [r7, #4]
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	685a      	ldr	r2, [r3, #4]
 8005ee8:	687b      	ldr	r3, [r7, #4]
 8005eea:	681b      	ldr	r3, [r3, #0]
 8005eec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8005ef0:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	681b      	ldr	r3, [r3, #0]
 8005ef6:	689a      	ldr	r2, [r3, #8]
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	681b      	ldr	r3, [r3, #0]
 8005efc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8005f00:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	681a      	ldr	r2, [r3, #0]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f042 0201 	orr.w	r2, r2, #1
 8005f10:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8005f12:	6878      	ldr	r0, [r7, #4]
 8005f14:	f000 fb32 	bl	800657c <UART_CheckIdleState>
 8005f18:	4603      	mov	r3, r0
}
 8005f1a:	4618      	mov	r0, r3
 8005f1c:	3708      	adds	r7, #8
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	bd80      	pop	{r7, pc}
	...

08005f24 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005f24:	b5b0      	push	{r4, r5, r7, lr}
 8005f26:	b088      	sub	sp, #32
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8005f2c:	2300      	movs	r3, #0
 8005f2e:	76bb      	strb	r3, [r7, #26]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	689a      	ldr	r2, [r3, #8]
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	691b      	ldr	r3, [r3, #16]
 8005f38:	431a      	orrs	r2, r3
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	695b      	ldr	r3, [r3, #20]
 8005f3e:	431a      	orrs	r2, r3
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	69db      	ldr	r3, [r3, #28]
 8005f44:	4313      	orrs	r3, r2
 8005f46:	61fb      	str	r3, [r7, #28]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	681b      	ldr	r3, [r3, #0]
 8005f4c:	681a      	ldr	r2, [r3, #0]
 8005f4e:	4bad      	ldr	r3, [pc, #692]	; (8006204 <UART_SetConfig+0x2e0>)
 8005f50:	4013      	ands	r3, r2
 8005f52:	687a      	ldr	r2, [r7, #4]
 8005f54:	6812      	ldr	r2, [r2, #0]
 8005f56:	69f9      	ldr	r1, [r7, #28]
 8005f58:	430b      	orrs	r3, r1
 8005f5a:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005f5c:	687b      	ldr	r3, [r7, #4]
 8005f5e:	681b      	ldr	r3, [r3, #0]
 8005f60:	685b      	ldr	r3, [r3, #4]
 8005f62:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	68da      	ldr	r2, [r3, #12]
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	430a      	orrs	r2, r1
 8005f70:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	699b      	ldr	r3, [r3, #24]
 8005f76:	61fb      	str	r3, [r7, #28]

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	4aa2      	ldr	r2, [pc, #648]	; (8006208 <UART_SetConfig+0x2e4>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d004      	beq.n	8005f8c <UART_SetConfig+0x68>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	6a1b      	ldr	r3, [r3, #32]
 8005f86:	69fa      	ldr	r2, [r7, #28]
 8005f88:	4313      	orrs	r3, r2
 8005f8a:	61fb      	str	r3, [r7, #28]
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	681b      	ldr	r3, [r3, #0]
 8005f90:	689b      	ldr	r3, [r3, #8]
 8005f92:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	69fa      	ldr	r2, [r7, #28]
 8005f9c:	430a      	orrs	r2, r1
 8005f9e:	609a      	str	r2, [r3, #8]
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
#endif /* USART_PRESC_PRESCALER */

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	4a99      	ldr	r2, [pc, #612]	; (800620c <UART_SetConfig+0x2e8>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d121      	bne.n	8005fee <UART_SetConfig+0xca>
 8005faa:	4b99      	ldr	r3, [pc, #612]	; (8006210 <UART_SetConfig+0x2ec>)
 8005fac:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005fb0:	f003 0303 	and.w	r3, r3, #3
 8005fb4:	2b03      	cmp	r3, #3
 8005fb6:	d817      	bhi.n	8005fe8 <UART_SetConfig+0xc4>
 8005fb8:	a201      	add	r2, pc, #4	; (adr r2, 8005fc0 <UART_SetConfig+0x9c>)
 8005fba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005fbe:	bf00      	nop
 8005fc0:	08005fd1 	.word	0x08005fd1
 8005fc4:	08005fdd 	.word	0x08005fdd
 8005fc8:	08005fd7 	.word	0x08005fd7
 8005fcc:	08005fe3 	.word	0x08005fe3
 8005fd0:	2301      	movs	r3, #1
 8005fd2:	76fb      	strb	r3, [r7, #27]
 8005fd4:	e0e7      	b.n	80061a6 <UART_SetConfig+0x282>
 8005fd6:	2302      	movs	r3, #2
 8005fd8:	76fb      	strb	r3, [r7, #27]
 8005fda:	e0e4      	b.n	80061a6 <UART_SetConfig+0x282>
 8005fdc:	2304      	movs	r3, #4
 8005fde:	76fb      	strb	r3, [r7, #27]
 8005fe0:	e0e1      	b.n	80061a6 <UART_SetConfig+0x282>
 8005fe2:	2308      	movs	r3, #8
 8005fe4:	76fb      	strb	r3, [r7, #27]
 8005fe6:	e0de      	b.n	80061a6 <UART_SetConfig+0x282>
 8005fe8:	2310      	movs	r3, #16
 8005fea:	76fb      	strb	r3, [r7, #27]
 8005fec:	e0db      	b.n	80061a6 <UART_SetConfig+0x282>
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	681b      	ldr	r3, [r3, #0]
 8005ff2:	4a88      	ldr	r2, [pc, #544]	; (8006214 <UART_SetConfig+0x2f0>)
 8005ff4:	4293      	cmp	r3, r2
 8005ff6:	d132      	bne.n	800605e <UART_SetConfig+0x13a>
 8005ff8:	4b85      	ldr	r3, [pc, #532]	; (8006210 <UART_SetConfig+0x2ec>)
 8005ffa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005ffe:	f003 030c 	and.w	r3, r3, #12
 8006002:	2b0c      	cmp	r3, #12
 8006004:	d828      	bhi.n	8006058 <UART_SetConfig+0x134>
 8006006:	a201      	add	r2, pc, #4	; (adr r2, 800600c <UART_SetConfig+0xe8>)
 8006008:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800600c:	08006041 	.word	0x08006041
 8006010:	08006059 	.word	0x08006059
 8006014:	08006059 	.word	0x08006059
 8006018:	08006059 	.word	0x08006059
 800601c:	0800604d 	.word	0x0800604d
 8006020:	08006059 	.word	0x08006059
 8006024:	08006059 	.word	0x08006059
 8006028:	08006059 	.word	0x08006059
 800602c:	08006047 	.word	0x08006047
 8006030:	08006059 	.word	0x08006059
 8006034:	08006059 	.word	0x08006059
 8006038:	08006059 	.word	0x08006059
 800603c:	08006053 	.word	0x08006053
 8006040:	2300      	movs	r3, #0
 8006042:	76fb      	strb	r3, [r7, #27]
 8006044:	e0af      	b.n	80061a6 <UART_SetConfig+0x282>
 8006046:	2302      	movs	r3, #2
 8006048:	76fb      	strb	r3, [r7, #27]
 800604a:	e0ac      	b.n	80061a6 <UART_SetConfig+0x282>
 800604c:	2304      	movs	r3, #4
 800604e:	76fb      	strb	r3, [r7, #27]
 8006050:	e0a9      	b.n	80061a6 <UART_SetConfig+0x282>
 8006052:	2308      	movs	r3, #8
 8006054:	76fb      	strb	r3, [r7, #27]
 8006056:	e0a6      	b.n	80061a6 <UART_SetConfig+0x282>
 8006058:	2310      	movs	r3, #16
 800605a:	76fb      	strb	r3, [r7, #27]
 800605c:	e0a3      	b.n	80061a6 <UART_SetConfig+0x282>
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	681b      	ldr	r3, [r3, #0]
 8006062:	4a6d      	ldr	r2, [pc, #436]	; (8006218 <UART_SetConfig+0x2f4>)
 8006064:	4293      	cmp	r3, r2
 8006066:	d120      	bne.n	80060aa <UART_SetConfig+0x186>
 8006068:	4b69      	ldr	r3, [pc, #420]	; (8006210 <UART_SetConfig+0x2ec>)
 800606a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800606e:	f003 0330 	and.w	r3, r3, #48	; 0x30
 8006072:	2b30      	cmp	r3, #48	; 0x30
 8006074:	d013      	beq.n	800609e <UART_SetConfig+0x17a>
 8006076:	2b30      	cmp	r3, #48	; 0x30
 8006078:	d814      	bhi.n	80060a4 <UART_SetConfig+0x180>
 800607a:	2b20      	cmp	r3, #32
 800607c:	d009      	beq.n	8006092 <UART_SetConfig+0x16e>
 800607e:	2b20      	cmp	r3, #32
 8006080:	d810      	bhi.n	80060a4 <UART_SetConfig+0x180>
 8006082:	2b00      	cmp	r3, #0
 8006084:	d002      	beq.n	800608c <UART_SetConfig+0x168>
 8006086:	2b10      	cmp	r3, #16
 8006088:	d006      	beq.n	8006098 <UART_SetConfig+0x174>
 800608a:	e00b      	b.n	80060a4 <UART_SetConfig+0x180>
 800608c:	2300      	movs	r3, #0
 800608e:	76fb      	strb	r3, [r7, #27]
 8006090:	e089      	b.n	80061a6 <UART_SetConfig+0x282>
 8006092:	2302      	movs	r3, #2
 8006094:	76fb      	strb	r3, [r7, #27]
 8006096:	e086      	b.n	80061a6 <UART_SetConfig+0x282>
 8006098:	2304      	movs	r3, #4
 800609a:	76fb      	strb	r3, [r7, #27]
 800609c:	e083      	b.n	80061a6 <UART_SetConfig+0x282>
 800609e:	2308      	movs	r3, #8
 80060a0:	76fb      	strb	r3, [r7, #27]
 80060a2:	e080      	b.n	80061a6 <UART_SetConfig+0x282>
 80060a4:	2310      	movs	r3, #16
 80060a6:	76fb      	strb	r3, [r7, #27]
 80060a8:	e07d      	b.n	80061a6 <UART_SetConfig+0x282>
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	681b      	ldr	r3, [r3, #0]
 80060ae:	4a5b      	ldr	r2, [pc, #364]	; (800621c <UART_SetConfig+0x2f8>)
 80060b0:	4293      	cmp	r3, r2
 80060b2:	d120      	bne.n	80060f6 <UART_SetConfig+0x1d2>
 80060b4:	4b56      	ldr	r3, [pc, #344]	; (8006210 <UART_SetConfig+0x2ec>)
 80060b6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80060ba:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80060be:	2bc0      	cmp	r3, #192	; 0xc0
 80060c0:	d013      	beq.n	80060ea <UART_SetConfig+0x1c6>
 80060c2:	2bc0      	cmp	r3, #192	; 0xc0
 80060c4:	d814      	bhi.n	80060f0 <UART_SetConfig+0x1cc>
 80060c6:	2b80      	cmp	r3, #128	; 0x80
 80060c8:	d009      	beq.n	80060de <UART_SetConfig+0x1ba>
 80060ca:	2b80      	cmp	r3, #128	; 0x80
 80060cc:	d810      	bhi.n	80060f0 <UART_SetConfig+0x1cc>
 80060ce:	2b00      	cmp	r3, #0
 80060d0:	d002      	beq.n	80060d8 <UART_SetConfig+0x1b4>
 80060d2:	2b40      	cmp	r3, #64	; 0x40
 80060d4:	d006      	beq.n	80060e4 <UART_SetConfig+0x1c0>
 80060d6:	e00b      	b.n	80060f0 <UART_SetConfig+0x1cc>
 80060d8:	2300      	movs	r3, #0
 80060da:	76fb      	strb	r3, [r7, #27]
 80060dc:	e063      	b.n	80061a6 <UART_SetConfig+0x282>
 80060de:	2302      	movs	r3, #2
 80060e0:	76fb      	strb	r3, [r7, #27]
 80060e2:	e060      	b.n	80061a6 <UART_SetConfig+0x282>
 80060e4:	2304      	movs	r3, #4
 80060e6:	76fb      	strb	r3, [r7, #27]
 80060e8:	e05d      	b.n	80061a6 <UART_SetConfig+0x282>
 80060ea:	2308      	movs	r3, #8
 80060ec:	76fb      	strb	r3, [r7, #27]
 80060ee:	e05a      	b.n	80061a6 <UART_SetConfig+0x282>
 80060f0:	2310      	movs	r3, #16
 80060f2:	76fb      	strb	r3, [r7, #27]
 80060f4:	e057      	b.n	80061a6 <UART_SetConfig+0x282>
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	4a49      	ldr	r2, [pc, #292]	; (8006220 <UART_SetConfig+0x2fc>)
 80060fc:	4293      	cmp	r3, r2
 80060fe:	d125      	bne.n	800614c <UART_SetConfig+0x228>
 8006100:	4b43      	ldr	r3, [pc, #268]	; (8006210 <UART_SetConfig+0x2ec>)
 8006102:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006106:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800610a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800610e:	d017      	beq.n	8006140 <UART_SetConfig+0x21c>
 8006110:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8006114:	d817      	bhi.n	8006146 <UART_SetConfig+0x222>
 8006116:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800611a:	d00b      	beq.n	8006134 <UART_SetConfig+0x210>
 800611c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006120:	d811      	bhi.n	8006146 <UART_SetConfig+0x222>
 8006122:	2b00      	cmp	r3, #0
 8006124:	d003      	beq.n	800612e <UART_SetConfig+0x20a>
 8006126:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800612a:	d006      	beq.n	800613a <UART_SetConfig+0x216>
 800612c:	e00b      	b.n	8006146 <UART_SetConfig+0x222>
 800612e:	2300      	movs	r3, #0
 8006130:	76fb      	strb	r3, [r7, #27]
 8006132:	e038      	b.n	80061a6 <UART_SetConfig+0x282>
 8006134:	2302      	movs	r3, #2
 8006136:	76fb      	strb	r3, [r7, #27]
 8006138:	e035      	b.n	80061a6 <UART_SetConfig+0x282>
 800613a:	2304      	movs	r3, #4
 800613c:	76fb      	strb	r3, [r7, #27]
 800613e:	e032      	b.n	80061a6 <UART_SetConfig+0x282>
 8006140:	2308      	movs	r3, #8
 8006142:	76fb      	strb	r3, [r7, #27]
 8006144:	e02f      	b.n	80061a6 <UART_SetConfig+0x282>
 8006146:	2310      	movs	r3, #16
 8006148:	76fb      	strb	r3, [r7, #27]
 800614a:	e02c      	b.n	80061a6 <UART_SetConfig+0x282>
 800614c:	687b      	ldr	r3, [r7, #4]
 800614e:	681b      	ldr	r3, [r3, #0]
 8006150:	4a2d      	ldr	r2, [pc, #180]	; (8006208 <UART_SetConfig+0x2e4>)
 8006152:	4293      	cmp	r3, r2
 8006154:	d125      	bne.n	80061a2 <UART_SetConfig+0x27e>
 8006156:	4b2e      	ldr	r3, [pc, #184]	; (8006210 <UART_SetConfig+0x2ec>)
 8006158:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800615c:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8006160:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8006164:	d017      	beq.n	8006196 <UART_SetConfig+0x272>
 8006166:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800616a:	d817      	bhi.n	800619c <UART_SetConfig+0x278>
 800616c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006170:	d00b      	beq.n	800618a <UART_SetConfig+0x266>
 8006172:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006176:	d811      	bhi.n	800619c <UART_SetConfig+0x278>
 8006178:	2b00      	cmp	r3, #0
 800617a:	d003      	beq.n	8006184 <UART_SetConfig+0x260>
 800617c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8006180:	d006      	beq.n	8006190 <UART_SetConfig+0x26c>
 8006182:	e00b      	b.n	800619c <UART_SetConfig+0x278>
 8006184:	2300      	movs	r3, #0
 8006186:	76fb      	strb	r3, [r7, #27]
 8006188:	e00d      	b.n	80061a6 <UART_SetConfig+0x282>
 800618a:	2302      	movs	r3, #2
 800618c:	76fb      	strb	r3, [r7, #27]
 800618e:	e00a      	b.n	80061a6 <UART_SetConfig+0x282>
 8006190:	2304      	movs	r3, #4
 8006192:	76fb      	strb	r3, [r7, #27]
 8006194:	e007      	b.n	80061a6 <UART_SetConfig+0x282>
 8006196:	2308      	movs	r3, #8
 8006198:	76fb      	strb	r3, [r7, #27]
 800619a:	e004      	b.n	80061a6 <UART_SetConfig+0x282>
 800619c:	2310      	movs	r3, #16
 800619e:	76fb      	strb	r3, [r7, #27]
 80061a0:	e001      	b.n	80061a6 <UART_SetConfig+0x282>
 80061a2:	2310      	movs	r3, #16
 80061a4:	76fb      	strb	r3, [r7, #27]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	4a17      	ldr	r2, [pc, #92]	; (8006208 <UART_SetConfig+0x2e4>)
 80061ac:	4293      	cmp	r3, r2
 80061ae:	f040 8087 	bne.w	80062c0 <UART_SetConfig+0x39c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 80061b2:	7efb      	ldrb	r3, [r7, #27]
 80061b4:	2b08      	cmp	r3, #8
 80061b6:	d837      	bhi.n	8006228 <UART_SetConfig+0x304>
 80061b8:	a201      	add	r2, pc, #4	; (adr r2, 80061c0 <UART_SetConfig+0x29c>)
 80061ba:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80061be:	bf00      	nop
 80061c0:	080061e5 	.word	0x080061e5
 80061c4:	08006229 	.word	0x08006229
 80061c8:	080061ed 	.word	0x080061ed
 80061cc:	08006229 	.word	0x08006229
 80061d0:	080061f3 	.word	0x080061f3
 80061d4:	08006229 	.word	0x08006229
 80061d8:	08006229 	.word	0x08006229
 80061dc:	08006229 	.word	0x08006229
 80061e0:	080061fb 	.word	0x080061fb
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80061e4:	f7fe f84e 	bl	8004284 <HAL_RCC_GetPCLK1Freq>
 80061e8:	6178      	str	r0, [r7, #20]
        break;
 80061ea:	e022      	b.n	8006232 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80061ec:	4b0d      	ldr	r3, [pc, #52]	; (8006224 <UART_SetConfig+0x300>)
 80061ee:	617b      	str	r3, [r7, #20]
        break;
 80061f0:	e01f      	b.n	8006232 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80061f2:	f7fd ffaf 	bl	8004154 <HAL_RCC_GetSysClockFreq>
 80061f6:	6178      	str	r0, [r7, #20]
        break;
 80061f8:	e01b      	b.n	8006232 <UART_SetConfig+0x30e>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80061fa:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80061fe:	617b      	str	r3, [r7, #20]
        break;
 8006200:	e017      	b.n	8006232 <UART_SetConfig+0x30e>
 8006202:	bf00      	nop
 8006204:	efff69f3 	.word	0xefff69f3
 8006208:	40008000 	.word	0x40008000
 800620c:	40013800 	.word	0x40013800
 8006210:	40021000 	.word	0x40021000
 8006214:	40004400 	.word	0x40004400
 8006218:	40004800 	.word	0x40004800
 800621c:	40004c00 	.word	0x40004c00
 8006220:	40005000 	.word	0x40005000
 8006224:	00f42400 	.word	0x00f42400
      default:
        pclk = 0U;
 8006228:	2300      	movs	r3, #0
 800622a:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 800622c:	2301      	movs	r3, #1
 800622e:	76bb      	strb	r3, [r7, #26]
        break;
 8006230:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8006232:	697b      	ldr	r3, [r7, #20]
 8006234:	2b00      	cmp	r3, #0
 8006236:	f000 80f1 	beq.w	800641c <UART_SetConfig+0x4f8>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
#else
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	685a      	ldr	r2, [r3, #4]
 800623e:	4613      	mov	r3, r2
 8006240:	005b      	lsls	r3, r3, #1
 8006242:	4413      	add	r3, r2
 8006244:	697a      	ldr	r2, [r7, #20]
 8006246:	429a      	cmp	r2, r3
 8006248:	d305      	bcc.n	8006256 <UART_SetConfig+0x332>
          (pclk > (4096U * huart->Init.BaudRate)))
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	685b      	ldr	r3, [r3, #4]
 800624e:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 8006250:	697a      	ldr	r2, [r7, #20]
 8006252:	429a      	cmp	r2, r3
 8006254:	d902      	bls.n	800625c <UART_SetConfig+0x338>
      {
        ret = HAL_ERROR;
 8006256:	2301      	movs	r3, #1
 8006258:	76bb      	strb	r3, [r7, #26]
 800625a:	e0df      	b.n	800641c <UART_SetConfig+0x4f8>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 800625c:	697b      	ldr	r3, [r7, #20]
 800625e:	4618      	mov	r0, r3
 8006260:	f04f 0100 	mov.w	r1, #0
 8006264:	f04f 0200 	mov.w	r2, #0
 8006268:	f04f 0300 	mov.w	r3, #0
 800626c:	020b      	lsls	r3, r1, #8
 800626e:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 8006272:	0202      	lsls	r2, r0, #8
 8006274:	6879      	ldr	r1, [r7, #4]
 8006276:	6849      	ldr	r1, [r1, #4]
 8006278:	0849      	lsrs	r1, r1, #1
 800627a:	4608      	mov	r0, r1
 800627c:	f04f 0100 	mov.w	r1, #0
 8006280:	1814      	adds	r4, r2, r0
 8006282:	eb43 0501 	adc.w	r5, r3, r1
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	461a      	mov	r2, r3
 800628c:	f04f 0300 	mov.w	r3, #0
 8006290:	4620      	mov	r0, r4
 8006292:	4629      	mov	r1, r5
 8006294:	f7f9 ff98 	bl	80001c8 <__aeabi_uldivmod>
 8006298:	4602      	mov	r2, r0
 800629a:	460b      	mov	r3, r1
 800629c:	4613      	mov	r3, r2
 800629e:	613b      	str	r3, [r7, #16]
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 80062a0:	693b      	ldr	r3, [r7, #16]
 80062a2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80062a6:	d308      	bcc.n	80062ba <UART_SetConfig+0x396>
 80062a8:	693b      	ldr	r3, [r7, #16]
 80062aa:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80062ae:	d204      	bcs.n	80062ba <UART_SetConfig+0x396>
        {
          huart->Instance->BRR = usartdiv;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	681b      	ldr	r3, [r3, #0]
 80062b4:	693a      	ldr	r2, [r7, #16]
 80062b6:	60da      	str	r2, [r3, #12]
 80062b8:	e0b0      	b.n	800641c <UART_SetConfig+0x4f8>
        }
        else
        {
          ret = HAL_ERROR;
 80062ba:	2301      	movs	r3, #1
 80062bc:	76bb      	strb	r3, [r7, #26]
 80062be:	e0ad      	b.n	800641c <UART_SetConfig+0x4f8>
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
#endif /* USART_PRESC_PRESCALER */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	69db      	ldr	r3, [r3, #28]
 80062c4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80062c8:	d15b      	bne.n	8006382 <UART_SetConfig+0x45e>
  {
    switch (clocksource)
 80062ca:	7efb      	ldrb	r3, [r7, #27]
 80062cc:	2b08      	cmp	r3, #8
 80062ce:	d828      	bhi.n	8006322 <UART_SetConfig+0x3fe>
 80062d0:	a201      	add	r2, pc, #4	; (adr r2, 80062d8 <UART_SetConfig+0x3b4>)
 80062d2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80062d6:	bf00      	nop
 80062d8:	080062fd 	.word	0x080062fd
 80062dc:	08006305 	.word	0x08006305
 80062e0:	0800630d 	.word	0x0800630d
 80062e4:	08006323 	.word	0x08006323
 80062e8:	08006313 	.word	0x08006313
 80062ec:	08006323 	.word	0x08006323
 80062f0:	08006323 	.word	0x08006323
 80062f4:	08006323 	.word	0x08006323
 80062f8:	0800631b 	.word	0x0800631b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80062fc:	f7fd ffc2 	bl	8004284 <HAL_RCC_GetPCLK1Freq>
 8006300:	6178      	str	r0, [r7, #20]
        break;
 8006302:	e013      	b.n	800632c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 8006304:	f7fd ffd4 	bl	80042b0 <HAL_RCC_GetPCLK2Freq>
 8006308:	6178      	str	r0, [r7, #20]
        break;
 800630a:	e00f      	b.n	800632c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800630c:	4b49      	ldr	r3, [pc, #292]	; (8006434 <UART_SetConfig+0x510>)
 800630e:	617b      	str	r3, [r7, #20]
        break;
 8006310:	e00c      	b.n	800632c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8006312:	f7fd ff1f 	bl	8004154 <HAL_RCC_GetSysClockFreq>
 8006316:	6178      	str	r0, [r7, #20]
        break;
 8006318:	e008      	b.n	800632c <UART_SetConfig+0x408>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800631a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800631e:	617b      	str	r3, [r7, #20]
        break;
 8006320:	e004      	b.n	800632c <UART_SetConfig+0x408>
      default:
        pclk = 0U;
 8006322:	2300      	movs	r3, #0
 8006324:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 8006326:	2301      	movs	r3, #1
 8006328:	76bb      	strb	r3, [r7, #26]
        break;
 800632a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800632c:	697b      	ldr	r3, [r7, #20]
 800632e:	2b00      	cmp	r3, #0
 8006330:	d074      	beq.n	800641c <UART_SetConfig+0x4f8>
    {
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 8006332:	697b      	ldr	r3, [r7, #20]
 8006334:	005a      	lsls	r2, r3, #1
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	685b      	ldr	r3, [r3, #4]
 800633a:	085b      	lsrs	r3, r3, #1
 800633c:	441a      	add	r2, r3
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	685b      	ldr	r3, [r3, #4]
 8006342:	fbb2 f3f3 	udiv	r3, r2, r3
 8006346:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8006348:	693b      	ldr	r3, [r7, #16]
 800634a:	2b0f      	cmp	r3, #15
 800634c:	d916      	bls.n	800637c <UART_SetConfig+0x458>
 800634e:	693b      	ldr	r3, [r7, #16]
 8006350:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006354:	d212      	bcs.n	800637c <UART_SetConfig+0x458>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8006356:	693b      	ldr	r3, [r7, #16]
 8006358:	b29b      	uxth	r3, r3
 800635a:	f023 030f 	bic.w	r3, r3, #15
 800635e:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8006360:	693b      	ldr	r3, [r7, #16]
 8006362:	085b      	lsrs	r3, r3, #1
 8006364:	b29b      	uxth	r3, r3
 8006366:	f003 0307 	and.w	r3, r3, #7
 800636a:	b29a      	uxth	r2, r3
 800636c:	89fb      	ldrh	r3, [r7, #14]
 800636e:	4313      	orrs	r3, r2
 8006370:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	681b      	ldr	r3, [r3, #0]
 8006376:	89fa      	ldrh	r2, [r7, #14]
 8006378:	60da      	str	r2, [r3, #12]
 800637a:	e04f      	b.n	800641c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 800637c:	2301      	movs	r3, #1
 800637e:	76bb      	strb	r3, [r7, #26]
 8006380:	e04c      	b.n	800641c <UART_SetConfig+0x4f8>
      }
    }
  }
  else
  {
    switch (clocksource)
 8006382:	7efb      	ldrb	r3, [r7, #27]
 8006384:	2b08      	cmp	r3, #8
 8006386:	d828      	bhi.n	80063da <UART_SetConfig+0x4b6>
 8006388:	a201      	add	r2, pc, #4	; (adr r2, 8006390 <UART_SetConfig+0x46c>)
 800638a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800638e:	bf00      	nop
 8006390:	080063b5 	.word	0x080063b5
 8006394:	080063bd 	.word	0x080063bd
 8006398:	080063c5 	.word	0x080063c5
 800639c:	080063db 	.word	0x080063db
 80063a0:	080063cb 	.word	0x080063cb
 80063a4:	080063db 	.word	0x080063db
 80063a8:	080063db 	.word	0x080063db
 80063ac:	080063db 	.word	0x080063db
 80063b0:	080063d3 	.word	0x080063d3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80063b4:	f7fd ff66 	bl	8004284 <HAL_RCC_GetPCLK1Freq>
 80063b8:	6178      	str	r0, [r7, #20]
        break;
 80063ba:	e013      	b.n	80063e4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80063bc:	f7fd ff78 	bl	80042b0 <HAL_RCC_GetPCLK2Freq>
 80063c0:	6178      	str	r0, [r7, #20]
        break;
 80063c2:	e00f      	b.n	80063e4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 80063c4:	4b1b      	ldr	r3, [pc, #108]	; (8006434 <UART_SetConfig+0x510>)
 80063c6:	617b      	str	r3, [r7, #20]
        break;
 80063c8:	e00c      	b.n	80063e4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80063ca:	f7fd fec3 	bl	8004154 <HAL_RCC_GetSysClockFreq>
 80063ce:	6178      	str	r0, [r7, #20]
        break;
 80063d0:	e008      	b.n	80063e4 <UART_SetConfig+0x4c0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80063d2:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80063d6:	617b      	str	r3, [r7, #20]
        break;
 80063d8:	e004      	b.n	80063e4 <UART_SetConfig+0x4c0>
      default:
        pclk = 0U;
 80063da:	2300      	movs	r3, #0
 80063dc:	617b      	str	r3, [r7, #20]
        ret = HAL_ERROR;
 80063de:	2301      	movs	r3, #1
 80063e0:	76bb      	strb	r3, [r7, #26]
        break;
 80063e2:	bf00      	nop
    }

    if (pclk != 0U)
 80063e4:	697b      	ldr	r3, [r7, #20]
 80063e6:	2b00      	cmp	r3, #0
 80063e8:	d018      	beq.n	800641c <UART_SetConfig+0x4f8>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
#if defined(USART_PRESC_PRESCALER)
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
#else
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	685b      	ldr	r3, [r3, #4]
 80063ee:	085a      	lsrs	r2, r3, #1
 80063f0:	697b      	ldr	r3, [r7, #20]
 80063f2:	441a      	add	r2, r3
 80063f4:	687b      	ldr	r3, [r7, #4]
 80063f6:	685b      	ldr	r3, [r3, #4]
 80063f8:	fbb2 f3f3 	udiv	r3, r2, r3
 80063fc:	613b      	str	r3, [r7, #16]
#endif /* USART_PRESC_PRESCALER */
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80063fe:	693b      	ldr	r3, [r7, #16]
 8006400:	2b0f      	cmp	r3, #15
 8006402:	d909      	bls.n	8006418 <UART_SetConfig+0x4f4>
 8006404:	693b      	ldr	r3, [r7, #16]
 8006406:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800640a:	d205      	bcs.n	8006418 <UART_SetConfig+0x4f4>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800640c:	693b      	ldr	r3, [r7, #16]
 800640e:	b29a      	uxth	r2, r3
 8006410:	687b      	ldr	r3, [r7, #4]
 8006412:	681b      	ldr	r3, [r3, #0]
 8006414:	60da      	str	r2, [r3, #12]
 8006416:	e001      	b.n	800641c <UART_SetConfig+0x4f8>
      }
      else
      {
        ret = HAL_ERROR;
 8006418:	2301      	movs	r3, #1
 800641a:	76bb      	strb	r3, [r7, #26]
  huart->NbTxDataToProcess = 1;
  huart->NbRxDataToProcess = 1;
#endif /* USART_CR1_FIFOEN */

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	2200      	movs	r2, #0
 8006420:	665a      	str	r2, [r3, #100]	; 0x64
  huart->TxISR = NULL;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	2200      	movs	r2, #0
 8006426:	669a      	str	r2, [r3, #104]	; 0x68

  return ret;
 8006428:	7ebb      	ldrb	r3, [r7, #26]
}
 800642a:	4618      	mov	r0, r3
 800642c:	3720      	adds	r7, #32
 800642e:	46bd      	mov	sp, r7
 8006430:	bdb0      	pop	{r4, r5, r7, pc}
 8006432:	bf00      	nop
 8006434:	00f42400 	.word	0x00f42400

08006438 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8006438:	b480      	push	{r7}
 800643a:	b083      	sub	sp, #12
 800643c:	af00      	add	r7, sp, #0
 800643e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8006440:	687b      	ldr	r3, [r7, #4]
 8006442:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006444:	f003 0301 	and.w	r3, r3, #1
 8006448:	2b00      	cmp	r3, #0
 800644a:	d00a      	beq.n	8006462 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800644c:	687b      	ldr	r3, [r7, #4]
 800644e:	681b      	ldr	r3, [r3, #0]
 8006450:	685b      	ldr	r3, [r3, #4]
 8006452:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	430a      	orrs	r2, r1
 8006460:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8006462:	687b      	ldr	r3, [r7, #4]
 8006464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006466:	f003 0302 	and.w	r3, r3, #2
 800646a:	2b00      	cmp	r3, #0
 800646c:	d00a      	beq.n	8006484 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	681b      	ldr	r3, [r3, #0]
 8006472:	685b      	ldr	r3, [r3, #4]
 8006474:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800647c:	687b      	ldr	r3, [r7, #4]
 800647e:	681b      	ldr	r3, [r3, #0]
 8006480:	430a      	orrs	r2, r1
 8006482:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006488:	f003 0304 	and.w	r3, r3, #4
 800648c:	2b00      	cmp	r3, #0
 800648e:	d00a      	beq.n	80064a6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	681b      	ldr	r3, [r3, #0]
 8006494:	685b      	ldr	r3, [r3, #4]
 8006496:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	430a      	orrs	r2, r1
 80064a4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064aa:	f003 0308 	and.w	r3, r3, #8
 80064ae:	2b00      	cmp	r3, #0
 80064b0:	d00a      	beq.n	80064c8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	685b      	ldr	r3, [r3, #4]
 80064b8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	430a      	orrs	r2, r1
 80064c6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064cc:	f003 0310 	and.w	r3, r3, #16
 80064d0:	2b00      	cmp	r3, #0
 80064d2:	d00a      	beq.n	80064ea <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80064d4:	687b      	ldr	r3, [r7, #4]
 80064d6:	681b      	ldr	r3, [r3, #0]
 80064d8:	689b      	ldr	r3, [r3, #8]
 80064da:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	430a      	orrs	r2, r1
 80064e8:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064ee:	f003 0320 	and.w	r3, r3, #32
 80064f2:	2b00      	cmp	r3, #0
 80064f4:	d00a      	beq.n	800650c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 80064f6:	687b      	ldr	r3, [r7, #4]
 80064f8:	681b      	ldr	r3, [r3, #0]
 80064fa:	689b      	ldr	r3, [r3, #8]
 80064fc:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8006504:	687b      	ldr	r3, [r7, #4]
 8006506:	681b      	ldr	r3, [r3, #0]
 8006508:	430a      	orrs	r2, r1
 800650a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006510:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006514:	2b00      	cmp	r3, #0
 8006516:	d01a      	beq.n	800654e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8006518:	687b      	ldr	r3, [r7, #4]
 800651a:	681b      	ldr	r3, [r3, #0]
 800651c:	685b      	ldr	r3, [r3, #4]
 800651e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8006522:	687b      	ldr	r3, [r7, #4]
 8006524:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	430a      	orrs	r2, r1
 800652c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800652e:	687b      	ldr	r3, [r7, #4]
 8006530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006532:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8006536:	d10a      	bne.n	800654e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	685b      	ldr	r3, [r3, #4]
 800653e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	430a      	orrs	r2, r1
 800654c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800654e:	687b      	ldr	r3, [r7, #4]
 8006550:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006552:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006556:	2b00      	cmp	r3, #0
 8006558:	d00a      	beq.n	8006570 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	685b      	ldr	r3, [r3, #4]
 8006560:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	430a      	orrs	r2, r1
 800656e:	605a      	str	r2, [r3, #4]
  }
}
 8006570:	bf00      	nop
 8006572:	370c      	adds	r7, #12
 8006574:	46bd      	mov	sp, r7
 8006576:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657a:	4770      	bx	lr

0800657c <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800657c:	b580      	push	{r7, lr}
 800657e:	b086      	sub	sp, #24
 8006580:	af02      	add	r7, sp, #8
 8006582:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800658c:	f7fb f83c 	bl	8001608 <HAL_GetTick>
 8006590:	60f8      	str	r0, [r7, #12]

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	f003 0308 	and.w	r3, r3, #8
 800659c:	2b08      	cmp	r3, #8
 800659e:	d10e      	bne.n	80065be <UART_CheckIdleState+0x42>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065a0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80065a4:	9300      	str	r3, [sp, #0]
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	2200      	movs	r2, #0
 80065aa:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80065ae:	6878      	ldr	r0, [r7, #4]
 80065b0:	f000 f82d 	bl	800660e <UART_WaitOnFlagUntilTimeout>
 80065b4:	4603      	mov	r3, r0
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d001      	beq.n	80065be <UART_CheckIdleState+0x42>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065ba:	2303      	movs	r3, #3
 80065bc:	e023      	b.n	8006606 <UART_CheckIdleState+0x8a>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 80065be:	687b      	ldr	r3, [r7, #4]
 80065c0:	681b      	ldr	r3, [r3, #0]
 80065c2:	681b      	ldr	r3, [r3, #0]
 80065c4:	f003 0304 	and.w	r3, r3, #4
 80065c8:	2b04      	cmp	r3, #4
 80065ca:	d10e      	bne.n	80065ea <UART_CheckIdleState+0x6e>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80065cc:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80065d0:	9300      	str	r3, [sp, #0]
 80065d2:	68fb      	ldr	r3, [r7, #12]
 80065d4:	2200      	movs	r2, #0
 80065d6:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f000 f817 	bl	800660e <UART_WaitOnFlagUntilTimeout>
 80065e0:	4603      	mov	r3, r0
 80065e2:	2b00      	cmp	r3, #0
 80065e4:	d001      	beq.n	80065ea <UART_CheckIdleState+0x6e>
    {
      /* Timeout occurred */
      return HAL_TIMEOUT;
 80065e6:	2303      	movs	r3, #3
 80065e8:	e00d      	b.n	8006606 <UART_CheckIdleState+0x8a>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	2220      	movs	r2, #32
 80065ee:	679a      	str	r2, [r3, #120]	; 0x78
  huart->RxState = HAL_UART_STATE_READY;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2220      	movs	r2, #32
 80065f4:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	2200      	movs	r2, #0
 80065fa:	661a      	str	r2, [r3, #96]	; 0x60

  __HAL_UNLOCK(huart);
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2200      	movs	r2, #0
 8006600:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

  return HAL_OK;
 8006604:	2300      	movs	r3, #0
}
 8006606:	4618      	mov	r0, r3
 8006608:	3710      	adds	r7, #16
 800660a:	46bd      	mov	sp, r7
 800660c:	bd80      	pop	{r7, pc}

0800660e <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800660e:	b580      	push	{r7, lr}
 8006610:	b09c      	sub	sp, #112	; 0x70
 8006612:	af00      	add	r7, sp, #0
 8006614:	60f8      	str	r0, [r7, #12]
 8006616:	60b9      	str	r1, [r7, #8]
 8006618:	603b      	str	r3, [r7, #0]
 800661a:	4613      	mov	r3, r2
 800661c:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800661e:	e0a5      	b.n	800676c <UART_WaitOnFlagUntilTimeout+0x15e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006620:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006622:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006626:	f000 80a1 	beq.w	800676c <UART_WaitOnFlagUntilTimeout+0x15e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800662a:	f7fa ffed 	bl	8001608 <HAL_GetTick>
 800662e:	4602      	mov	r2, r0
 8006630:	683b      	ldr	r3, [r7, #0]
 8006632:	1ad3      	subs	r3, r2, r3
 8006634:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8006636:	429a      	cmp	r2, r3
 8006638:	d302      	bcc.n	8006640 <UART_WaitOnFlagUntilTimeout+0x32>
 800663a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800663c:	2b00      	cmp	r3, #0
 800663e:	d13e      	bne.n	80066be <UART_WaitOnFlagUntilTimeout+0xb0>
           interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                USART_CR1_TXEIE_TXFNFIE));
#else
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006640:	68fb      	ldr	r3, [r7, #12]
 8006642:	681b      	ldr	r3, [r3, #0]
 8006644:	653b      	str	r3, [r7, #80]	; 0x50
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006646:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006648:	e853 3f00 	ldrex	r3, [r3]
 800664c:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800664e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006650:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006654:	667b      	str	r3, [r7, #100]	; 0x64
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	681b      	ldr	r3, [r3, #0]
 800665a:	461a      	mov	r2, r3
 800665c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800665e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006660:	65ba      	str	r2, [r7, #88]	; 0x58
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006662:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8006664:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8006666:	e841 2300 	strex	r3, r2, [r1]
 800666a:	657b      	str	r3, [r7, #84]	; 0x54
   return(result);
 800666c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800666e:	2b00      	cmp	r3, #0
 8006670:	d1e6      	bne.n	8006640 <UART_WaitOnFlagUntilTimeout+0x32>
#endif /* USART_CR1_FIFOEN */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006672:	68fb      	ldr	r3, [r7, #12]
 8006674:	681b      	ldr	r3, [r3, #0]
 8006676:	3308      	adds	r3, #8
 8006678:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800667a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800667c:	e853 3f00 	ldrex	r3, [r3]
 8006680:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006682:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006684:	f023 0301 	bic.w	r3, r3, #1
 8006688:	663b      	str	r3, [r7, #96]	; 0x60
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	3308      	adds	r3, #8
 8006690:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8006692:	64ba      	str	r2, [r7, #72]	; 0x48
 8006694:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006696:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006698:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800669a:	e841 2300 	strex	r3, r2, [r1]
 800669e:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 80066a0:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80066a2:	2b00      	cmp	r3, #0
 80066a4:	d1e5      	bne.n	8006672 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState = HAL_UART_STATE_READY;
 80066a6:	68fb      	ldr	r3, [r7, #12]
 80066a8:	2220      	movs	r2, #32
 80066aa:	679a      	str	r2, [r3, #120]	; 0x78
        huart->RxState = HAL_UART_STATE_READY;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2220      	movs	r2, #32
 80066b0:	67da      	str	r2, [r3, #124]	; 0x7c

        __HAL_UNLOCK(huart);
 80066b2:	68fb      	ldr	r3, [r7, #12]
 80066b4:	2200      	movs	r2, #0
 80066b6:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

        return HAL_TIMEOUT;
 80066ba:	2303      	movs	r3, #3
 80066bc:	e067      	b.n	800678e <UART_WaitOnFlagUntilTimeout+0x180>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 80066be:	68fb      	ldr	r3, [r7, #12]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	681b      	ldr	r3, [r3, #0]
 80066c4:	f003 0304 	and.w	r3, r3, #4
 80066c8:	2b00      	cmp	r3, #0
 80066ca:	d04f      	beq.n	800676c <UART_WaitOnFlagUntilTimeout+0x15e>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 80066cc:	68fb      	ldr	r3, [r7, #12]
 80066ce:	681b      	ldr	r3, [r3, #0]
 80066d0:	69db      	ldr	r3, [r3, #28]
 80066d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80066d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80066da:	d147      	bne.n	800676c <UART_WaitOnFlagUntilTimeout+0x15e>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 80066dc:	68fb      	ldr	r3, [r7, #12]
 80066de:	681b      	ldr	r3, [r3, #0]
 80066e0:	f44f 6200 	mov.w	r2, #2048	; 0x800
 80066e4:	621a      	str	r2, [r3, #32]
             interrupts for the interrupt process */
#if defined(USART_CR1_FIFOEN)
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE |
                                                  USART_CR1_TXEIE_TXFNFIE));
#else
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80066e6:	68fb      	ldr	r3, [r7, #12]
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80066ec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80066ee:	e853 3f00 	ldrex	r3, [r3]
 80066f2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80066f4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80066f6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80066fa:	66fb      	str	r3, [r7, #108]	; 0x6c
 80066fc:	68fb      	ldr	r3, [r7, #12]
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	461a      	mov	r2, r3
 8006702:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006704:	637b      	str	r3, [r7, #52]	; 0x34
 8006706:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006708:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800670a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800670c:	e841 2300 	strex	r3, r2, [r1]
 8006710:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006712:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006714:	2b00      	cmp	r3, #0
 8006716:	d1e6      	bne.n	80066e6 <UART_WaitOnFlagUntilTimeout+0xd8>
#endif /* USART_CR1_FIFOEN */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	681b      	ldr	r3, [r3, #0]
 800671c:	3308      	adds	r3, #8
 800671e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006720:	697b      	ldr	r3, [r7, #20]
 8006722:	e853 3f00 	ldrex	r3, [r3]
 8006726:	613b      	str	r3, [r7, #16]
   return(result);
 8006728:	693b      	ldr	r3, [r7, #16]
 800672a:	f023 0301 	bic.w	r3, r3, #1
 800672e:	66bb      	str	r3, [r7, #104]	; 0x68
 8006730:	68fb      	ldr	r3, [r7, #12]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	3308      	adds	r3, #8
 8006736:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8006738:	623a      	str	r2, [r7, #32]
 800673a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800673c:	69f9      	ldr	r1, [r7, #28]
 800673e:	6a3a      	ldr	r2, [r7, #32]
 8006740:	e841 2300 	strex	r3, r2, [r1]
 8006744:	61bb      	str	r3, [r7, #24]
   return(result);
 8006746:	69bb      	ldr	r3, [r7, #24]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d1e5      	bne.n	8006718 <UART_WaitOnFlagUntilTimeout+0x10a>

          huart->gState = HAL_UART_STATE_READY;
 800674c:	68fb      	ldr	r3, [r7, #12]
 800674e:	2220      	movs	r2, #32
 8006750:	679a      	str	r2, [r3, #120]	; 0x78
          huart->RxState = HAL_UART_STATE_READY;
 8006752:	68fb      	ldr	r3, [r7, #12]
 8006754:	2220      	movs	r2, #32
 8006756:	67da      	str	r2, [r3, #124]	; 0x7c
          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2220      	movs	r2, #32
 800675c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8006760:	68fb      	ldr	r3, [r7, #12]
 8006762:	2200      	movs	r2, #0
 8006764:	f883 2074 	strb.w	r2, [r3, #116]	; 0x74

          return HAL_TIMEOUT;
 8006768:	2303      	movs	r3, #3
 800676a:	e010      	b.n	800678e <UART_WaitOnFlagUntilTimeout+0x180>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	69da      	ldr	r2, [r3, #28]
 8006772:	68bb      	ldr	r3, [r7, #8]
 8006774:	4013      	ands	r3, r2
 8006776:	68ba      	ldr	r2, [r7, #8]
 8006778:	429a      	cmp	r2, r3
 800677a:	bf0c      	ite	eq
 800677c:	2301      	moveq	r3, #1
 800677e:	2300      	movne	r3, #0
 8006780:	b2db      	uxtb	r3, r3
 8006782:	461a      	mov	r2, r3
 8006784:	79fb      	ldrb	r3, [r7, #7]
 8006786:	429a      	cmp	r2, r3
 8006788:	f43f af4a 	beq.w	8006620 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800678c:	2300      	movs	r3, #0
}
 800678e:	4618      	mov	r0, r3
 8006790:	3770      	adds	r7, #112	; 0x70
 8006792:	46bd      	mov	sp, r7
 8006794:	bd80      	pop	{r7, pc}

08006796 <USB_CoreInit>:
  * @param  cfg pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_CoreInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006796:	b084      	sub	sp, #16
 8006798:	b580      	push	{r7, lr}
 800679a:	b084      	sub	sp, #16
 800679c:	af00      	add	r7, sp, #0
 800679e:	6078      	str	r0, [r7, #4]
 80067a0:	f107 001c 	add.w	r0, r7, #28
 80067a4:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret;

  /* Select FS Embedded PHY */
  USBx->GUSBCFG |= USB_OTG_GUSBCFG_PHYSEL;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	68db      	ldr	r3, [r3, #12]
 80067ac:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	60da      	str	r2, [r3, #12]

  /* Reset after a PHY select */
  ret = USB_CoreReset(USBx);
 80067b4:	6878      	ldr	r0, [r7, #4]
 80067b6:	f000 f9a1 	bl	8006afc <USB_CoreReset>
 80067ba:	4603      	mov	r3, r0
 80067bc:	73fb      	strb	r3, [r7, #15]

  if (cfg.battery_charging_enable == 0U)
 80067be:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80067c0:	2b00      	cmp	r3, #0
 80067c2:	d106      	bne.n	80067d2 <USB_CoreInit+0x3c>
  {
    /* Activate the USB Transceiver */
    USBx->GCCFG |= USB_OTG_GCCFG_PWRDWN;
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067c8:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 80067cc:	687b      	ldr	r3, [r7, #4]
 80067ce:	639a      	str	r2, [r3, #56]	; 0x38
 80067d0:	e005      	b.n	80067de <USB_CoreInit+0x48>
  }
  else
  {
    /* Deactivate the USB Transceiver */
    USBx->GCCFG &= ~(USB_OTG_GCCFG_PWRDWN);
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80067d6:	f423 3280 	bic.w	r2, r3, #65536	; 0x10000
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	639a      	str	r2, [r3, #56]	; 0x38
  }

  return ret;
 80067de:	7bfb      	ldrb	r3, [r7, #15]
}
 80067e0:	4618      	mov	r0, r3
 80067e2:	3710      	adds	r7, #16
 80067e4:	46bd      	mov	sp, r7
 80067e6:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80067ea:	b004      	add	sp, #16
 80067ec:	4770      	bx	lr

080067ee <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 80067ee:	b480      	push	{r7}
 80067f0:	b083      	sub	sp, #12
 80067f2:	af00      	add	r7, sp, #0
 80067f4:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG |= USB_OTG_GAHBCFG_GINT;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	689b      	ldr	r3, [r3, #8]
 80067fa:	f043 0201 	orr.w	r2, r3, #1
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006802:	2300      	movs	r3, #0
}
 8006804:	4618      	mov	r0, r3
 8006806:	370c      	adds	r7, #12
 8006808:	46bd      	mov	sp, r7
 800680a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800680e:	4770      	bx	lr

08006810 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_OTG_GlobalTypeDef *USBx)
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	6078      	str	r0, [r7, #4]
  USBx->GAHBCFG &= ~USB_OTG_GAHBCFG_GINT;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	689b      	ldr	r3, [r3, #8]
 800681c:	f023 0201 	bic.w	r2, r3, #1
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	609a      	str	r2, [r3, #8]
  return HAL_OK;
 8006824:	2300      	movs	r3, #0
}
 8006826:	4618      	mov	r0, r3
 8006828:	370c      	adds	r7, #12
 800682a:	46bd      	mov	sp, r7
 800682c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006830:	4770      	bx	lr

08006832 <USB_SetCurrentMode>:
  *            @arg USB_DEVICE_MODE Peripheral mode
  *            @arg USB_HOST_MODE Host mode
  * @retval HAL status
  */
HAL_StatusTypeDef USB_SetCurrentMode(USB_OTG_GlobalTypeDef *USBx, USB_ModeTypeDef mode)
{
 8006832:	b580      	push	{r7, lr}
 8006834:	b084      	sub	sp, #16
 8006836:	af00      	add	r7, sp, #0
 8006838:	6078      	str	r0, [r7, #4]
 800683a:	460b      	mov	r3, r1
 800683c:	70fb      	strb	r3, [r7, #3]
  uint32_t ms = 0U;
 800683e:	2300      	movs	r3, #0
 8006840:	60fb      	str	r3, [r7, #12]

  USBx->GUSBCFG &= ~(USB_OTG_GUSBCFG_FHMOD | USB_OTG_GUSBCFG_FDMOD);
 8006842:	687b      	ldr	r3, [r7, #4]
 8006844:	68db      	ldr	r3, [r3, #12]
 8006846:	f023 42c0 	bic.w	r2, r3, #1610612736	; 0x60000000
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	60da      	str	r2, [r3, #12]

  if (mode == USB_HOST_MODE)
 800684e:	78fb      	ldrb	r3, [r7, #3]
 8006850:	2b01      	cmp	r3, #1
 8006852:	d115      	bne.n	8006880 <USB_SetCurrentMode+0x4e>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FHMOD;
 8006854:	687b      	ldr	r3, [r7, #4]
 8006856:	68db      	ldr	r3, [r3, #12]
 8006858:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 800685c:	687b      	ldr	r3, [r7, #4]
 800685e:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006860:	2001      	movs	r0, #1
 8006862:	f7fa fedd 	bl	8001620 <HAL_Delay>
      ms++;
 8006866:	68fb      	ldr	r3, [r7, #12]
 8006868:	3301      	adds	r3, #1
 800686a:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_HOST_MODE) && (ms < 50U));
 800686c:	6878      	ldr	r0, [r7, #4]
 800686e:	f000 f936 	bl	8006ade <USB_GetMode>
 8006872:	4603      	mov	r3, r0
 8006874:	2b01      	cmp	r3, #1
 8006876:	d01e      	beq.n	80068b6 <USB_SetCurrentMode+0x84>
 8006878:	68fb      	ldr	r3, [r7, #12]
 800687a:	2b31      	cmp	r3, #49	; 0x31
 800687c:	d9f0      	bls.n	8006860 <USB_SetCurrentMode+0x2e>
 800687e:	e01a      	b.n	80068b6 <USB_SetCurrentMode+0x84>
  }
  else if (mode == USB_DEVICE_MODE)
 8006880:	78fb      	ldrb	r3, [r7, #3]
 8006882:	2b00      	cmp	r3, #0
 8006884:	d115      	bne.n	80068b2 <USB_SetCurrentMode+0x80>
  {
    USBx->GUSBCFG |= USB_OTG_GUSBCFG_FDMOD;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	68db      	ldr	r3, [r3, #12]
 800688a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	60da      	str	r2, [r3, #12]

    do
    {
      HAL_Delay(1U);
 8006892:	2001      	movs	r0, #1
 8006894:	f7fa fec4 	bl	8001620 <HAL_Delay>
      ms++;
 8006898:	68fb      	ldr	r3, [r7, #12]
 800689a:	3301      	adds	r3, #1
 800689c:	60fb      	str	r3, [r7, #12]
    } while ((USB_GetMode(USBx) != (uint32_t)USB_DEVICE_MODE) && (ms < 50U));
 800689e:	6878      	ldr	r0, [r7, #4]
 80068a0:	f000 f91d 	bl	8006ade <USB_GetMode>
 80068a4:	4603      	mov	r3, r0
 80068a6:	2b00      	cmp	r3, #0
 80068a8:	d005      	beq.n	80068b6 <USB_SetCurrentMode+0x84>
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	2b31      	cmp	r3, #49	; 0x31
 80068ae:	d9f0      	bls.n	8006892 <USB_SetCurrentMode+0x60>
 80068b0:	e001      	b.n	80068b6 <USB_SetCurrentMode+0x84>
  }
  else
  {
    return HAL_ERROR;
 80068b2:	2301      	movs	r3, #1
 80068b4:	e005      	b.n	80068c2 <USB_SetCurrentMode+0x90>
  }

  if (ms == 50U)
 80068b6:	68fb      	ldr	r3, [r7, #12]
 80068b8:	2b32      	cmp	r3, #50	; 0x32
 80068ba:	d101      	bne.n	80068c0 <USB_SetCurrentMode+0x8e>
  {
    return HAL_ERROR;
 80068bc:	2301      	movs	r3, #1
 80068be:	e000      	b.n	80068c2 <USB_SetCurrentMode+0x90>
  }

  return HAL_OK;
 80068c0:	2300      	movs	r3, #0
}
 80068c2:	4618      	mov	r0, r3
 80068c4:	3710      	adds	r7, #16
 80068c6:	46bd      	mov	sp, r7
 80068c8:	bd80      	pop	{r7, pc}
	...

080068cc <USB_FlushTxFifo>:
  *         This parameter can be a value from 1 to 15
            15 means Flush all Tx FIFOs
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushTxFifo(USB_OTG_GlobalTypeDef *USBx, uint32_t num)
{
 80068cc:	b480      	push	{r7}
 80068ce:	b085      	sub	sp, #20
 80068d0:	af00      	add	r7, sp, #0
 80068d2:	6078      	str	r0, [r7, #4]
 80068d4:	6039      	str	r1, [r7, #0]
  __IO uint32_t count = 0U;
 80068d6:	2300      	movs	r3, #0
 80068d8:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 80068da:	68fb      	ldr	r3, [r7, #12]
 80068dc:	3301      	adds	r3, #1
 80068de:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 80068e0:	68fb      	ldr	r3, [r7, #12]
 80068e2:	4a13      	ldr	r2, [pc, #76]	; (8006930 <USB_FlushTxFifo+0x64>)
 80068e4:	4293      	cmp	r3, r2
 80068e6:	d901      	bls.n	80068ec <USB_FlushTxFifo+0x20>
    {
      return HAL_TIMEOUT;
 80068e8:	2303      	movs	r3, #3
 80068ea:	e01b      	b.n	8006924 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	691b      	ldr	r3, [r3, #16]
 80068f0:	2b00      	cmp	r3, #0
 80068f2:	daf2      	bge.n	80068da <USB_FlushTxFifo+0xe>

  /* Flush TX Fifo */
  count = 0U;
 80068f4:	2300      	movs	r3, #0
 80068f6:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = (USB_OTG_GRSTCTL_TXFFLSH | (num << 6));
 80068f8:	683b      	ldr	r3, [r7, #0]
 80068fa:	019b      	lsls	r3, r3, #6
 80068fc:	f043 0220 	orr.w	r2, r3, #32
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006904:	68fb      	ldr	r3, [r7, #12]
 8006906:	3301      	adds	r3, #1
 8006908:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800690a:	68fb      	ldr	r3, [r7, #12]
 800690c:	4a08      	ldr	r2, [pc, #32]	; (8006930 <USB_FlushTxFifo+0x64>)
 800690e:	4293      	cmp	r3, r2
 8006910:	d901      	bls.n	8006916 <USB_FlushTxFifo+0x4a>
    {
      return HAL_TIMEOUT;
 8006912:	2303      	movs	r3, #3
 8006914:	e006      	b.n	8006924 <USB_FlushTxFifo+0x58>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_TXFFLSH) == USB_OTG_GRSTCTL_TXFFLSH);
 8006916:	687b      	ldr	r3, [r7, #4]
 8006918:	691b      	ldr	r3, [r3, #16]
 800691a:	f003 0320 	and.w	r3, r3, #32
 800691e:	2b20      	cmp	r3, #32
 8006920:	d0f0      	beq.n	8006904 <USB_FlushTxFifo+0x38>

  return HAL_OK;
 8006922:	2300      	movs	r3, #0
}
 8006924:	4618      	mov	r0, r3
 8006926:	3714      	adds	r7, #20
 8006928:	46bd      	mov	sp, r7
 800692a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800692e:	4770      	bx	lr
 8006930:	00030d40 	.word	0x00030d40

08006934 <USB_FlushRxFifo>:
  * @brief  USB_FlushRxFifo  Flush Rx FIFO
  * @param  USBx  Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_FlushRxFifo(USB_OTG_GlobalTypeDef *USBx)
{
 8006934:	b480      	push	{r7}
 8006936:	b085      	sub	sp, #20
 8006938:	af00      	add	r7, sp, #0
 800693a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800693c:	2300      	movs	r3, #0
 800693e:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006940:	68fb      	ldr	r3, [r7, #12]
 8006942:	3301      	adds	r3, #1
 8006944:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006946:	68fb      	ldr	r3, [r7, #12]
 8006948:	4a11      	ldr	r2, [pc, #68]	; (8006990 <USB_FlushRxFifo+0x5c>)
 800694a:	4293      	cmp	r3, r2
 800694c:	d901      	bls.n	8006952 <USB_FlushRxFifo+0x1e>
    {
      return HAL_TIMEOUT;
 800694e:	2303      	movs	r3, #3
 8006950:	e018      	b.n	8006984 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	691b      	ldr	r3, [r3, #16]
 8006956:	2b00      	cmp	r3, #0
 8006958:	daf2      	bge.n	8006940 <USB_FlushRxFifo+0xc>

  /* Flush RX Fifo */
  count = 0U;
 800695a:	2300      	movs	r3, #0
 800695c:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL = USB_OTG_GRSTCTL_RXFFLSH;
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	2210      	movs	r2, #16
 8006962:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006964:	68fb      	ldr	r3, [r7, #12]
 8006966:	3301      	adds	r3, #1
 8006968:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 800696a:	68fb      	ldr	r3, [r7, #12]
 800696c:	4a08      	ldr	r2, [pc, #32]	; (8006990 <USB_FlushRxFifo+0x5c>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d901      	bls.n	8006976 <USB_FlushRxFifo+0x42>
    {
      return HAL_TIMEOUT;
 8006972:	2303      	movs	r3, #3
 8006974:	e006      	b.n	8006984 <USB_FlushRxFifo+0x50>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_RXFFLSH) == USB_OTG_GRSTCTL_RXFFLSH);
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	691b      	ldr	r3, [r3, #16]
 800697a:	f003 0310 	and.w	r3, r3, #16
 800697e:	2b10      	cmp	r3, #16
 8006980:	d0f0      	beq.n	8006964 <USB_FlushRxFifo+0x30>

  return HAL_OK;
 8006982:	2300      	movs	r3, #0
}
 8006984:	4618      	mov	r0, r3
 8006986:	3714      	adds	r7, #20
 8006988:	46bd      	mov	sp, r7
 800698a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800698e:	4770      	bx	lr
 8006990:	00030d40 	.word	0x00030d40

08006994 <USB_WritePacket>:
  * @param  len  Number of bytes to write
  * @retval HAL status
  */
HAL_StatusTypeDef USB_WritePacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *src,
                                  uint8_t ch_ep_num, uint16_t len)
{
 8006994:	b480      	push	{r7}
 8006996:	b089      	sub	sp, #36	; 0x24
 8006998:	af00      	add	r7, sp, #0
 800699a:	60f8      	str	r0, [r7, #12]
 800699c:	60b9      	str	r1, [r7, #8]
 800699e:	4611      	mov	r1, r2
 80069a0:	461a      	mov	r2, r3
 80069a2:	460b      	mov	r3, r1
 80069a4:	71fb      	strb	r3, [r7, #7]
 80069a6:	4613      	mov	r3, r2
 80069a8:	80bb      	strh	r3, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80069aa:	68fb      	ldr	r3, [r7, #12]
 80069ac:	617b      	str	r3, [r7, #20]
  uint8_t *pSrc = src;
 80069ae:	68bb      	ldr	r3, [r7, #8]
 80069b0:	61fb      	str	r3, [r7, #28]
  uint32_t count32b;
  uint32_t i;

  count32b = ((uint32_t)len + 3U) / 4U;
 80069b2:	88bb      	ldrh	r3, [r7, #4]
 80069b4:	3303      	adds	r3, #3
 80069b6:	089b      	lsrs	r3, r3, #2
 80069b8:	613b      	str	r3, [r7, #16]
  for (i = 0U; i < count32b; i++)
 80069ba:	2300      	movs	r3, #0
 80069bc:	61bb      	str	r3, [r7, #24]
 80069be:	e018      	b.n	80069f2 <USB_WritePacket+0x5e>
  {
    USBx_DFIFO((uint32_t)ch_ep_num) = __UNALIGNED_UINT32_READ(pSrc);
 80069c0:	79fb      	ldrb	r3, [r7, #7]
 80069c2:	031a      	lsls	r2, r3, #12
 80069c4:	697b      	ldr	r3, [r7, #20]
 80069c6:	4413      	add	r3, r2
 80069c8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80069cc:	461a      	mov	r2, r3
 80069ce:	69fb      	ldr	r3, [r7, #28]
 80069d0:	681b      	ldr	r3, [r3, #0]
 80069d2:	6013      	str	r3, [r2, #0]
    pSrc++;
 80069d4:	69fb      	ldr	r3, [r7, #28]
 80069d6:	3301      	adds	r3, #1
 80069d8:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80069da:	69fb      	ldr	r3, [r7, #28]
 80069dc:	3301      	adds	r3, #1
 80069de:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80069e0:	69fb      	ldr	r3, [r7, #28]
 80069e2:	3301      	adds	r3, #1
 80069e4:	61fb      	str	r3, [r7, #28]
    pSrc++;
 80069e6:	69fb      	ldr	r3, [r7, #28]
 80069e8:	3301      	adds	r3, #1
 80069ea:	61fb      	str	r3, [r7, #28]
  for (i = 0U; i < count32b; i++)
 80069ec:	69bb      	ldr	r3, [r7, #24]
 80069ee:	3301      	adds	r3, #1
 80069f0:	61bb      	str	r3, [r7, #24]
 80069f2:	69ba      	ldr	r2, [r7, #24]
 80069f4:	693b      	ldr	r3, [r7, #16]
 80069f6:	429a      	cmp	r2, r3
 80069f8:	d3e2      	bcc.n	80069c0 <USB_WritePacket+0x2c>
  }

  return HAL_OK;
 80069fa:	2300      	movs	r3, #0
}
 80069fc:	4618      	mov	r0, r3
 80069fe:	3724      	adds	r7, #36	; 0x24
 8006a00:	46bd      	mov	sp, r7
 8006a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a06:	4770      	bx	lr

08006a08 <USB_ReadPacket>:
  * @param  dest  source pointer
  * @param  len  Number of bytes to read
  * @retval pointer to destination buffer
  */
void *USB_ReadPacket(USB_OTG_GlobalTypeDef *USBx, uint8_t *dest, uint16_t len)
{
 8006a08:	b480      	push	{r7}
 8006a0a:	b08b      	sub	sp, #44	; 0x2c
 8006a0c:	af00      	add	r7, sp, #0
 8006a0e:	60f8      	str	r0, [r7, #12]
 8006a10:	60b9      	str	r1, [r7, #8]
 8006a12:	4613      	mov	r3, r2
 8006a14:	80fb      	strh	r3, [r7, #6]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	61bb      	str	r3, [r7, #24]
  uint8_t *pDest = dest;
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t pData;
  uint32_t i;
  uint32_t count32b = (uint32_t)len >> 2U;
 8006a1e:	88fb      	ldrh	r3, [r7, #6]
 8006a20:	089b      	lsrs	r3, r3, #2
 8006a22:	b29b      	uxth	r3, r3
 8006a24:	617b      	str	r3, [r7, #20]
  uint16_t remaining_bytes = len % 4U;
 8006a26:	88fb      	ldrh	r3, [r7, #6]
 8006a28:	f003 0303 	and.w	r3, r3, #3
 8006a2c:	83fb      	strh	r3, [r7, #30]

  for (i = 0U; i < count32b; i++)
 8006a2e:	2300      	movs	r3, #0
 8006a30:	623b      	str	r3, [r7, #32]
 8006a32:	e014      	b.n	8006a5e <USB_ReadPacket+0x56>
  {
    __UNALIGNED_UINT32_WRITE(pDest, USBx_DFIFO(0U));
 8006a34:	69bb      	ldr	r3, [r7, #24]
 8006a36:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a3a:	681a      	ldr	r2, [r3, #0]
 8006a3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a3e:	601a      	str	r2, [r3, #0]
    pDest++;
 8006a40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a42:	3301      	adds	r3, #1
 8006a44:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006a46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a48:	3301      	adds	r3, #1
 8006a4a:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a4e:	3301      	adds	r3, #1
 8006a50:	627b      	str	r3, [r7, #36]	; 0x24
    pDest++;
 8006a52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a54:	3301      	adds	r3, #1
 8006a56:	627b      	str	r3, [r7, #36]	; 0x24
  for (i = 0U; i < count32b; i++)
 8006a58:	6a3b      	ldr	r3, [r7, #32]
 8006a5a:	3301      	adds	r3, #1
 8006a5c:	623b      	str	r3, [r7, #32]
 8006a5e:	6a3a      	ldr	r2, [r7, #32]
 8006a60:	697b      	ldr	r3, [r7, #20]
 8006a62:	429a      	cmp	r2, r3
 8006a64:	d3e6      	bcc.n	8006a34 <USB_ReadPacket+0x2c>
  }

  /* When Number of data is not word aligned, read the remaining byte */
  if (remaining_bytes != 0U)
 8006a66:	8bfb      	ldrh	r3, [r7, #30]
 8006a68:	2b00      	cmp	r3, #0
 8006a6a:	d01e      	beq.n	8006aaa <USB_ReadPacket+0xa2>
  {
    i = 0U;
 8006a6c:	2300      	movs	r3, #0
 8006a6e:	623b      	str	r3, [r7, #32]
    __UNALIGNED_UINT32_WRITE(&pData, USBx_DFIFO(0U));
 8006a70:	69bb      	ldr	r3, [r7, #24]
 8006a72:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8006a76:	461a      	mov	r2, r3
 8006a78:	f107 0310 	add.w	r3, r7, #16
 8006a7c:	6812      	ldr	r2, [r2, #0]
 8006a7e:	601a      	str	r2, [r3, #0]

    do
    {
      *(uint8_t *)pDest = (uint8_t)(pData >> (8U * (uint8_t)(i)));
 8006a80:	693a      	ldr	r2, [r7, #16]
 8006a82:	6a3b      	ldr	r3, [r7, #32]
 8006a84:	b2db      	uxtb	r3, r3
 8006a86:	00db      	lsls	r3, r3, #3
 8006a88:	fa22 f303 	lsr.w	r3, r2, r3
 8006a8c:	b2da      	uxtb	r2, r3
 8006a8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a90:	701a      	strb	r2, [r3, #0]
      i++;
 8006a92:	6a3b      	ldr	r3, [r7, #32]
 8006a94:	3301      	adds	r3, #1
 8006a96:	623b      	str	r3, [r7, #32]
      pDest++;
 8006a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006a9a:	3301      	adds	r3, #1
 8006a9c:	627b      	str	r3, [r7, #36]	; 0x24
      remaining_bytes--;
 8006a9e:	8bfb      	ldrh	r3, [r7, #30]
 8006aa0:	3b01      	subs	r3, #1
 8006aa2:	83fb      	strh	r3, [r7, #30]
    } while (remaining_bytes != 0U);
 8006aa4:	8bfb      	ldrh	r3, [r7, #30]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d1ea      	bne.n	8006a80 <USB_ReadPacket+0x78>
  }

  return ((void *)pDest);
 8006aaa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8006aac:	4618      	mov	r0, r3
 8006aae:	372c      	adds	r7, #44	; 0x2c
 8006ab0:	46bd      	mov	sp, r7
 8006ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ab6:	4770      	bx	lr

08006ab8 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts: return the global USB interrupt status
  * @param  USBx  Selected device
  * @retval HAL status
  */
uint32_t  USB_ReadInterrupts(USB_OTG_GlobalTypeDef *USBx)
{
 8006ab8:	b480      	push	{r7}
 8006aba:	b085      	sub	sp, #20
 8006abc:	af00      	add	r7, sp, #0
 8006abe:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->GINTSTS;
 8006ac0:	687b      	ldr	r3, [r7, #4]
 8006ac2:	695b      	ldr	r3, [r3, #20]
 8006ac4:	60fb      	str	r3, [r7, #12]
  tmpreg &= USBx->GINTMSK;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	699b      	ldr	r3, [r3, #24]
 8006aca:	68fa      	ldr	r2, [r7, #12]
 8006acc:	4013      	ands	r3, r2
 8006ace:	60fb      	str	r3, [r7, #12]

  return tmpreg;
 8006ad0:	68fb      	ldr	r3, [r7, #12]
}
 8006ad2:	4618      	mov	r0, r3
 8006ad4:	3714      	adds	r7, #20
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr

08006ade <USB_GetMode>:
  *          This parameter can be one of these values:
  *           0 : Host
  *           1 : Device
  */
uint32_t USB_GetMode(USB_OTG_GlobalTypeDef *USBx)
{
 8006ade:	b480      	push	{r7}
 8006ae0:	b083      	sub	sp, #12
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
  return ((USBx->GINTSTS) & 0x1U);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	695b      	ldr	r3, [r3, #20]
 8006aea:	f003 0301 	and.w	r3, r3, #1
}
 8006aee:	4618      	mov	r0, r3
 8006af0:	370c      	adds	r7, #12
 8006af2:	46bd      	mov	sp, r7
 8006af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af8:	4770      	bx	lr
	...

08006afc <USB_CoreReset>:
  * @brief  Reset the USB Core (needed after USB clock settings change)
  * @param  USBx  Selected device
  * @retval HAL status
  */
static HAL_StatusTypeDef USB_CoreReset(USB_OTG_GlobalTypeDef *USBx)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b085      	sub	sp, #20
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006b04:	2300      	movs	r3, #0
 8006b06:	60fb      	str	r3, [r7, #12]

  /* Wait for AHB master IDLE state. */
  do
  {
    count++;
 8006b08:	68fb      	ldr	r3, [r7, #12]
 8006b0a:	3301      	adds	r3, #1
 8006b0c:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b0e:	68fb      	ldr	r3, [r7, #12]
 8006b10:	4a13      	ldr	r2, [pc, #76]	; (8006b60 <USB_CoreReset+0x64>)
 8006b12:	4293      	cmp	r3, r2
 8006b14:	d901      	bls.n	8006b1a <USB_CoreReset+0x1e>
    {
      return HAL_TIMEOUT;
 8006b16:	2303      	movs	r3, #3
 8006b18:	e01b      	b.n	8006b52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_AHBIDL) == 0U);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	691b      	ldr	r3, [r3, #16]
 8006b1e:	2b00      	cmp	r3, #0
 8006b20:	daf2      	bge.n	8006b08 <USB_CoreReset+0xc>

  /* Core Soft Reset */
  count = 0U;
 8006b22:	2300      	movs	r3, #0
 8006b24:	60fb      	str	r3, [r7, #12]
  USBx->GRSTCTL |= USB_OTG_GRSTCTL_CSRST;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	691b      	ldr	r3, [r3, #16]
 8006b2a:	f043 0201 	orr.w	r2, r3, #1
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	611a      	str	r2, [r3, #16]

  do
  {
    count++;
 8006b32:	68fb      	ldr	r3, [r7, #12]
 8006b34:	3301      	adds	r3, #1
 8006b36:	60fb      	str	r3, [r7, #12]

    if (count > 200000U)
 8006b38:	68fb      	ldr	r3, [r7, #12]
 8006b3a:	4a09      	ldr	r2, [pc, #36]	; (8006b60 <USB_CoreReset+0x64>)
 8006b3c:	4293      	cmp	r3, r2
 8006b3e:	d901      	bls.n	8006b44 <USB_CoreReset+0x48>
    {
      return HAL_TIMEOUT;
 8006b40:	2303      	movs	r3, #3
 8006b42:	e006      	b.n	8006b52 <USB_CoreReset+0x56>
    }
  } while ((USBx->GRSTCTL & USB_OTG_GRSTCTL_CSRST) == USB_OTG_GRSTCTL_CSRST);
 8006b44:	687b      	ldr	r3, [r7, #4]
 8006b46:	691b      	ldr	r3, [r3, #16]
 8006b48:	f003 0301 	and.w	r3, r3, #1
 8006b4c:	2b01      	cmp	r3, #1
 8006b4e:	d0f0      	beq.n	8006b32 <USB_CoreReset+0x36>

  return HAL_OK;
 8006b50:	2300      	movs	r3, #0
}
 8006b52:	4618      	mov	r0, r3
 8006b54:	3714      	adds	r7, #20
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr
 8006b5e:	bf00      	nop
 8006b60:	00030d40 	.word	0x00030d40

08006b64 <USB_HostInit>:
  * @param  cfg   pointer to a USB_OTG_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_HostInit(USB_OTG_GlobalTypeDef *USBx, USB_OTG_CfgTypeDef cfg)
{
 8006b64:	b084      	sub	sp, #16
 8006b66:	b580      	push	{r7, lr}
 8006b68:	b086      	sub	sp, #24
 8006b6a:	af00      	add	r7, sp, #0
 8006b6c:	6078      	str	r0, [r7, #4]
 8006b6e:	f107 0024 	add.w	r0, r7, #36	; 0x24
 8006b72:	e880 000e 	stmia.w	r0, {r1, r2, r3}
  HAL_StatusTypeDef ret = HAL_OK;
 8006b76:	2300      	movs	r3, #0
 8006b78:	75fb      	strb	r3, [r7, #23]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	60fb      	str	r3, [r7, #12]
  uint32_t i;

  /* Restart the Phy Clock */
  USBx_PCGCCTL = 0U;
 8006b7e:	68fb      	ldr	r3, [r7, #12]
 8006b80:	f503 6360 	add.w	r3, r3, #3584	; 0xe00
 8006b84:	461a      	mov	r2, r3
 8006b86:	2300      	movs	r3, #0
 8006b88:	6013      	str	r3, [r2, #0]

  /* Disable VBUS sensing */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_VBDEN);
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b8e:	f423 1200 	bic.w	r2, r3, #2097152	; 0x200000
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	639a      	str	r2, [r3, #56]	; 0x38

  /* Disable Battery chargin detector */
  USBx->GCCFG &= ~(USB_OTG_GCCFG_BCDEN);
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006b9a:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8006b9e:	687b      	ldr	r3, [r7, #4]
 8006ba0:	639a      	str	r2, [r3, #56]	; 0x38

  /* Set default Max speed support */
  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSS);
 8006ba2:	68fb      	ldr	r3, [r7, #12]
 8006ba4:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ba8:	681b      	ldr	r3, [r3, #0]
 8006baa:	68fa      	ldr	r2, [r7, #12]
 8006bac:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006bb0:	f023 0304 	bic.w	r3, r3, #4
 8006bb4:	6013      	str	r3, [r2, #0]

  /* Make sure the FIFOs are flushed. */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 8006bb6:	2110      	movs	r1, #16
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f7ff fe87 	bl	80068cc <USB_FlushTxFifo>
 8006bbe:	4603      	mov	r3, r0
 8006bc0:	2b00      	cmp	r3, #0
 8006bc2:	d001      	beq.n	8006bc8 <USB_HostInit+0x64>
  {
    ret = HAL_ERROR;
 8006bc4:	2301      	movs	r3, #1
 8006bc6:	75fb      	strb	r3, [r7, #23]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f7ff feb3 	bl	8006934 <USB_FlushRxFifo>
 8006bce:	4603      	mov	r3, r0
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d001      	beq.n	8006bd8 <USB_HostInit+0x74>
  {
    ret = HAL_ERROR;
 8006bd4:	2301      	movs	r3, #1
 8006bd6:	75fb      	strb	r3, [r7, #23]
  }

  /* Clear all pending HC Interrupts */
  for (i = 0U; i < cfg.Host_channels; i++)
 8006bd8:	2300      	movs	r3, #0
 8006bda:	613b      	str	r3, [r7, #16]
 8006bdc:	e015      	b.n	8006c0a <USB_HostInit+0xa6>
  {
    USBx_HC(i)->HCINT = 0xFFFFFFFFU;
 8006bde:	693b      	ldr	r3, [r7, #16]
 8006be0:	015a      	lsls	r2, r3, #5
 8006be2:	68fb      	ldr	r3, [r7, #12]
 8006be4:	4413      	add	r3, r2
 8006be6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bea:	461a      	mov	r2, r3
 8006bec:	f04f 33ff 	mov.w	r3, #4294967295
 8006bf0:	6093      	str	r3, [r2, #8]
    USBx_HC(i)->HCINTMSK = 0U;
 8006bf2:	693b      	ldr	r3, [r7, #16]
 8006bf4:	015a      	lsls	r2, r3, #5
 8006bf6:	68fb      	ldr	r3, [r7, #12]
 8006bf8:	4413      	add	r3, r2
 8006bfa:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006bfe:	461a      	mov	r2, r3
 8006c00:	2300      	movs	r3, #0
 8006c02:	60d3      	str	r3, [r2, #12]
  for (i = 0U; i < cfg.Host_channels; i++)
 8006c04:	693b      	ldr	r3, [r7, #16]
 8006c06:	3301      	adds	r3, #1
 8006c08:	613b      	str	r3, [r7, #16]
 8006c0a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006c0c:	693a      	ldr	r2, [r7, #16]
 8006c0e:	429a      	cmp	r2, r3
 8006c10:	d3e5      	bcc.n	8006bde <USB_HostInit+0x7a>
  }

  /* Disable all interrupts. */
  USBx->GINTMSK = 0U;
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	2200      	movs	r2, #0
 8006c16:	619a      	str	r2, [r3, #24]

  /* Clear any pending interrupts */
  USBx->GINTSTS = 0xFFFFFFFFU;
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f04f 32ff 	mov.w	r2, #4294967295
 8006c1e:	615a      	str	r2, [r3, #20]

  /* set Rx FIFO size */
  USBx->GRXFSIZ  = 0x80U;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	2280      	movs	r2, #128	; 0x80
 8006c24:	625a      	str	r2, [r3, #36]	; 0x24
  USBx->DIEPTXF0_HNPTXFSIZ = (uint32_t)(((0x60U << 16) & USB_OTG_NPTXFD) | 0x80U);
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	4a0c      	ldr	r2, [pc, #48]	; (8006c5c <USB_HostInit+0xf8>)
 8006c2a:	629a      	str	r2, [r3, #40]	; 0x28
  USBx->HPTXFSIZ = (uint32_t)(((0x40U << 16)& USB_OTG_HPTXFSIZ_PTXFD) | 0xE0U);
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	4a0c      	ldr	r2, [pc, #48]	; (8006c60 <USB_HostInit+0xfc>)
 8006c30:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
  /* Enable the common interrupts */
  USBx->GINTMSK |= USB_OTG_GINTMSK_RXFLVLM;
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	699b      	ldr	r3, [r3, #24]
 8006c38:	f043 0210 	orr.w	r2, r3, #16
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	619a      	str	r2, [r3, #24]

  /* Enable interrupts matching to the Host mode ONLY */
  USBx->GINTMSK |= (USB_OTG_GINTMSK_PRTIM            | USB_OTG_GINTMSK_HCIM | \
 8006c40:	687b      	ldr	r3, [r7, #4]
 8006c42:	699a      	ldr	r2, [r3, #24]
 8006c44:	4b07      	ldr	r3, [pc, #28]	; (8006c64 <USB_HostInit+0x100>)
 8006c46:	4313      	orrs	r3, r2
 8006c48:	687a      	ldr	r2, [r7, #4]
 8006c4a:	6193      	str	r3, [r2, #24]
                    USB_OTG_GINTMSK_SOFM             | USB_OTG_GINTSTS_DISCINT | \
                    USB_OTG_GINTMSK_PXFRM_IISOOXFRM  | USB_OTG_GINTMSK_WUIM);

  return ret;
 8006c4c:	7dfb      	ldrb	r3, [r7, #23]
}
 8006c4e:	4618      	mov	r0, r3
 8006c50:	3718      	adds	r7, #24
 8006c52:	46bd      	mov	sp, r7
 8006c54:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 8006c58:	b004      	add	sp, #16
 8006c5a:	4770      	bx	lr
 8006c5c:	00600080 	.word	0x00600080
 8006c60:	004000e0 	.word	0x004000e0
 8006c64:	a3200008 	.word	0xa3200008

08006c68 <USB_InitFSLSPClkSel>:
  *           HCFG_48_MHZ : Full Speed 48 MHz Clock
  *           HCFG_6_MHZ : Low Speed 6 MHz Clock
  * @retval HAL status
  */
HAL_StatusTypeDef USB_InitFSLSPClkSel(USB_OTG_GlobalTypeDef *USBx, uint8_t freq)
{
 8006c68:	b480      	push	{r7}
 8006c6a:	b085      	sub	sp, #20
 8006c6c:	af00      	add	r7, sp, #0
 8006c6e:	6078      	str	r0, [r7, #4]
 8006c70:	460b      	mov	r3, r1
 8006c72:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006c74:	687b      	ldr	r3, [r7, #4]
 8006c76:	60fb      	str	r3, [r7, #12]

  USBx_HOST->HCFG &= ~(USB_OTG_HCFG_FSLSPCS);
 8006c78:	68fb      	ldr	r3, [r7, #12]
 8006c7a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c7e:	681b      	ldr	r3, [r3, #0]
 8006c80:	68fa      	ldr	r2, [r7, #12]
 8006c82:	f502 6280 	add.w	r2, r2, #1024	; 0x400
 8006c86:	f023 0303 	bic.w	r3, r3, #3
 8006c8a:	6013      	str	r3, [r2, #0]
  USBx_HOST->HCFG |= (uint32_t)freq & USB_OTG_HCFG_FSLSPCS;
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006c92:	681a      	ldr	r2, [r3, #0]
 8006c94:	78fb      	ldrb	r3, [r7, #3]
 8006c96:	f003 0303 	and.w	r3, r3, #3
 8006c9a:	68f9      	ldr	r1, [r7, #12]
 8006c9c:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006ca0:	4313      	orrs	r3, r2
 8006ca2:	600b      	str	r3, [r1, #0]

  if (freq == HCFG_48_MHZ)
 8006ca4:	78fb      	ldrb	r3, [r7, #3]
 8006ca6:	2b01      	cmp	r3, #1
 8006ca8:	d107      	bne.n	8006cba <USB_InitFSLSPClkSel+0x52>
  {
    USBx_HOST->HFIR = 48000U;
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006cb0:	461a      	mov	r2, r3
 8006cb2:	f64b 3380 	movw	r3, #48000	; 0xbb80
 8006cb6:	6053      	str	r3, [r2, #4]
 8006cb8:	e009      	b.n	8006cce <USB_InitFSLSPClkSel+0x66>
  }
  else if (freq == HCFG_6_MHZ)
 8006cba:	78fb      	ldrb	r3, [r7, #3]
 8006cbc:	2b02      	cmp	r3, #2
 8006cbe:	d106      	bne.n	8006cce <USB_InitFSLSPClkSel+0x66>
  {
    USBx_HOST->HFIR = 6000U;
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006cc6:	461a      	mov	r2, r3
 8006cc8:	f241 7370 	movw	r3, #6000	; 0x1770
 8006ccc:	6053      	str	r3, [r2, #4]
  else
  {
    /* ... */
  }

  return HAL_OK;
 8006cce:	2300      	movs	r3, #0
}
 8006cd0:	4618      	mov	r0, r3
 8006cd2:	3714      	adds	r7, #20
 8006cd4:	46bd      	mov	sp, r7
 8006cd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cda:	4770      	bx	lr

08006cdc <USB_DriveVbus>:
  *           0 : Deactivate VBUS
  *           1 : Activate VBUS
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DriveVbus(USB_OTG_GlobalTypeDef *USBx, uint8_t state)
{
 8006cdc:	b480      	push	{r7}
 8006cde:	b085      	sub	sp, #20
 8006ce0:	af00      	add	r7, sp, #0
 8006ce2:	6078      	str	r0, [r7, #4]
 8006ce4:	460b      	mov	r3, r1
 8006ce6:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006cec:	2300      	movs	r3, #0
 8006cee:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	60bb      	str	r3, [r7, #8]

  hprt0 &= ~(USB_OTG_HPRT_PENA | USB_OTG_HPRT_PCDET |
 8006cfa:	68bb      	ldr	r3, [r7, #8]
 8006cfc:	f023 032e 	bic.w	r3, r3, #46	; 0x2e
 8006d00:	60bb      	str	r3, [r7, #8]
             USB_OTG_HPRT_PENCHNG | USB_OTG_HPRT_POCCHNG);

  if (((hprt0 & USB_OTG_HPRT_PPWR) == 0U) && (state == 1U))
 8006d02:	68bb      	ldr	r3, [r7, #8]
 8006d04:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d109      	bne.n	8006d20 <USB_DriveVbus+0x44>
 8006d0c:	78fb      	ldrb	r3, [r7, #3]
 8006d0e:	2b01      	cmp	r3, #1
 8006d10:	d106      	bne.n	8006d20 <USB_DriveVbus+0x44>
  {
    USBx_HPRT0 = (USB_OTG_HPRT_PPWR | hprt0);
 8006d12:	68bb      	ldr	r3, [r7, #8]
 8006d14:	68fa      	ldr	r2, [r7, #12]
 8006d16:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006d1a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006d1e:	6013      	str	r3, [r2, #0]
  }
  if (((hprt0 & USB_OTG_HPRT_PPWR) == USB_OTG_HPRT_PPWR) && (state == 0U))
 8006d20:	68bb      	ldr	r3, [r7, #8]
 8006d22:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8006d26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006d2a:	d109      	bne.n	8006d40 <USB_DriveVbus+0x64>
 8006d2c:	78fb      	ldrb	r3, [r7, #3]
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d106      	bne.n	8006d40 <USB_DriveVbus+0x64>
  {
    USBx_HPRT0 = ((~USB_OTG_HPRT_PPWR) & hprt0);
 8006d32:	68bb      	ldr	r3, [r7, #8]
 8006d34:	68fa      	ldr	r2, [r7, #12]
 8006d36:	f502 6288 	add.w	r2, r2, #1088	; 0x440
 8006d3a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006d3e:	6013      	str	r3, [r2, #0]
  }
  return HAL_OK;
 8006d40:	2300      	movs	r3, #0
}
 8006d42:	4618      	mov	r0, r3
 8006d44:	3714      	adds	r7, #20
 8006d46:	46bd      	mov	sp, r7
 8006d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d4c:	4770      	bx	lr

08006d4e <USB_GetHostSpeed>:
  *          This parameter can be one of these values:
  *            @arg HCD_SPEED_FULL: Full speed mode
  *            @arg HCD_SPEED_LOW: Low speed mode
  */
uint32_t USB_GetHostSpeed(USB_OTG_GlobalTypeDef *USBx)
{
 8006d4e:	b480      	push	{r7}
 8006d50:	b085      	sub	sp, #20
 8006d52:	af00      	add	r7, sp, #0
 8006d54:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	60fb      	str	r3, [r7, #12]
  __IO uint32_t hprt0 = 0U;
 8006d5a:	2300      	movs	r3, #0
 8006d5c:	60bb      	str	r3, [r7, #8]

  hprt0 = USBx_HPRT0;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	f503 6388 	add.w	r3, r3, #1088	; 0x440
 8006d64:	681b      	ldr	r3, [r3, #0]
 8006d66:	60bb      	str	r3, [r7, #8]
  return ((hprt0 & USB_OTG_HPRT_PSPD) >> 17);
 8006d68:	68bb      	ldr	r3, [r7, #8]
 8006d6a:	0c5b      	lsrs	r3, r3, #17
 8006d6c:	f003 0303 	and.w	r3, r3, #3
}
 8006d70:	4618      	mov	r0, r3
 8006d72:	3714      	adds	r7, #20
 8006d74:	46bd      	mov	sp, r7
 8006d76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d7a:	4770      	bx	lr

08006d7c <USB_GetCurrentFrame>:
  * @brief  Return Host Current Frame number
  * @param  USBx  Selected device
  * @retval current frame number
  */
uint32_t USB_GetCurrentFrame(USB_OTG_GlobalTypeDef *USBx)
{
 8006d7c:	b480      	push	{r7}
 8006d7e:	b085      	sub	sp, #20
 8006d80:	af00      	add	r7, sp, #0
 8006d82:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	60fb      	str	r3, [r7, #12]

  return (USBx_HOST->HFNUM & USB_OTG_HFNUM_FRNUM);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006d8e:	689b      	ldr	r3, [r3, #8]
 8006d90:	b29b      	uxth	r3, r3
}
 8006d92:	4618      	mov	r0, r3
 8006d94:	3714      	adds	r7, #20
 8006d96:	46bd      	mov	sp, r7
 8006d98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006d9c:	4770      	bx	lr
	...

08006da0 <USB_HC_Init>:
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Init(USB_OTG_GlobalTypeDef *USBx, uint8_t ch_num,
                              uint8_t epnum, uint8_t dev_address, uint8_t speed,
                              uint8_t ep_type, uint16_t mps)
{
 8006da0:	b580      	push	{r7, lr}
 8006da2:	b088      	sub	sp, #32
 8006da4:	af00      	add	r7, sp, #0
 8006da6:	6078      	str	r0, [r7, #4]
 8006da8:	4608      	mov	r0, r1
 8006daa:	4611      	mov	r1, r2
 8006dac:	461a      	mov	r2, r3
 8006dae:	4603      	mov	r3, r0
 8006db0:	70fb      	strb	r3, [r7, #3]
 8006db2:	460b      	mov	r3, r1
 8006db4:	70bb      	strb	r3, [r7, #2]
 8006db6:	4613      	mov	r3, r2
 8006db8:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef ret = HAL_OK;
 8006dba:	2300      	movs	r3, #0
 8006dbc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	613b      	str	r3, [r7, #16]
  uint32_t HCcharEpDir;
  uint32_t HCcharLowSpeed;
  uint32_t HostCoreSpeed;

  /* Clear old interrupt conditions for this host channel. */
  USBx_HC((uint32_t)ch_num)->HCINT = 0xFFFFFFFFU;
 8006dc2:	78fb      	ldrb	r3, [r7, #3]
 8006dc4:	015a      	lsls	r2, r3, #5
 8006dc6:	693b      	ldr	r3, [r7, #16]
 8006dc8:	4413      	add	r3, r2
 8006dca:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006dce:	461a      	mov	r2, r3
 8006dd0:	f04f 33ff 	mov.w	r3, #4294967295
 8006dd4:	6093      	str	r3, [r2, #8]

  /* Enable channel interrupts required for this transfer. */
  switch (ep_type)
 8006dd6:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006dda:	2b03      	cmp	r3, #3
 8006ddc:	d867      	bhi.n	8006eae <USB_HC_Init+0x10e>
 8006dde:	a201      	add	r2, pc, #4	; (adr r2, 8006de4 <USB_HC_Init+0x44>)
 8006de0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006de4:	08006df5 	.word	0x08006df5
 8006de8:	08006e71 	.word	0x08006e71
 8006dec:	08006df5 	.word	0x08006df5
 8006df0:	08006e33 	.word	0x08006e33
  {
    case EP_TYPE_CTRL:
    case EP_TYPE_BULK:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006df4:	78fb      	ldrb	r3, [r7, #3]
 8006df6:	015a      	lsls	r2, r3, #5
 8006df8:	693b      	ldr	r3, [r7, #16]
 8006dfa:	4413      	add	r3, r2
 8006dfc:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e00:	461a      	mov	r2, r3
 8006e02:	f240 439d 	movw	r3, #1181	; 0x49d
 8006e06:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_TXERRM |
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_NAKM;

      if ((epnum & 0x80U) == 0x80U)
 8006e08:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006e0c:	2b00      	cmp	r3, #0
 8006e0e:	da51      	bge.n	8006eb4 <USB_HC_Init+0x114>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006e10:	78fb      	ldrb	r3, [r7, #3]
 8006e12:	015a      	lsls	r2, r3, #5
 8006e14:	693b      	ldr	r3, [r7, #16]
 8006e16:	4413      	add	r3, r2
 8006e18:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e1c:	68db      	ldr	r3, [r3, #12]
 8006e1e:	78fa      	ldrb	r2, [r7, #3]
 8006e20:	0151      	lsls	r1, r2, #5
 8006e22:	693a      	ldr	r2, [r7, #16]
 8006e24:	440a      	add	r2, r1
 8006e26:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e2a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e2e:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006e30:	e040      	b.n	8006eb4 <USB_HC_Init+0x114>

    case EP_TYPE_INTR:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006e32:	78fb      	ldrb	r3, [r7, #3]
 8006e34:	015a      	lsls	r2, r3, #5
 8006e36:	693b      	ldr	r3, [r7, #16]
 8006e38:	4413      	add	r3, r2
 8006e3a:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e3e:	461a      	mov	r2, r3
 8006e40:	f240 639d 	movw	r3, #1693	; 0x69d
 8006e44:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_DTERRM |
                                            USB_OTG_HCINTMSK_NAKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006e46:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006e4a:	2b00      	cmp	r3, #0
 8006e4c:	da34      	bge.n	8006eb8 <USB_HC_Init+0x118>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_BBERRM;
 8006e4e:	78fb      	ldrb	r3, [r7, #3]
 8006e50:	015a      	lsls	r2, r3, #5
 8006e52:	693b      	ldr	r3, [r7, #16]
 8006e54:	4413      	add	r3, r2
 8006e56:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e5a:	68db      	ldr	r3, [r3, #12]
 8006e5c:	78fa      	ldrb	r2, [r7, #3]
 8006e5e:	0151      	lsls	r1, r2, #5
 8006e60:	693a      	ldr	r2, [r7, #16]
 8006e62:	440a      	add	r2, r1
 8006e64:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006e68:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006e6c:	60d3      	str	r3, [r2, #12]
      }

      break;
 8006e6e:	e023      	b.n	8006eb8 <USB_HC_Init+0x118>

    case EP_TYPE_ISOC:
      USBx_HC((uint32_t)ch_num)->HCINTMSK = USB_OTG_HCINTMSK_XFRCM  |
 8006e70:	78fb      	ldrb	r3, [r7, #3]
 8006e72:	015a      	lsls	r2, r3, #5
 8006e74:	693b      	ldr	r3, [r7, #16]
 8006e76:	4413      	add	r3, r2
 8006e78:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e7c:	461a      	mov	r2, r3
 8006e7e:	f240 2325 	movw	r3, #549	; 0x225
 8006e82:	60d3      	str	r3, [r2, #12]
                                            USB_OTG_HCINTMSK_ACKM   |
                                            USB_OTG_HCINTMSK_AHBERR |
                                            USB_OTG_HCINTMSK_FRMORM;

      if ((epnum & 0x80U) == 0x80U)
 8006e84:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	da17      	bge.n	8006ebc <USB_HC_Init+0x11c>
      {
        USBx_HC((uint32_t)ch_num)->HCINTMSK |= (USB_OTG_HCINTMSK_TXERRM | USB_OTG_HCINTMSK_BBERRM);
 8006e8c:	78fb      	ldrb	r3, [r7, #3]
 8006e8e:	015a      	lsls	r2, r3, #5
 8006e90:	693b      	ldr	r3, [r7, #16]
 8006e92:	4413      	add	r3, r2
 8006e94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006e98:	68db      	ldr	r3, [r3, #12]
 8006e9a:	78fa      	ldrb	r2, [r7, #3]
 8006e9c:	0151      	lsls	r1, r2, #5
 8006e9e:	693a      	ldr	r2, [r7, #16]
 8006ea0:	440a      	add	r2, r1
 8006ea2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ea6:	f443 73c0 	orr.w	r3, r3, #384	; 0x180
 8006eaa:	60d3      	str	r3, [r2, #12]
      }
      break;
 8006eac:	e006      	b.n	8006ebc <USB_HC_Init+0x11c>

    default:
      ret = HAL_ERROR;
 8006eae:	2301      	movs	r3, #1
 8006eb0:	77fb      	strb	r3, [r7, #31]
      break;
 8006eb2:	e004      	b.n	8006ebe <USB_HC_Init+0x11e>
      break;
 8006eb4:	bf00      	nop
 8006eb6:	e002      	b.n	8006ebe <USB_HC_Init+0x11e>
      break;
 8006eb8:	bf00      	nop
 8006eba:	e000      	b.n	8006ebe <USB_HC_Init+0x11e>
      break;
 8006ebc:	bf00      	nop
  }

  /* Enable host channel Halt interrupt */
  USBx_HC((uint32_t)ch_num)->HCINTMSK |= USB_OTG_HCINTMSK_CHHM;
 8006ebe:	78fb      	ldrb	r3, [r7, #3]
 8006ec0:	015a      	lsls	r2, r3, #5
 8006ec2:	693b      	ldr	r3, [r7, #16]
 8006ec4:	4413      	add	r3, r2
 8006ec6:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006eca:	68db      	ldr	r3, [r3, #12]
 8006ecc:	78fa      	ldrb	r2, [r7, #3]
 8006ece:	0151      	lsls	r1, r2, #5
 8006ed0:	693a      	ldr	r2, [r7, #16]
 8006ed2:	440a      	add	r2, r1
 8006ed4:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006ed8:	f043 0302 	orr.w	r3, r3, #2
 8006edc:	60d3      	str	r3, [r2, #12]

  /* Enable the top level host channel interrupt. */
  USBx_HOST->HAINTMSK |= 1UL << (ch_num & 0xFU);
 8006ede:	693b      	ldr	r3, [r7, #16]
 8006ee0:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8006ee4:	699a      	ldr	r2, [r3, #24]
 8006ee6:	78fb      	ldrb	r3, [r7, #3]
 8006ee8:	f003 030f 	and.w	r3, r3, #15
 8006eec:	2101      	movs	r1, #1
 8006eee:	fa01 f303 	lsl.w	r3, r1, r3
 8006ef2:	6939      	ldr	r1, [r7, #16]
 8006ef4:	f501 6180 	add.w	r1, r1, #1024	; 0x400
 8006ef8:	4313      	orrs	r3, r2
 8006efa:	618b      	str	r3, [r1, #24]

  /* Make sure host channel interrupts are enabled. */
  USBx->GINTMSK |= USB_OTG_GINTMSK_HCIM;
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	699b      	ldr	r3, [r3, #24]
 8006f00:	f043 7200 	orr.w	r2, r3, #33554432	; 0x2000000
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	619a      	str	r2, [r3, #24]

  /* Program the HCCHAR register */
  if ((epnum & 0x80U) == 0x80U)
 8006f08:	f997 3002 	ldrsb.w	r3, [r7, #2]
 8006f0c:	2b00      	cmp	r3, #0
 8006f0e:	da03      	bge.n	8006f18 <USB_HC_Init+0x178>
  {
    HCcharEpDir = (0x1U << 15) & USB_OTG_HCCHAR_EPDIR;
 8006f10:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8006f14:	61bb      	str	r3, [r7, #24]
 8006f16:	e001      	b.n	8006f1c <USB_HC_Init+0x17c>
  }
  else
  {
    HCcharEpDir = 0U;
 8006f18:	2300      	movs	r3, #0
 8006f1a:	61bb      	str	r3, [r7, #24]
  }

  HostCoreSpeed = USB_GetHostSpeed(USBx);
 8006f1c:	6878      	ldr	r0, [r7, #4]
 8006f1e:	f7ff ff16 	bl	8006d4e <USB_GetHostSpeed>
 8006f22:	60f8      	str	r0, [r7, #12]

  /* LS device plugged to HUB */
  if ((speed == HPRT0_PRTSPD_LOW_SPEED) && (HostCoreSpeed != HPRT0_PRTSPD_LOW_SPEED))
 8006f24:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8006f28:	2b02      	cmp	r3, #2
 8006f2a:	d106      	bne.n	8006f3a <USB_HC_Init+0x19a>
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	2b02      	cmp	r3, #2
 8006f30:	d003      	beq.n	8006f3a <USB_HC_Init+0x19a>
  {
    HCcharLowSpeed = (0x1U << 17) & USB_OTG_HCCHAR_LSDEV;
 8006f32:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8006f36:	617b      	str	r3, [r7, #20]
 8006f38:	e001      	b.n	8006f3e <USB_HC_Init+0x19e>
  }
  else
  {
    HCcharLowSpeed = 0U;
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	617b      	str	r3, [r7, #20]
  }

  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006f3e:	787b      	ldrb	r3, [r7, #1]
 8006f40:	059b      	lsls	r3, r3, #22
 8006f42:	f003 52fe 	and.w	r2, r3, #532676608	; 0x1fc00000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006f46:	78bb      	ldrb	r3, [r7, #2]
 8006f48:	02db      	lsls	r3, r3, #11
 8006f4a:	f403 43f0 	and.w	r3, r3, #30720	; 0x7800
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006f4e:	431a      	orrs	r2, r3
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006f50:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006f54:	049b      	lsls	r3, r3, #18
 8006f56:	f403 2340 	and.w	r3, r3, #786432	; 0xc0000
                                      ((((uint32_t)epnum & 0x7FU) << 11) & USB_OTG_HCCHAR_EPNUM) |
 8006f5a:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006f5c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8006f5e:	f3c3 030a 	ubfx	r3, r3, #0, #11
                                      (((uint32_t)ep_type << 18) & USB_OTG_HCCHAR_EPTYP) |
 8006f62:	431a      	orrs	r2, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006f64:	69bb      	ldr	r3, [r7, #24]
 8006f66:	431a      	orrs	r2, r3
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006f68:	78fb      	ldrb	r3, [r7, #3]
 8006f6a:	0159      	lsls	r1, r3, #5
 8006f6c:	693b      	ldr	r3, [r7, #16]
 8006f6e:	440b      	add	r3, r1
 8006f70:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f74:	4619      	mov	r1, r3
                                      ((uint32_t)mps & USB_OTG_HCCHAR_MPSIZ) | HCcharEpDir | HCcharLowSpeed;
 8006f76:	697b      	ldr	r3, [r7, #20]
 8006f78:	4313      	orrs	r3, r2
  USBx_HC((uint32_t)ch_num)->HCCHAR = (((uint32_t)dev_address << 22) & USB_OTG_HCCHAR_DAD) |
 8006f7a:	600b      	str	r3, [r1, #0]

  if ((ep_type == EP_TYPE_INTR) || (ep_type == EP_TYPE_ISOC))
 8006f7c:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006f80:	2b03      	cmp	r3, #3
 8006f82:	d003      	beq.n	8006f8c <USB_HC_Init+0x1ec>
 8006f84:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8006f88:	2b01      	cmp	r3, #1
 8006f8a:	d10f      	bne.n	8006fac <USB_HC_Init+0x20c>
  {
    USBx_HC((uint32_t)ch_num)->HCCHAR |= USB_OTG_HCCHAR_ODDFRM;
 8006f8c:	78fb      	ldrb	r3, [r7, #3]
 8006f8e:	015a      	lsls	r2, r3, #5
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	4413      	add	r3, r2
 8006f94:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	78fa      	ldrb	r2, [r7, #3]
 8006f9c:	0151      	lsls	r1, r2, #5
 8006f9e:	693a      	ldr	r2, [r7, #16]
 8006fa0:	440a      	add	r2, r1
 8006fa2:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8006fa6:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8006faa:	6013      	str	r3, [r2, #0]
  }

  return ret;
 8006fac:	7ffb      	ldrb	r3, [r7, #31]
}
 8006fae:	4618      	mov	r0, r3
 8006fb0:	3720      	adds	r7, #32
 8006fb2:	46bd      	mov	sp, r7
 8006fb4:	bd80      	pop	{r7, pc}
 8006fb6:	bf00      	nop

08006fb8 <USB_HC_StartXfer>:
  * @param  USBx  Selected device
  * @param  hc  pointer to host channel structure
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_StartXfer(USB_OTG_GlobalTypeDef *USBx, USB_OTG_HCTypeDef *hc)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b088      	sub	sp, #32
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
  uint32_t USBx_BASE = (uint32_t)USBx;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	61bb      	str	r3, [r7, #24]
  uint32_t ch_num = (uint32_t)hc->ch_num;
 8006fc6:	683b      	ldr	r3, [r7, #0]
 8006fc8:	785b      	ldrb	r3, [r3, #1]
 8006fca:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;
  uint8_t  is_oddframe;
  uint16_t len_words;
  uint16_t num_packets;
  uint16_t max_hc_pkt_count = 256U;
 8006fcc:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006fd0:	827b      	strh	r3, [r7, #18]

  /* Compute the expected number of packets associated to the transfer */
  if (hc->xfer_len > 0U)
 8006fd2:	683b      	ldr	r3, [r7, #0]
 8006fd4:	695b      	ldr	r3, [r3, #20]
 8006fd6:	2b00      	cmp	r3, #0
 8006fd8:	d018      	beq.n	800700c <USB_HC_StartXfer+0x54>
  {
    num_packets = (uint16_t)((hc->xfer_len + hc->max_packet - 1U) / hc->max_packet);
 8006fda:	683b      	ldr	r3, [r7, #0]
 8006fdc:	695b      	ldr	r3, [r3, #20]
 8006fde:	683a      	ldr	r2, [r7, #0]
 8006fe0:	8912      	ldrh	r2, [r2, #8]
 8006fe2:	4413      	add	r3, r2
 8006fe4:	3b01      	subs	r3, #1
 8006fe6:	683a      	ldr	r2, [r7, #0]
 8006fe8:	8912      	ldrh	r2, [r2, #8]
 8006fea:	fbb3 f3f2 	udiv	r3, r3, r2
 8006fee:	83fb      	strh	r3, [r7, #30]

    if (num_packets > max_hc_pkt_count)
 8006ff0:	8bfa      	ldrh	r2, [r7, #30]
 8006ff2:	8a7b      	ldrh	r3, [r7, #18]
 8006ff4:	429a      	cmp	r2, r3
 8006ff6:	d90b      	bls.n	8007010 <USB_HC_StartXfer+0x58>
    {
      num_packets = max_hc_pkt_count;
 8006ff8:	8a7b      	ldrh	r3, [r7, #18]
 8006ffa:	83fb      	strh	r3, [r7, #30]
      hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8006ffc:	8bfb      	ldrh	r3, [r7, #30]
 8006ffe:	683a      	ldr	r2, [r7, #0]
 8007000:	8912      	ldrh	r2, [r2, #8]
 8007002:	fb02 f203 	mul.w	r2, r2, r3
 8007006:	683b      	ldr	r3, [r7, #0]
 8007008:	611a      	str	r2, [r3, #16]
 800700a:	e001      	b.n	8007010 <USB_HC_StartXfer+0x58>
    }
  }
  else
  {
    num_packets = 1U;
 800700c:	2301      	movs	r3, #1
 800700e:	83fb      	strh	r3, [r7, #30]

  /*
   * For IN channel HCTSIZ.XferSize is expected to be an integer multiple of
   * max_packet size.
   */
  if (hc->ep_is_in != 0U)
 8007010:	683b      	ldr	r3, [r7, #0]
 8007012:	78db      	ldrb	r3, [r3, #3]
 8007014:	2b00      	cmp	r3, #0
 8007016:	d007      	beq.n	8007028 <USB_HC_StartXfer+0x70>
  {
    hc->XferSize = (uint32_t)num_packets * hc->max_packet;
 8007018:	8bfb      	ldrh	r3, [r7, #30]
 800701a:	683a      	ldr	r2, [r7, #0]
 800701c:	8912      	ldrh	r2, [r2, #8]
 800701e:	fb02 f203 	mul.w	r2, r2, r3
 8007022:	683b      	ldr	r3, [r7, #0]
 8007024:	611a      	str	r2, [r3, #16]
 8007026:	e003      	b.n	8007030 <USB_HC_StartXfer+0x78>
  }
  else
  {
    hc->XferSize = hc->xfer_len;
 8007028:	683b      	ldr	r3, [r7, #0]
 800702a:	695a      	ldr	r2, [r3, #20]
 800702c:	683b      	ldr	r3, [r7, #0]
 800702e:	611a      	str	r2, [r3, #16]
  }

  /* Initialize the HCTSIZn register */
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007030:	683b      	ldr	r3, [r7, #0]
 8007032:	691b      	ldr	r3, [r3, #16]
 8007034:	f3c3 0212 	ubfx	r2, r3, #0, #19
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007038:	8bfb      	ldrh	r3, [r7, #30]
 800703a:	04d9      	lsls	r1, r3, #19
 800703c:	4b59      	ldr	r3, [pc, #356]	; (80071a4 <USB_HC_StartXfer+0x1ec>)
 800703e:	400b      	ands	r3, r1
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 8007040:	431a      	orrs	r2, r3
                            (((uint32_t)hc->data_pid << 29) & USB_OTG_HCTSIZ_DPID);
 8007042:	683b      	ldr	r3, [r7, #0]
 8007044:	7a9b      	ldrb	r3, [r3, #10]
 8007046:	075b      	lsls	r3, r3, #29
 8007048:	f003 43c0 	and.w	r3, r3, #1610612736	; 0x60000000
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800704c:	6979      	ldr	r1, [r7, #20]
 800704e:	0148      	lsls	r0, r1, #5
 8007050:	69b9      	ldr	r1, [r7, #24]
 8007052:	4401      	add	r1, r0
 8007054:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
                            (((uint32_t)num_packets << 19) & USB_OTG_HCTSIZ_PKTCNT) |
 8007058:	4313      	orrs	r3, r2
  USBx_HC(ch_num)->HCTSIZ = (hc->XferSize & USB_OTG_HCTSIZ_XFRSIZ) |
 800705a:	610b      	str	r3, [r1, #16]

  is_oddframe = (((uint32_t)USBx_HOST->HFNUM & 0x01U) != 0U) ? 0U : 1U;
 800705c:	69bb      	ldr	r3, [r7, #24]
 800705e:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007062:	689b      	ldr	r3, [r3, #8]
 8007064:	f003 0301 	and.w	r3, r3, #1
 8007068:	2b00      	cmp	r3, #0
 800706a:	bf0c      	ite	eq
 800706c:	2301      	moveq	r3, #1
 800706e:	2300      	movne	r3, #0
 8007070:	b2db      	uxtb	r3, r3
 8007072:	747b      	strb	r3, [r7, #17]
  USBx_HC(ch_num)->HCCHAR &= ~USB_OTG_HCCHAR_ODDFRM;
 8007074:	697b      	ldr	r3, [r7, #20]
 8007076:	015a      	lsls	r2, r3, #5
 8007078:	69bb      	ldr	r3, [r7, #24]
 800707a:	4413      	add	r3, r2
 800707c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	697a      	ldr	r2, [r7, #20]
 8007084:	0151      	lsls	r1, r2, #5
 8007086:	69ba      	ldr	r2, [r7, #24]
 8007088:	440a      	add	r2, r1
 800708a:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800708e:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007092:	6013      	str	r3, [r2, #0]
  USBx_HC(ch_num)->HCCHAR |= (uint32_t)is_oddframe << 29;
 8007094:	697b      	ldr	r3, [r7, #20]
 8007096:	015a      	lsls	r2, r3, #5
 8007098:	69bb      	ldr	r3, [r7, #24]
 800709a:	4413      	add	r3, r2
 800709c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070a0:	681a      	ldr	r2, [r3, #0]
 80070a2:	7c7b      	ldrb	r3, [r7, #17]
 80070a4:	075b      	lsls	r3, r3, #29
 80070a6:	6979      	ldr	r1, [r7, #20]
 80070a8:	0148      	lsls	r0, r1, #5
 80070aa:	69b9      	ldr	r1, [r7, #24]
 80070ac:	4401      	add	r1, r0
 80070ae:	f501 61a0 	add.w	r1, r1, #1280	; 0x500
 80070b2:	4313      	orrs	r3, r2
 80070b4:	600b      	str	r3, [r1, #0]

  /* Set host channel enable */
  tmpreg = USBx_HC(ch_num)->HCCHAR;
 80070b6:	697b      	ldr	r3, [r7, #20]
 80070b8:	015a      	lsls	r2, r3, #5
 80070ba:	69bb      	ldr	r3, [r7, #24]
 80070bc:	4413      	add	r3, r2
 80070be:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	60bb      	str	r3, [r7, #8]
  tmpreg &= ~USB_OTG_HCCHAR_CHDIS;
 80070c6:	68bb      	ldr	r3, [r7, #8]
 80070c8:	f023 4380 	bic.w	r3, r3, #1073741824	; 0x40000000
 80070cc:	60bb      	str	r3, [r7, #8]

  /* make sure to set the correct ep direction */
  if (hc->ep_is_in != 0U)
 80070ce:	683b      	ldr	r3, [r7, #0]
 80070d0:	78db      	ldrb	r3, [r3, #3]
 80070d2:	2b00      	cmp	r3, #0
 80070d4:	d004      	beq.n	80070e0 <USB_HC_StartXfer+0x128>
  {
    tmpreg |= USB_OTG_HCCHAR_EPDIR;
 80070d6:	68bb      	ldr	r3, [r7, #8]
 80070d8:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80070dc:	60bb      	str	r3, [r7, #8]
 80070de:	e003      	b.n	80070e8 <USB_HC_StartXfer+0x130>
  }
  else
  {
    tmpreg &= ~USB_OTG_HCCHAR_EPDIR;
 80070e0:	68bb      	ldr	r3, [r7, #8]
 80070e2:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80070e6:	60bb      	str	r3, [r7, #8]
  }
  tmpreg |= USB_OTG_HCCHAR_CHENA;
 80070e8:	68bb      	ldr	r3, [r7, #8]
 80070ea:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80070ee:	60bb      	str	r3, [r7, #8]
  USBx_HC(ch_num)->HCCHAR = tmpreg;
 80070f0:	697b      	ldr	r3, [r7, #20]
 80070f2:	015a      	lsls	r2, r3, #5
 80070f4:	69bb      	ldr	r3, [r7, #24]
 80070f6:	4413      	add	r3, r2
 80070f8:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80070fc:	461a      	mov	r2, r3
 80070fe:	68bb      	ldr	r3, [r7, #8]
 8007100:	6013      	str	r3, [r2, #0]

  if ((hc->ep_is_in == 0U) && (hc->xfer_len > 0U))
 8007102:	683b      	ldr	r3, [r7, #0]
 8007104:	78db      	ldrb	r3, [r3, #3]
 8007106:	2b00      	cmp	r3, #0
 8007108:	d147      	bne.n	800719a <USB_HC_StartXfer+0x1e2>
 800710a:	683b      	ldr	r3, [r7, #0]
 800710c:	695b      	ldr	r3, [r3, #20]
 800710e:	2b00      	cmp	r3, #0
 8007110:	d043      	beq.n	800719a <USB_HC_StartXfer+0x1e2>
  {
    switch (hc->ep_type)
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	79db      	ldrb	r3, [r3, #7]
 8007116:	2b03      	cmp	r3, #3
 8007118:	d830      	bhi.n	800717c <USB_HC_StartXfer+0x1c4>
 800711a:	a201      	add	r2, pc, #4	; (adr r2, 8007120 <USB_HC_StartXfer+0x168>)
 800711c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007120:	08007131 	.word	0x08007131
 8007124:	08007155 	.word	0x08007155
 8007128:	08007131 	.word	0x08007131
 800712c:	08007155 	.word	0x08007155
    {
      /* Non periodic transfer */
      case EP_TYPE_CTRL:
      case EP_TYPE_BULK:

        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007130:	683b      	ldr	r3, [r7, #0]
 8007132:	695b      	ldr	r3, [r3, #20]
 8007134:	3303      	adds	r3, #3
 8007136:	089b      	lsrs	r3, r3, #2
 8007138:	81fb      	strh	r3, [r7, #14]

        /* check if there is enough space in FIFO space */
        if (len_words > (USBx->HNPTXSTS & 0xFFFFU))
 800713a:	89fa      	ldrh	r2, [r7, #14]
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007140:	b29b      	uxth	r3, r3
 8007142:	429a      	cmp	r2, r3
 8007144:	d91c      	bls.n	8007180 <USB_HC_StartXfer+0x1c8>
        {
          /* need to process data in nptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_NPTXFEM;
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	699b      	ldr	r3, [r3, #24]
 800714a:	f043 0220 	orr.w	r2, r3, #32
 800714e:	687b      	ldr	r3, [r7, #4]
 8007150:	619a      	str	r2, [r3, #24]
        }
        break;
 8007152:	e015      	b.n	8007180 <USB_HC_StartXfer+0x1c8>

      /* Periodic transfer */
      case EP_TYPE_INTR:
      case EP_TYPE_ISOC:
        len_words = (uint16_t)((hc->xfer_len + 3U) / 4U);
 8007154:	683b      	ldr	r3, [r7, #0]
 8007156:	695b      	ldr	r3, [r3, #20]
 8007158:	3303      	adds	r3, #3
 800715a:	089b      	lsrs	r3, r3, #2
 800715c:	81fb      	strh	r3, [r7, #14]
        /* check if there is enough space in FIFO space */
        if (len_words > (USBx_HOST->HPTXSTS & 0xFFFFU)) /* split the transfer */
 800715e:	89fa      	ldrh	r2, [r7, #14]
 8007160:	69bb      	ldr	r3, [r7, #24]
 8007162:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 8007166:	691b      	ldr	r3, [r3, #16]
 8007168:	b29b      	uxth	r3, r3
 800716a:	429a      	cmp	r2, r3
 800716c:	d90a      	bls.n	8007184 <USB_HC_StartXfer+0x1cc>
        {
          /* need to process data in ptxfempty interrupt */
          USBx->GINTMSK |= USB_OTG_GINTMSK_PTXFEM;
 800716e:	687b      	ldr	r3, [r7, #4]
 8007170:	699b      	ldr	r3, [r3, #24]
 8007172:	f043 6280 	orr.w	r2, r3, #67108864	; 0x4000000
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	619a      	str	r2, [r3, #24]
        }
        break;
 800717a:	e003      	b.n	8007184 <USB_HC_StartXfer+0x1cc>

      default:
        break;
 800717c:	bf00      	nop
 800717e:	e002      	b.n	8007186 <USB_HC_StartXfer+0x1ce>
        break;
 8007180:	bf00      	nop
 8007182:	e000      	b.n	8007186 <USB_HC_StartXfer+0x1ce>
        break;
 8007184:	bf00      	nop
    }

    /* Write packet into the Tx FIFO. */
    (void)USB_WritePacket(USBx, hc->xfer_buff, hc->ch_num, (uint16_t)hc->xfer_len);
 8007186:	683b      	ldr	r3, [r7, #0]
 8007188:	68d9      	ldr	r1, [r3, #12]
 800718a:	683b      	ldr	r3, [r7, #0]
 800718c:	785a      	ldrb	r2, [r3, #1]
 800718e:	683b      	ldr	r3, [r7, #0]
 8007190:	695b      	ldr	r3, [r3, #20]
 8007192:	b29b      	uxth	r3, r3
 8007194:	6878      	ldr	r0, [r7, #4]
 8007196:	f7ff fbfd 	bl	8006994 <USB_WritePacket>
  }

  return HAL_OK;
 800719a:	2300      	movs	r3, #0
}
 800719c:	4618      	mov	r0, r3
 800719e:	3720      	adds	r7, #32
 80071a0:	46bd      	mov	sp, r7
 80071a2:	bd80      	pop	{r7, pc}
 80071a4:	1ff80000 	.word	0x1ff80000

080071a8 <USB_HC_ReadInterrupt>:
  * @brief Read all host channel interrupts status
  * @param  USBx  Selected device
  * @retval HAL state
  */
uint32_t USB_HC_ReadInterrupt(USB_OTG_GlobalTypeDef *USBx)
{
 80071a8:	b480      	push	{r7}
 80071aa:	b085      	sub	sp, #20
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	60fb      	str	r3, [r7, #12]

  return ((USBx_HOST->HAINT) & 0xFFFFU);
 80071b4:	68fb      	ldr	r3, [r7, #12]
 80071b6:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80071ba:	695b      	ldr	r3, [r3, #20]
 80071bc:	b29b      	uxth	r3, r3
}
 80071be:	4618      	mov	r0, r3
 80071c0:	3714      	adds	r7, #20
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr

080071ca <USB_HC_Halt>:
  * @param  hc_num  Host Channel number
  *         This parameter can be a value from 1 to 15
  * @retval HAL state
  */
HAL_StatusTypeDef USB_HC_Halt(USB_OTG_GlobalTypeDef *USBx, uint8_t hc_num)
{
 80071ca:	b480      	push	{r7}
 80071cc:	b089      	sub	sp, #36	; 0x24
 80071ce:	af00      	add	r7, sp, #0
 80071d0:	6078      	str	r0, [r7, #4]
 80071d2:	460b      	mov	r3, r1
 80071d4:	70fb      	strb	r3, [r7, #3]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80071d6:	687b      	ldr	r3, [r7, #4]
 80071d8:	61fb      	str	r3, [r7, #28]
  uint32_t hcnum = (uint32_t)hc_num;
 80071da:	78fb      	ldrb	r3, [r7, #3]
 80071dc:	61bb      	str	r3, [r7, #24]
  __IO uint32_t count = 0U;
 80071de:	2300      	movs	r3, #0
 80071e0:	60fb      	str	r3, [r7, #12]
  uint32_t HcEpType = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_EPTYP) >> 18;
 80071e2:	69bb      	ldr	r3, [r7, #24]
 80071e4:	015a      	lsls	r2, r3, #5
 80071e6:	69fb      	ldr	r3, [r7, #28]
 80071e8:	4413      	add	r3, r2
 80071ea:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80071ee:	681b      	ldr	r3, [r3, #0]
 80071f0:	0c9b      	lsrs	r3, r3, #18
 80071f2:	f003 0303 	and.w	r3, r3, #3
 80071f6:	617b      	str	r3, [r7, #20]
  uint32_t ChannelEna = (USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) >> 31;
 80071f8:	69bb      	ldr	r3, [r7, #24]
 80071fa:	015a      	lsls	r2, r3, #5
 80071fc:	69fb      	ldr	r3, [r7, #28]
 80071fe:	4413      	add	r3, r2
 8007200:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	0fdb      	lsrs	r3, r3, #31
 8007208:	f003 0301 	and.w	r3, r3, #1
 800720c:	613b      	str	r3, [r7, #16]

  if (((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == USB_OTG_GAHBCFG_DMAEN) &&
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	689b      	ldr	r3, [r3, #8]
 8007212:	f003 0320 	and.w	r3, r3, #32
 8007216:	2b20      	cmp	r3, #32
 8007218:	d104      	bne.n	8007224 <USB_HC_Halt+0x5a>
 800721a:	693b      	ldr	r3, [r7, #16]
 800721c:	2b00      	cmp	r3, #0
 800721e:	d101      	bne.n	8007224 <USB_HC_Halt+0x5a>
      (ChannelEna == 0U))
  {
    return HAL_OK;
 8007220:	2300      	movs	r3, #0
 8007222:	e0c8      	b.n	80073b6 <USB_HC_Halt+0x1ec>
  }

  /* Check for space in the request queue to issue the halt. */
  if ((HcEpType == HCCHAR_CTRL) || (HcEpType == HCCHAR_BULK))
 8007224:	697b      	ldr	r3, [r7, #20]
 8007226:	2b00      	cmp	r3, #0
 8007228:	d002      	beq.n	8007230 <USB_HC_Halt+0x66>
 800722a:	697b      	ldr	r3, [r7, #20]
 800722c:	2b02      	cmp	r3, #2
 800722e:	d163      	bne.n	80072f8 <USB_HC_Halt+0x12e>
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 8007230:	69bb      	ldr	r3, [r7, #24]
 8007232:	015a      	lsls	r2, r3, #5
 8007234:	69fb      	ldr	r3, [r7, #28]
 8007236:	4413      	add	r3, r2
 8007238:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800723c:	681b      	ldr	r3, [r3, #0]
 800723e:	69ba      	ldr	r2, [r7, #24]
 8007240:	0151      	lsls	r1, r2, #5
 8007242:	69fa      	ldr	r2, [r7, #28]
 8007244:	440a      	add	r2, r1
 8007246:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 800724a:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800724e:	6013      	str	r3, [r2, #0]

    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	689b      	ldr	r3, [r3, #8]
 8007254:	f003 0320 	and.w	r3, r3, #32
 8007258:	2b00      	cmp	r3, #0
 800725a:	f040 80ab 	bne.w	80073b4 <USB_HC_Halt+0x1ea>
    {
      if ((USBx->HNPTXSTS & (0xFFU << 16)) == 0U)
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007262:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007266:	2b00      	cmp	r3, #0
 8007268:	d133      	bne.n	80072d2 <USB_HC_Halt+0x108>
      {
        USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 800726a:	69bb      	ldr	r3, [r7, #24]
 800726c:	015a      	lsls	r2, r3, #5
 800726e:	69fb      	ldr	r3, [r7, #28]
 8007270:	4413      	add	r3, r2
 8007272:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007276:	681b      	ldr	r3, [r3, #0]
 8007278:	69ba      	ldr	r2, [r7, #24]
 800727a:	0151      	lsls	r1, r2, #5
 800727c:	69fa      	ldr	r2, [r7, #28]
 800727e:	440a      	add	r2, r1
 8007280:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007284:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007288:	6013      	str	r3, [r2, #0]
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 800728a:	69bb      	ldr	r3, [r7, #24]
 800728c:	015a      	lsls	r2, r3, #5
 800728e:	69fb      	ldr	r3, [r7, #28]
 8007290:	4413      	add	r3, r2
 8007292:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007296:	681b      	ldr	r3, [r3, #0]
 8007298:	69ba      	ldr	r2, [r7, #24]
 800729a:	0151      	lsls	r1, r2, #5
 800729c:	69fa      	ldr	r2, [r7, #28]
 800729e:	440a      	add	r2, r1
 80072a0:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072a4:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80072a8:	6013      	str	r3, [r2, #0]
        do
        {
          count++;
 80072aa:	68fb      	ldr	r3, [r7, #12]
 80072ac:	3301      	adds	r3, #1
 80072ae:	60fb      	str	r3, [r7, #12]

          if (count > 1000U)
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80072b6:	d81d      	bhi.n	80072f4 <USB_HC_Halt+0x12a>
          {
            break;
          }
        } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 80072b8:	69bb      	ldr	r3, [r7, #24]
 80072ba:	015a      	lsls	r2, r3, #5
 80072bc:	69fb      	ldr	r3, [r7, #28]
 80072be:	4413      	add	r3, r2
 80072c0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072c4:	681b      	ldr	r3, [r3, #0]
 80072c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80072ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80072ce:	d0ec      	beq.n	80072aa <USB_HC_Halt+0xe0>
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80072d0:	e070      	b.n	80073b4 <USB_HC_Halt+0x1ea>
      }
      else
      {
        USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 80072d2:	69bb      	ldr	r3, [r7, #24]
 80072d4:	015a      	lsls	r2, r3, #5
 80072d6:	69fb      	ldr	r3, [r7, #28]
 80072d8:	4413      	add	r3, r2
 80072da:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80072de:	681b      	ldr	r3, [r3, #0]
 80072e0:	69ba      	ldr	r2, [r7, #24]
 80072e2:	0151      	lsls	r1, r2, #5
 80072e4:	69fa      	ldr	r2, [r7, #28]
 80072e6:	440a      	add	r2, r1
 80072e8:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80072ec:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80072f0:	6013      	str	r3, [r2, #0]
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80072f2:	e05f      	b.n	80073b4 <USB_HC_Halt+0x1ea>
            break;
 80072f4:	bf00      	nop
    if ((USBx->GAHBCFG & USB_OTG_GAHBCFG_DMAEN) == 0U)
 80072f6:	e05d      	b.n	80073b4 <USB_HC_Halt+0x1ea>
      }
    }
  }
  else
  {
    USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHDIS;
 80072f8:	69bb      	ldr	r3, [r7, #24]
 80072fa:	015a      	lsls	r2, r3, #5
 80072fc:	69fb      	ldr	r3, [r7, #28]
 80072fe:	4413      	add	r3, r2
 8007300:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	69ba      	ldr	r2, [r7, #24]
 8007308:	0151      	lsls	r1, r2, #5
 800730a:	69fa      	ldr	r2, [r7, #28]
 800730c:	440a      	add	r2, r1
 800730e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007312:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007316:	6013      	str	r3, [r2, #0]

    if ((USBx_HOST->HPTXSTS & (0xFFU << 16)) == 0U)
 8007318:	69fb      	ldr	r3, [r7, #28]
 800731a:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 800731e:	691b      	ldr	r3, [r3, #16]
 8007320:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8007324:	2b00      	cmp	r3, #0
 8007326:	d133      	bne.n	8007390 <USB_HC_Halt+0x1c6>
    {
      USBx_HC(hcnum)->HCCHAR &= ~USB_OTG_HCCHAR_CHENA;
 8007328:	69bb      	ldr	r3, [r7, #24]
 800732a:	015a      	lsls	r2, r3, #5
 800732c:	69fb      	ldr	r3, [r7, #28]
 800732e:	4413      	add	r3, r2
 8007330:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	69ba      	ldr	r2, [r7, #24]
 8007338:	0151      	lsls	r1, r2, #5
 800733a:	69fa      	ldr	r2, [r7, #28]
 800733c:	440a      	add	r2, r1
 800733e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007342:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007346:	6013      	str	r3, [r2, #0]
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007348:	69bb      	ldr	r3, [r7, #24]
 800734a:	015a      	lsls	r2, r3, #5
 800734c:	69fb      	ldr	r3, [r7, #28]
 800734e:	4413      	add	r3, r2
 8007350:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007354:	681b      	ldr	r3, [r3, #0]
 8007356:	69ba      	ldr	r2, [r7, #24]
 8007358:	0151      	lsls	r1, r2, #5
 800735a:	69fa      	ldr	r2, [r7, #28]
 800735c:	440a      	add	r2, r1
 800735e:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 8007362:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007366:	6013      	str	r3, [r2, #0]
      do
      {
        count++;
 8007368:	68fb      	ldr	r3, [r7, #12]
 800736a:	3301      	adds	r3, #1
 800736c:	60fb      	str	r3, [r7, #12]

        if (count > 1000U)
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007374:	d81d      	bhi.n	80073b2 <USB_HC_Halt+0x1e8>
        {
          break;
        }
      } while ((USBx_HC(hcnum)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007376:	69bb      	ldr	r3, [r7, #24]
 8007378:	015a      	lsls	r2, r3, #5
 800737a:	69fb      	ldr	r3, [r7, #28]
 800737c:	4413      	add	r3, r2
 800737e:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8007388:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 800738c:	d0ec      	beq.n	8007368 <USB_HC_Halt+0x19e>
 800738e:	e011      	b.n	80073b4 <USB_HC_Halt+0x1ea>
    }
    else
    {
      USBx_HC(hcnum)->HCCHAR |= USB_OTG_HCCHAR_CHENA;
 8007390:	69bb      	ldr	r3, [r7, #24]
 8007392:	015a      	lsls	r2, r3, #5
 8007394:	69fb      	ldr	r3, [r7, #28]
 8007396:	4413      	add	r3, r2
 8007398:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	69ba      	ldr	r2, [r7, #24]
 80073a0:	0151      	lsls	r1, r2, #5
 80073a2:	69fa      	ldr	r2, [r7, #28]
 80073a4:	440a      	add	r2, r1
 80073a6:	f502 62a0 	add.w	r2, r2, #1280	; 0x500
 80073aa:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80073ae:	6013      	str	r3, [r2, #0]
 80073b0:	e000      	b.n	80073b4 <USB_HC_Halt+0x1ea>
          break;
 80073b2:	bf00      	nop
    }
  }

  return HAL_OK;
 80073b4:	2300      	movs	r3, #0
}
 80073b6:	4618      	mov	r0, r3
 80073b8:	3724      	adds	r7, #36	; 0x24
 80073ba:	46bd      	mov	sp, r7
 80073bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073c0:	4770      	bx	lr

080073c2 <USB_StopHost>:
  * @brief  Stop Host Core
  * @param  USBx  Selected device
  * @retval HAL state
  */
HAL_StatusTypeDef USB_StopHost(USB_OTG_GlobalTypeDef *USBx)
{
 80073c2:	b580      	push	{r7, lr}
 80073c4:	b088      	sub	sp, #32
 80073c6:	af00      	add	r7, sp, #0
 80073c8:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef ret = HAL_OK;
 80073ca:	2300      	movs	r3, #0
 80073cc:	77fb      	strb	r3, [r7, #31]
  uint32_t USBx_BASE = (uint32_t)USBx;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	617b      	str	r3, [r7, #20]
  __IO uint32_t count = 0U;
 80073d2:	2300      	movs	r3, #0
 80073d4:	60fb      	str	r3, [r7, #12]
  uint32_t value;
  uint32_t i;

  (void)USB_DisableGlobalInt(USBx);
 80073d6:	6878      	ldr	r0, [r7, #4]
 80073d8:	f7ff fa1a 	bl	8006810 <USB_DisableGlobalInt>

  /* Flush USB FIFO */
  if (USB_FlushTxFifo(USBx, 0x10U) != HAL_OK) /* all Tx FIFOs */
 80073dc:	2110      	movs	r1, #16
 80073de:	6878      	ldr	r0, [r7, #4]
 80073e0:	f7ff fa74 	bl	80068cc <USB_FlushTxFifo>
 80073e4:	4603      	mov	r3, r0
 80073e6:	2b00      	cmp	r3, #0
 80073e8:	d001      	beq.n	80073ee <USB_StopHost+0x2c>
  {
    ret = HAL_ERROR;
 80073ea:	2301      	movs	r3, #1
 80073ec:	77fb      	strb	r3, [r7, #31]
  }

  if (USB_FlushRxFifo(USBx) != HAL_OK)
 80073ee:	6878      	ldr	r0, [r7, #4]
 80073f0:	f7ff faa0 	bl	8006934 <USB_FlushRxFifo>
 80073f4:	4603      	mov	r3, r0
 80073f6:	2b00      	cmp	r3, #0
 80073f8:	d001      	beq.n	80073fe <USB_StopHost+0x3c>
  {
    ret = HAL_ERROR;
 80073fa:	2301      	movs	r3, #1
 80073fc:	77fb      	strb	r3, [r7, #31]
  }

  /* Flush out any leftover queued requests. */
  for (i = 0U; i <= 15U; i++)
 80073fe:	2300      	movs	r3, #0
 8007400:	61bb      	str	r3, [r7, #24]
 8007402:	e01f      	b.n	8007444 <USB_StopHost+0x82>
  {
    value = USBx_HC(i)->HCCHAR;
 8007404:	69bb      	ldr	r3, [r7, #24]
 8007406:	015a      	lsls	r2, r3, #5
 8007408:	697b      	ldr	r3, [r7, #20]
 800740a:	4413      	add	r3, r2
 800740c:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	613b      	str	r3, [r7, #16]
    value |=  USB_OTG_HCCHAR_CHDIS;
 8007414:	693b      	ldr	r3, [r7, #16]
 8007416:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 800741a:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_CHENA;
 800741c:	693b      	ldr	r3, [r7, #16]
 800741e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8007422:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007424:	693b      	ldr	r3, [r7, #16]
 8007426:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 800742a:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 800742c:	69bb      	ldr	r3, [r7, #24]
 800742e:	015a      	lsls	r2, r3, #5
 8007430:	697b      	ldr	r3, [r7, #20]
 8007432:	4413      	add	r3, r2
 8007434:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007438:	461a      	mov	r2, r3
 800743a:	693b      	ldr	r3, [r7, #16]
 800743c:	6013      	str	r3, [r2, #0]
  for (i = 0U; i <= 15U; i++)
 800743e:	69bb      	ldr	r3, [r7, #24]
 8007440:	3301      	adds	r3, #1
 8007442:	61bb      	str	r3, [r7, #24]
 8007444:	69bb      	ldr	r3, [r7, #24]
 8007446:	2b0f      	cmp	r3, #15
 8007448:	d9dc      	bls.n	8007404 <USB_StopHost+0x42>
  }

  /* Halt all channels to put them into a known state. */
  for (i = 0U; i <= 15U; i++)
 800744a:	2300      	movs	r3, #0
 800744c:	61bb      	str	r3, [r7, #24]
 800744e:	e034      	b.n	80074ba <USB_StopHost+0xf8>
  {
    value = USBx_HC(i)->HCCHAR;
 8007450:	69bb      	ldr	r3, [r7, #24]
 8007452:	015a      	lsls	r2, r3, #5
 8007454:	697b      	ldr	r3, [r7, #20]
 8007456:	4413      	add	r3, r2
 8007458:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 800745c:	681b      	ldr	r3, [r3, #0]
 800745e:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHDIS;
 8007460:	693b      	ldr	r3, [r7, #16]
 8007462:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8007466:	613b      	str	r3, [r7, #16]
    value |= USB_OTG_HCCHAR_CHENA;
 8007468:	693b      	ldr	r3, [r7, #16]
 800746a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800746e:	613b      	str	r3, [r7, #16]
    value &= ~USB_OTG_HCCHAR_EPDIR;
 8007470:	693b      	ldr	r3, [r7, #16]
 8007472:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 8007476:	613b      	str	r3, [r7, #16]
    USBx_HC(i)->HCCHAR = value;
 8007478:	69bb      	ldr	r3, [r7, #24]
 800747a:	015a      	lsls	r2, r3, #5
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	4413      	add	r3, r2
 8007480:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 8007484:	461a      	mov	r2, r3
 8007486:	693b      	ldr	r3, [r7, #16]
 8007488:	6013      	str	r3, [r2, #0]

    do
    {
      count++;
 800748a:	68fb      	ldr	r3, [r7, #12]
 800748c:	3301      	adds	r3, #1
 800748e:	60fb      	str	r3, [r7, #12]

      if (count > 1000U)
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8007496:	d80c      	bhi.n	80074b2 <USB_StopHost+0xf0>
      {
        break;
      }
    } while ((USBx_HC(i)->HCCHAR & USB_OTG_HCCHAR_CHENA) == USB_OTG_HCCHAR_CHENA);
 8007498:	69bb      	ldr	r3, [r7, #24]
 800749a:	015a      	lsls	r2, r3, #5
 800749c:	697b      	ldr	r3, [r7, #20]
 800749e:	4413      	add	r3, r2
 80074a0:	f503 63a0 	add.w	r3, r3, #1280	; 0x500
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80074aa:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80074ae:	d0ec      	beq.n	800748a <USB_StopHost+0xc8>
 80074b0:	e000      	b.n	80074b4 <USB_StopHost+0xf2>
        break;
 80074b2:	bf00      	nop
  for (i = 0U; i <= 15U; i++)
 80074b4:	69bb      	ldr	r3, [r7, #24]
 80074b6:	3301      	adds	r3, #1
 80074b8:	61bb      	str	r3, [r7, #24]
 80074ba:	69bb      	ldr	r3, [r7, #24]
 80074bc:	2b0f      	cmp	r3, #15
 80074be:	d9c7      	bls.n	8007450 <USB_StopHost+0x8e>
  }

  /* Clear any pending Host interrupts */
  USBx_HOST->HAINT = 0xFFFFFFFFU;
 80074c0:	697b      	ldr	r3, [r7, #20]
 80074c2:	f503 6380 	add.w	r3, r3, #1024	; 0x400
 80074c6:	461a      	mov	r2, r3
 80074c8:	f04f 33ff 	mov.w	r3, #4294967295
 80074cc:	6153      	str	r3, [r2, #20]
  USBx->GINTSTS = 0xFFFFFFFFU;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	f04f 32ff 	mov.w	r2, #4294967295
 80074d4:	615a      	str	r2, [r3, #20]

  (void)USB_EnableGlobalInt(USBx);
 80074d6:	6878      	ldr	r0, [r7, #4]
 80074d8:	f7ff f989 	bl	80067ee <USB_EnableGlobalInt>

  return ret;
 80074dc:	7ffb      	ldrb	r3, [r7, #31]
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3720      	adds	r7, #32
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}

080074e6 <USBH_CDC_InterfaceInit>:
  *         The function init the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceInit(USBH_HandleTypeDef *phost)
{
 80074e6:	b590      	push	{r4, r7, lr}
 80074e8:	b089      	sub	sp, #36	; 0x24
 80074ea:	af04      	add	r7, sp, #16
 80074ec:	6078      	str	r0, [r7, #4]

  USBH_StatusTypeDef status;
  uint8_t interface;
  CDC_HandleTypeDef *CDC_Handle;

  interface = USBH_FindInterface(phost, COMMUNICATION_INTERFACE_CLASS_CODE,
 80074ee:	2301      	movs	r3, #1
 80074f0:	2202      	movs	r2, #2
 80074f2:	2102      	movs	r1, #2
 80074f4:	6878      	ldr	r0, [r7, #4]
 80074f6:	f000 fc67 	bl	8007dc8 <USBH_FindInterface>
 80074fa:	4603      	mov	r3, r0
 80074fc:	73fb      	strb	r3, [r7, #15]
                                 ABSTRACT_CONTROL_MODEL, COMMON_AT_COMMAND);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80074fe:	7bfb      	ldrb	r3, [r7, #15]
 8007500:	2bff      	cmp	r3, #255	; 0xff
 8007502:	d002      	beq.n	800750a <USBH_CDC_InterfaceInit+0x24>
 8007504:	7bfb      	ldrb	r3, [r7, #15]
 8007506:	2b01      	cmp	r3, #1
 8007508:	d901      	bls.n	800750e <USBH_CDC_InterfaceInit+0x28>
  {
    USBH_DbgLog("Cannot Find the interface for Communication Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 800750a:	2302      	movs	r3, #2
 800750c:	e13d      	b.n	800778a <USBH_CDC_InterfaceInit+0x2a4>
  }

  status = USBH_SelectInterface(phost, interface);
 800750e:	7bfb      	ldrb	r3, [r7, #15]
 8007510:	4619      	mov	r1, r3
 8007512:	6878      	ldr	r0, [r7, #4]
 8007514:	f000 fc3c 	bl	8007d90 <USBH_SelectInterface>
 8007518:	4603      	mov	r3, r0
 800751a:	73bb      	strb	r3, [r7, #14]

  if (status != USBH_OK)
 800751c:	7bbb      	ldrb	r3, [r7, #14]
 800751e:	2b00      	cmp	r3, #0
 8007520:	d001      	beq.n	8007526 <USBH_CDC_InterfaceInit+0x40>
  {
    return USBH_FAIL;
 8007522:	2302      	movs	r3, #2
 8007524:	e131      	b.n	800778a <USBH_CDC_InterfaceInit+0x2a4>
  }

  phost->pActiveClass->pData = (CDC_HandleTypeDef *)USBH_malloc(sizeof(CDC_HandleTypeDef));
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f8d3 437c 	ldr.w	r4, [r3, #892]	; 0x37c
 800752c:	2050      	movs	r0, #80	; 0x50
 800752e:	f001 fb17 	bl	8008b60 <malloc>
 8007532:	4603      	mov	r3, r0
 8007534:	61e3      	str	r3, [r4, #28]
  CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800753c:	69db      	ldr	r3, [r3, #28]
 800753e:	60bb      	str	r3, [r7, #8]

  if (CDC_Handle == NULL)
 8007540:	68bb      	ldr	r3, [r7, #8]
 8007542:	2b00      	cmp	r3, #0
 8007544:	d101      	bne.n	800754a <USBH_CDC_InterfaceInit+0x64>
  {
    USBH_DbgLog("Cannot allocate memory for CDC Handle");
    return USBH_FAIL;
 8007546:	2302      	movs	r3, #2
 8007548:	e11f      	b.n	800778a <USBH_CDC_InterfaceInit+0x2a4>
  }

  /* Initialize cdc handler */
  USBH_memset(CDC_Handle, 0, sizeof(CDC_HandleTypeDef));
 800754a:	2250      	movs	r2, #80	; 0x50
 800754c:	2100      	movs	r1, #0
 800754e:	68b8      	ldr	r0, [r7, #8]
 8007550:	f001 fb16 	bl	8008b80 <memset>

  /*Collect the notification endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8007554:	7bfb      	ldrb	r3, [r7, #15]
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	211a      	movs	r1, #26
 800755a:	fb01 f303 	mul.w	r3, r1, r3
 800755e:	4413      	add	r3, r2
 8007560:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007564:	781b      	ldrb	r3, [r3, #0]
 8007566:	b25b      	sxtb	r3, r3
 8007568:	2b00      	cmp	r3, #0
 800756a:	da15      	bge.n	8007598 <USBH_CDC_InterfaceInit+0xb2>
  {
    CDC_Handle->CommItf.NotifEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800756c:	7bfb      	ldrb	r3, [r7, #15]
 800756e:	687a      	ldr	r2, [r7, #4]
 8007570:	211a      	movs	r1, #26
 8007572:	fb01 f303 	mul.w	r3, r1, r3
 8007576:	4413      	add	r3, r2
 8007578:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800757c:	781a      	ldrb	r2, [r3, #0]
 800757e:	68bb      	ldr	r3, [r7, #8]
 8007580:	705a      	strb	r2, [r3, #1]
    CDC_Handle->CommItf.NotifEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007582:	7bfb      	ldrb	r3, [r7, #15]
 8007584:	687a      	ldr	r2, [r7, #4]
 8007586:	211a      	movs	r1, #26
 8007588:	fb01 f303 	mul.w	r3, r1, r3
 800758c:	4413      	add	r3, r2
 800758e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007592:	881a      	ldrh	r2, [r3, #0]
 8007594:	68bb      	ldr	r3, [r7, #8]
 8007596:	815a      	strh	r2, [r3, #10]
  }

  /*Allocate the length for host channel number in*/
  CDC_Handle->CommItf.NotifPipe = USBH_AllocPipe(phost, CDC_Handle->CommItf.NotifEp);
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	785b      	ldrb	r3, [r3, #1]
 800759c:	4619      	mov	r1, r3
 800759e:	6878      	ldr	r0, [r7, #4]
 80075a0:	f000 ff9d 	bl	80084de <USBH_AllocPipe>
 80075a4:	4603      	mov	r3, r0
 80075a6:	461a      	mov	r2, r3
 80075a8:	68bb      	ldr	r3, [r7, #8]
 80075aa:	701a      	strb	r2, [r3, #0]

  /* Open pipe for Notification endpoint */
  USBH_OpenPipe(phost, CDC_Handle->CommItf.NotifPipe, CDC_Handle->CommItf.NotifEp,
 80075ac:	68bb      	ldr	r3, [r7, #8]
 80075ae:	7819      	ldrb	r1, [r3, #0]
 80075b0:	68bb      	ldr	r3, [r7, #8]
 80075b2:	7858      	ldrb	r0, [r3, #1]
 80075b4:	687b      	ldr	r3, [r7, #4]
 80075b6:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 80075c0:	68ba      	ldr	r2, [r7, #8]
 80075c2:	8952      	ldrh	r2, [r2, #10]
 80075c4:	9202      	str	r2, [sp, #8]
 80075c6:	2203      	movs	r2, #3
 80075c8:	9201      	str	r2, [sp, #4]
 80075ca:	9300      	str	r3, [sp, #0]
 80075cc:	4623      	mov	r3, r4
 80075ce:	4602      	mov	r2, r0
 80075d0:	6878      	ldr	r0, [r7, #4]
 80075d2:	f000 ff55 	bl	8008480 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_INTR,
                CDC_Handle->CommItf.NotifEpSize);

  USBH_LL_SetToggle(phost, CDC_Handle->CommItf.NotifPipe, 0U);
 80075d6:	68bb      	ldr	r3, [r7, #8]
 80075d8:	781b      	ldrb	r3, [r3, #0]
 80075da:	2200      	movs	r2, #0
 80075dc:	4619      	mov	r1, r3
 80075de:	6878      	ldr	r0, [r7, #4]
 80075e0:	f001 fa1c 	bl	8008a1c <USBH_LL_SetToggle>

  interface = USBH_FindInterface(phost, DATA_INTERFACE_CLASS_CODE,
 80075e4:	2300      	movs	r3, #0
 80075e6:	2200      	movs	r2, #0
 80075e8:	210a      	movs	r1, #10
 80075ea:	6878      	ldr	r0, [r7, #4]
 80075ec:	f000 fbec 	bl	8007dc8 <USBH_FindInterface>
 80075f0:	4603      	mov	r3, r0
 80075f2:	73fb      	strb	r3, [r7, #15]
                                 RESERVED, NO_CLASS_SPECIFIC_PROTOCOL_CODE);

  if ((interface == 0xFFU) || (interface >= USBH_MAX_NUM_INTERFACES)) /* No Valid Interface */
 80075f4:	7bfb      	ldrb	r3, [r7, #15]
 80075f6:	2bff      	cmp	r3, #255	; 0xff
 80075f8:	d002      	beq.n	8007600 <USBH_CDC_InterfaceInit+0x11a>
 80075fa:	7bfb      	ldrb	r3, [r7, #15]
 80075fc:	2b01      	cmp	r3, #1
 80075fe:	d901      	bls.n	8007604 <USBH_CDC_InterfaceInit+0x11e>
  {
    USBH_DbgLog("Cannot Find the interface for Data Interface Class.", phost->pActiveClass->Name);
    return USBH_FAIL;
 8007600:	2302      	movs	r3, #2
 8007602:	e0c2      	b.n	800778a <USBH_CDC_InterfaceInit+0x2a4>
  }

  /*Collect the class specific endpoint address and length*/
  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress & 0x80U)
 8007604:	7bfb      	ldrb	r3, [r7, #15]
 8007606:	687a      	ldr	r2, [r7, #4]
 8007608:	211a      	movs	r1, #26
 800760a:	fb01 f303 	mul.w	r3, r1, r3
 800760e:	4413      	add	r3, r2
 8007610:	f203 334e 	addw	r3, r3, #846	; 0x34e
 8007614:	781b      	ldrb	r3, [r3, #0]
 8007616:	b25b      	sxtb	r3, r3
 8007618:	2b00      	cmp	r3, #0
 800761a:	da16      	bge.n	800764a <USBH_CDC_InterfaceInit+0x164>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800761c:	7bfb      	ldrb	r3, [r7, #15]
 800761e:	687a      	ldr	r2, [r7, #4]
 8007620:	211a      	movs	r1, #26
 8007622:	fb01 f303 	mul.w	r3, r1, r3
 8007626:	4413      	add	r3, r2
 8007628:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800762c:	781a      	ldrb	r2, [r3, #0]
 800762e:	68bb      	ldr	r3, [r7, #8]
 8007630:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007632:	7bfb      	ldrb	r3, [r7, #15]
 8007634:	687a      	ldr	r2, [r7, #4]
 8007636:	211a      	movs	r1, #26
 8007638:	fb01 f303 	mul.w	r3, r1, r3
 800763c:	4413      	add	r3, r2
 800763e:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007642:	881a      	ldrh	r2, [r3, #0]
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	835a      	strh	r2, [r3, #26]
 8007648:	e015      	b.n	8007676 <USBH_CDC_InterfaceInit+0x190>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].bEndpointAddress;
 800764a:	7bfb      	ldrb	r3, [r7, #15]
 800764c:	687a      	ldr	r2, [r7, #4]
 800764e:	211a      	movs	r1, #26
 8007650:	fb01 f303 	mul.w	r3, r1, r3
 8007654:	4413      	add	r3, r2
 8007656:	f203 334e 	addw	r3, r3, #846	; 0x34e
 800765a:	781a      	ldrb	r2, [r3, #0]
 800765c:	68bb      	ldr	r3, [r7, #8]
 800765e:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[0].wMaxPacketSize;
 8007660:	7bfb      	ldrb	r3, [r7, #15]
 8007662:	687a      	ldr	r2, [r7, #4]
 8007664:	211a      	movs	r1, #26
 8007666:	fb01 f303 	mul.w	r3, r1, r3
 800766a:	4413      	add	r3, r2
 800766c:	f503 7354 	add.w	r3, r3, #848	; 0x350
 8007670:	881a      	ldrh	r2, [r3, #0]
 8007672:	68bb      	ldr	r3, [r7, #8]
 8007674:	831a      	strh	r2, [r3, #24]
  }

  if (phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress & 0x80U)
 8007676:	7bfb      	ldrb	r3, [r7, #15]
 8007678:	687a      	ldr	r2, [r7, #4]
 800767a:	211a      	movs	r1, #26
 800767c:	fb01 f303 	mul.w	r3, r1, r3
 8007680:	4413      	add	r3, r2
 8007682:	f203 3356 	addw	r3, r3, #854	; 0x356
 8007686:	781b      	ldrb	r3, [r3, #0]
 8007688:	b25b      	sxtb	r3, r3
 800768a:	2b00      	cmp	r3, #0
 800768c:	da16      	bge.n	80076bc <USBH_CDC_InterfaceInit+0x1d6>
  {
    CDC_Handle->DataItf.InEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 800768e:	7bfb      	ldrb	r3, [r7, #15]
 8007690:	687a      	ldr	r2, [r7, #4]
 8007692:	211a      	movs	r1, #26
 8007694:	fb01 f303 	mul.w	r3, r1, r3
 8007698:	4413      	add	r3, r2
 800769a:	f203 3356 	addw	r3, r3, #854	; 0x356
 800769e:	781a      	ldrb	r2, [r3, #0]
 80076a0:	68bb      	ldr	r3, [r7, #8]
 80076a2:	73da      	strb	r2, [r3, #15]
    CDC_Handle->DataItf.InEpSize  = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80076a4:	7bfb      	ldrb	r3, [r7, #15]
 80076a6:	687a      	ldr	r2, [r7, #4]
 80076a8:	211a      	movs	r1, #26
 80076aa:	fb01 f303 	mul.w	r3, r1, r3
 80076ae:	4413      	add	r3, r2
 80076b0:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80076b4:	881a      	ldrh	r2, [r3, #0]
 80076b6:	68bb      	ldr	r3, [r7, #8]
 80076b8:	835a      	strh	r2, [r3, #26]
 80076ba:	e015      	b.n	80076e8 <USBH_CDC_InterfaceInit+0x202>
  }
  else
  {
    CDC_Handle->DataItf.OutEp = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].bEndpointAddress;
 80076bc:	7bfb      	ldrb	r3, [r7, #15]
 80076be:	687a      	ldr	r2, [r7, #4]
 80076c0:	211a      	movs	r1, #26
 80076c2:	fb01 f303 	mul.w	r3, r1, r3
 80076c6:	4413      	add	r3, r2
 80076c8:	f203 3356 	addw	r3, r3, #854	; 0x356
 80076cc:	781a      	ldrb	r2, [r3, #0]
 80076ce:	68bb      	ldr	r3, [r7, #8]
 80076d0:	739a      	strb	r2, [r3, #14]
    CDC_Handle->DataItf.OutEpSize = phost->device.CfgDesc.Itf_Desc[interface].Ep_Desc[1].wMaxPacketSize;
 80076d2:	7bfb      	ldrb	r3, [r7, #15]
 80076d4:	687a      	ldr	r2, [r7, #4]
 80076d6:	211a      	movs	r1, #26
 80076d8:	fb01 f303 	mul.w	r3, r1, r3
 80076dc:	4413      	add	r3, r2
 80076de:	f503 7356 	add.w	r3, r3, #856	; 0x358
 80076e2:	881a      	ldrh	r2, [r3, #0]
 80076e4:	68bb      	ldr	r3, [r7, #8]
 80076e6:	831a      	strh	r2, [r3, #24]
  }

  /*Allocate the length for host channel number out*/
  CDC_Handle->DataItf.OutPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.OutEp);
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	7b9b      	ldrb	r3, [r3, #14]
 80076ec:	4619      	mov	r1, r3
 80076ee:	6878      	ldr	r0, [r7, #4]
 80076f0:	f000 fef5 	bl	80084de <USBH_AllocPipe>
 80076f4:	4603      	mov	r3, r0
 80076f6:	461a      	mov	r2, r3
 80076f8:	68bb      	ldr	r3, [r7, #8]
 80076fa:	735a      	strb	r2, [r3, #13]

  /*Allocate the length for host channel number in*/
  CDC_Handle->DataItf.InPipe = USBH_AllocPipe(phost, CDC_Handle->DataItf.InEp);
 80076fc:	68bb      	ldr	r3, [r7, #8]
 80076fe:	7bdb      	ldrb	r3, [r3, #15]
 8007700:	4619      	mov	r1, r3
 8007702:	6878      	ldr	r0, [r7, #4]
 8007704:	f000 feeb 	bl	80084de <USBH_AllocPipe>
 8007708:	4603      	mov	r3, r0
 800770a:	461a      	mov	r2, r3
 800770c:	68bb      	ldr	r3, [r7, #8]
 800770e:	731a      	strb	r2, [r3, #12]

  /* Open channel for OUT endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.OutPipe, CDC_Handle->DataItf.OutEp,
 8007710:	68bb      	ldr	r3, [r7, #8]
 8007712:	7b59      	ldrb	r1, [r3, #13]
 8007714:	68bb      	ldr	r3, [r7, #8]
 8007716:	7b98      	ldrb	r0, [r3, #14]
 8007718:	687b      	ldr	r3, [r7, #4]
 800771a:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8007724:	68ba      	ldr	r2, [r7, #8]
 8007726:	8b12      	ldrh	r2, [r2, #24]
 8007728:	9202      	str	r2, [sp, #8]
 800772a:	2202      	movs	r2, #2
 800772c:	9201      	str	r2, [sp, #4]
 800772e:	9300      	str	r3, [sp, #0]
 8007730:	4623      	mov	r3, r4
 8007732:	4602      	mov	r2, r0
 8007734:	6878      	ldr	r0, [r7, #4]
 8007736:	f000 fea3 	bl	8008480 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.OutEpSize);

  /* Open channel for IN endpoint */
  USBH_OpenPipe(phost, CDC_Handle->DataItf.InPipe, CDC_Handle->DataItf.InEp,
 800773a:	68bb      	ldr	r3, [r7, #8]
 800773c:	7b19      	ldrb	r1, [r3, #12]
 800773e:	68bb      	ldr	r3, [r7, #8]
 8007740:	7bd8      	ldrb	r0, [r3, #15]
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f893 431c 	ldrb.w	r4, [r3, #796]	; 0x31c
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 800774e:	68ba      	ldr	r2, [r7, #8]
 8007750:	8b52      	ldrh	r2, [r2, #26]
 8007752:	9202      	str	r2, [sp, #8]
 8007754:	2202      	movs	r2, #2
 8007756:	9201      	str	r2, [sp, #4]
 8007758:	9300      	str	r3, [sp, #0]
 800775a:	4623      	mov	r3, r4
 800775c:	4602      	mov	r2, r0
 800775e:	6878      	ldr	r0, [r7, #4]
 8007760:	f000 fe8e 	bl	8008480 <USBH_OpenPipe>
                phost->device.address, phost->device.speed, USB_EP_TYPE_BULK,
                CDC_Handle->DataItf.InEpSize);

  CDC_Handle->state = CDC_IDLE_STATE;
 8007764:	68bb      	ldr	r3, [r7, #8]
 8007766:	2200      	movs	r2, #0
 8007768:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.OutPipe, 0U);
 800776c:	68bb      	ldr	r3, [r7, #8]
 800776e:	7b5b      	ldrb	r3, [r3, #13]
 8007770:	2200      	movs	r2, #0
 8007772:	4619      	mov	r1, r3
 8007774:	6878      	ldr	r0, [r7, #4]
 8007776:	f001 f951 	bl	8008a1c <USBH_LL_SetToggle>
  USBH_LL_SetToggle(phost, CDC_Handle->DataItf.InPipe, 0U);
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	7b1b      	ldrb	r3, [r3, #12]
 800777e:	2200      	movs	r2, #0
 8007780:	4619      	mov	r1, r3
 8007782:	6878      	ldr	r0, [r7, #4]
 8007784:	f001 f94a 	bl	8008a1c <USBH_LL_SetToggle>

  return USBH_OK;
 8007788:	2300      	movs	r3, #0
}
 800778a:	4618      	mov	r0, r3
 800778c:	3714      	adds	r7, #20
 800778e:	46bd      	mov	sp, r7
 8007790:	bd90      	pop	{r4, r7, pc}

08007792 <USBH_CDC_InterfaceDeInit>:
  *         The function DeInit the Pipes used for the CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_InterfaceDeInit(USBH_HandleTypeDef *phost)
{
 8007792:	b580      	push	{r7, lr}
 8007794:	b084      	sub	sp, #16
 8007796:	af00      	add	r7, sp, #0
 8007798:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800779a:	687b      	ldr	r3, [r7, #4]
 800779c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 80077a0:	69db      	ldr	r3, [r3, #28]
 80077a2:	60fb      	str	r3, [r7, #12]

  if (CDC_Handle->CommItf.NotifPipe)
 80077a4:	68fb      	ldr	r3, [r7, #12]
 80077a6:	781b      	ldrb	r3, [r3, #0]
 80077a8:	2b00      	cmp	r3, #0
 80077aa:	d00e      	beq.n	80077ca <USBH_CDC_InterfaceDeInit+0x38>
  {
    USBH_ClosePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80077ac:	68fb      	ldr	r3, [r7, #12]
 80077ae:	781b      	ldrb	r3, [r3, #0]
 80077b0:	4619      	mov	r1, r3
 80077b2:	6878      	ldr	r0, [r7, #4]
 80077b4:	f000 fe83 	bl	80084be <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->CommItf.NotifPipe);
 80077b8:	68fb      	ldr	r3, [r7, #12]
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	4619      	mov	r1, r3
 80077be:	6878      	ldr	r0, [r7, #4]
 80077c0:	f000 feae 	bl	8008520 <USBH_FreePipe>
    CDC_Handle->CommItf.NotifPipe = 0U;     /* Reset the Channel as Free */
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2200      	movs	r2, #0
 80077c8:	701a      	strb	r2, [r3, #0]
  }

  if (CDC_Handle->DataItf.InPipe)
 80077ca:	68fb      	ldr	r3, [r7, #12]
 80077cc:	7b1b      	ldrb	r3, [r3, #12]
 80077ce:	2b00      	cmp	r3, #0
 80077d0:	d00e      	beq.n	80077f0 <USBH_CDC_InterfaceDeInit+0x5e>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.InPipe);
 80077d2:	68fb      	ldr	r3, [r7, #12]
 80077d4:	7b1b      	ldrb	r3, [r3, #12]
 80077d6:	4619      	mov	r1, r3
 80077d8:	6878      	ldr	r0, [r7, #4]
 80077da:	f000 fe70 	bl	80084be <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.InPipe);
 80077de:	68fb      	ldr	r3, [r7, #12]
 80077e0:	7b1b      	ldrb	r3, [r3, #12]
 80077e2:	4619      	mov	r1, r3
 80077e4:	6878      	ldr	r0, [r7, #4]
 80077e6:	f000 fe9b 	bl	8008520 <USBH_FreePipe>
    CDC_Handle->DataItf.InPipe = 0U;     /* Reset the Channel as Free */
 80077ea:	68fb      	ldr	r3, [r7, #12]
 80077ec:	2200      	movs	r2, #0
 80077ee:	731a      	strb	r2, [r3, #12]
  }

  if (CDC_Handle->DataItf.OutPipe)
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	7b5b      	ldrb	r3, [r3, #13]
 80077f4:	2b00      	cmp	r3, #0
 80077f6:	d00e      	beq.n	8007816 <USBH_CDC_InterfaceDeInit+0x84>
  {
    USBH_ClosePipe(phost, CDC_Handle->DataItf.OutPipe);
 80077f8:	68fb      	ldr	r3, [r7, #12]
 80077fa:	7b5b      	ldrb	r3, [r3, #13]
 80077fc:	4619      	mov	r1, r3
 80077fe:	6878      	ldr	r0, [r7, #4]
 8007800:	f000 fe5d 	bl	80084be <USBH_ClosePipe>
    USBH_FreePipe(phost, CDC_Handle->DataItf.OutPipe);
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	7b5b      	ldrb	r3, [r3, #13]
 8007808:	4619      	mov	r1, r3
 800780a:	6878      	ldr	r0, [r7, #4]
 800780c:	f000 fe88 	bl	8008520 <USBH_FreePipe>
    CDC_Handle->DataItf.OutPipe = 0U;    /* Reset the Channel as Free */
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	2200      	movs	r2, #0
 8007814:	735a      	strb	r2, [r3, #13]
  }

  if (phost->pActiveClass->pData)
 8007816:	687b      	ldr	r3, [r7, #4]
 8007818:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800781c:	69db      	ldr	r3, [r3, #28]
 800781e:	2b00      	cmp	r3, #0
 8007820:	d00b      	beq.n	800783a <USBH_CDC_InterfaceDeInit+0xa8>
  {
    USBH_free(phost->pActiveClass->pData);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007828:	69db      	ldr	r3, [r3, #28]
 800782a:	4618      	mov	r0, r3
 800782c:	f001 f9a0 	bl	8008b70 <free>
    phost->pActiveClass->pData = 0U;
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007836:	2200      	movs	r2, #0
 8007838:	61da      	str	r2, [r3, #28]
  }

  return USBH_OK;
 800783a:	2300      	movs	r3, #0
}
 800783c:	4618      	mov	r0, r3
 800783e:	3710      	adds	r7, #16
 8007840:	46bd      	mov	sp, r7
 8007842:	bd80      	pop	{r7, pc}

08007844 <USBH_CDC_ClassRequest>:
  *         for CDC class.
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_ClassRequest(USBH_HandleTypeDef *phost)
{
 8007844:	b580      	push	{r7, lr}
 8007846:	b084      	sub	sp, #16
 8007848:	af00      	add	r7, sp, #0
 800784a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status;
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 800784c:	687b      	ldr	r3, [r7, #4]
 800784e:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007852:	69db      	ldr	r3, [r3, #28]
 8007854:	60fb      	str	r3, [r7, #12]

  /* Issue the get line coding request */
  status = GetLineCoding(phost, &CDC_Handle->LineCoding);
 8007856:	68fb      	ldr	r3, [r7, #12]
 8007858:	3340      	adds	r3, #64	; 0x40
 800785a:	4619      	mov	r1, r3
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 f8b2 	bl	80079c6 <GetLineCoding>
 8007862:	4603      	mov	r3, r0
 8007864:	72fb      	strb	r3, [r7, #11]
  if (status == USBH_OK)
 8007866:	7afb      	ldrb	r3, [r7, #11]
 8007868:	2b00      	cmp	r3, #0
 800786a:	d105      	bne.n	8007878 <USBH_CDC_ClassRequest+0x34>
  {
    phost->pUser(phost, HOST_USER_CLASS_ACTIVE);
 800786c:	687b      	ldr	r3, [r7, #4]
 800786e:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 8007872:	2102      	movs	r1, #2
 8007874:	6878      	ldr	r0, [r7, #4]
 8007876:	4798      	blx	r3
  else
  {
    /* .. */
  }

  return status;
 8007878:	7afb      	ldrb	r3, [r7, #11]
}
 800787a:	4618      	mov	r0, r3
 800787c:	3710      	adds	r7, #16
 800787e:	46bd      	mov	sp, r7
 8007880:	bd80      	pop	{r7, pc}
	...

08007884 <USBH_CDC_Process>:
  *         The function is for managing state machine for CDC data transfers
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_Process(USBH_HandleTypeDef *phost)
{
 8007884:	b580      	push	{r7, lr}
 8007886:	b084      	sub	sp, #16
 8007888:	af00      	add	r7, sp, #0
 800788a:	6078      	str	r0, [r7, #4]
  USBH_StatusTypeDef status = USBH_BUSY;
 800788c:	2301      	movs	r3, #1
 800788e:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef req_status = USBH_OK;
 8007890:	2300      	movs	r3, #0
 8007892:	73bb      	strb	r3, [r7, #14]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007894:	687b      	ldr	r3, [r7, #4]
 8007896:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 800789a:	69db      	ldr	r3, [r3, #28]
 800789c:	60bb      	str	r3, [r7, #8]

  switch (CDC_Handle->state)
 800789e:	68bb      	ldr	r3, [r7, #8]
 80078a0:	f893 304c 	ldrb.w	r3, [r3, #76]	; 0x4c
 80078a4:	2b04      	cmp	r3, #4
 80078a6:	d877      	bhi.n	8007998 <USBH_CDC_Process+0x114>
 80078a8:	a201      	add	r2, pc, #4	; (adr r2, 80078b0 <USBH_CDC_Process+0x2c>)
 80078aa:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80078ae:	bf00      	nop
 80078b0:	080078c5 	.word	0x080078c5
 80078b4:	080078cb 	.word	0x080078cb
 80078b8:	080078fb 	.word	0x080078fb
 80078bc:	0800796f 	.word	0x0800796f
 80078c0:	0800797d 	.word	0x0800797d
  {

    case CDC_IDLE_STATE:
      status = USBH_OK;
 80078c4:	2300      	movs	r3, #0
 80078c6:	73fb      	strb	r3, [r7, #15]
      break;
 80078c8:	e06d      	b.n	80079a6 <USBH_CDC_Process+0x122>

    case CDC_SET_LINE_CODING_STATE:
      req_status = SetLineCoding(phost, CDC_Handle->pUserLineCoding);
 80078ca:	68bb      	ldr	r3, [r7, #8]
 80078cc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80078ce:	4619      	mov	r1, r3
 80078d0:	6878      	ldr	r0, [r7, #4]
 80078d2:	f000 f897 	bl	8007a04 <SetLineCoding>
 80078d6:	4603      	mov	r3, r0
 80078d8:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 80078da:	7bbb      	ldrb	r3, [r7, #14]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	d104      	bne.n	80078ea <USBH_CDC_Process+0x66>
      {
        CDC_Handle->state = CDC_GET_LAST_LINE_CODING_STATE;
 80078e0:	68bb      	ldr	r3, [r7, #8]
 80078e2:	2202      	movs	r2, #2
 80078e4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 80078e8:	e058      	b.n	800799c <USBH_CDC_Process+0x118>
        if (req_status != USBH_BUSY)
 80078ea:	7bbb      	ldrb	r3, [r7, #14]
 80078ec:	2b01      	cmp	r3, #1
 80078ee:	d055      	beq.n	800799c <USBH_CDC_Process+0x118>
          CDC_Handle->state = CDC_ERROR_STATE;
 80078f0:	68bb      	ldr	r3, [r7, #8]
 80078f2:	2204      	movs	r2, #4
 80078f4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 80078f8:	e050      	b.n	800799c <USBH_CDC_Process+0x118>


    case CDC_GET_LAST_LINE_CODING_STATE:
      req_status = GetLineCoding(phost, &(CDC_Handle->LineCoding));
 80078fa:	68bb      	ldr	r3, [r7, #8]
 80078fc:	3340      	adds	r3, #64	; 0x40
 80078fe:	4619      	mov	r1, r3
 8007900:	6878      	ldr	r0, [r7, #4]
 8007902:	f000 f860 	bl	80079c6 <GetLineCoding>
 8007906:	4603      	mov	r3, r0
 8007908:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 800790a:	7bbb      	ldrb	r3, [r7, #14]
 800790c:	2b00      	cmp	r3, #0
 800790e:	d126      	bne.n	800795e <USBH_CDC_Process+0xda>
      {
        CDC_Handle->state = CDC_IDLE_STATE;
 8007910:	68bb      	ldr	r3, [r7, #8]
 8007912:	2200      	movs	r2, #0
 8007914:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c

        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007918:	68bb      	ldr	r3, [r7, #8]
 800791a:	f893 2044 	ldrb.w	r2, [r3, #68]	; 0x44
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007922:	791b      	ldrb	r3, [r3, #4]
 8007924:	429a      	cmp	r2, r3
 8007926:	d13b      	bne.n	80079a0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007928:	68bb      	ldr	r3, [r7, #8]
 800792a:	f893 2046 	ldrb.w	r2, [r3, #70]	; 0x46
 800792e:	68bb      	ldr	r3, [r7, #8]
 8007930:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007932:	799b      	ldrb	r3, [r3, #6]
        if ((CDC_Handle->LineCoding.b.bCharFormat == CDC_Handle->pUserLineCoding->b.bCharFormat) &&
 8007934:	429a      	cmp	r2, r3
 8007936:	d133      	bne.n	80079a0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	f893 2045 	ldrb.w	r2, [r3, #69]	; 0x45
 800793e:	68bb      	ldr	r3, [r7, #8]
 8007940:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007942:	795b      	ldrb	r3, [r3, #5]
            (CDC_Handle->LineCoding.b.bDataBits == CDC_Handle->pUserLineCoding->b.bDataBits) &&
 8007944:	429a      	cmp	r2, r3
 8007946:	d12b      	bne.n	80079a0 <USBH_CDC_Process+0x11c>
            (CDC_Handle->LineCoding.b.dwDTERate == CDC_Handle->pUserLineCoding->b.dwDTERate))
 8007948:	68bb      	ldr	r3, [r7, #8]
 800794a:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800794c:	68bb      	ldr	r3, [r7, #8]
 800794e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007950:	681b      	ldr	r3, [r3, #0]
            (CDC_Handle->LineCoding.b.bParityType == CDC_Handle->pUserLineCoding->b.bParityType) &&
 8007952:	429a      	cmp	r2, r3
 8007954:	d124      	bne.n	80079a0 <USBH_CDC_Process+0x11c>
        {
          USBH_CDC_LineCodingChanged(phost);
 8007956:	6878      	ldr	r0, [r7, #4]
 8007958:	f000 f958 	bl	8007c0c <USBH_CDC_LineCodingChanged>
        if (req_status != USBH_BUSY)
        {
          CDC_Handle->state = CDC_ERROR_STATE;
        }
      }
      break;
 800795c:	e020      	b.n	80079a0 <USBH_CDC_Process+0x11c>
        if (req_status != USBH_BUSY)
 800795e:	7bbb      	ldrb	r3, [r7, #14]
 8007960:	2b01      	cmp	r3, #1
 8007962:	d01d      	beq.n	80079a0 <USBH_CDC_Process+0x11c>
          CDC_Handle->state = CDC_ERROR_STATE;
 8007964:	68bb      	ldr	r3, [r7, #8]
 8007966:	2204      	movs	r2, #4
 8007968:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      break;
 800796c:	e018      	b.n	80079a0 <USBH_CDC_Process+0x11c>

    case CDC_TRANSFER_DATA:
      CDC_ProcessTransmission(phost);
 800796e:	6878      	ldr	r0, [r7, #4]
 8007970:	f000 f867 	bl	8007a42 <CDC_ProcessTransmission>
      CDC_ProcessReception(phost);
 8007974:	6878      	ldr	r0, [r7, #4]
 8007976:	f000 f8da 	bl	8007b2e <CDC_ProcessReception>
      break;
 800797a:	e014      	b.n	80079a6 <USBH_CDC_Process+0x122>

    case CDC_ERROR_STATE:
      req_status = USBH_ClrFeature(phost, 0x00U);
 800797c:	2100      	movs	r1, #0
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f000 fb08 	bl	8007f94 <USBH_ClrFeature>
 8007984:	4603      	mov	r3, r0
 8007986:	73bb      	strb	r3, [r7, #14]

      if (req_status == USBH_OK)
 8007988:	7bbb      	ldrb	r3, [r7, #14]
 800798a:	2b00      	cmp	r3, #0
 800798c:	d10a      	bne.n	80079a4 <USBH_CDC_Process+0x120>
      {
        /*Change the state to waiting*/
        CDC_Handle->state = CDC_IDLE_STATE;
 800798e:	68bb      	ldr	r3, [r7, #8]
 8007990:	2200      	movs	r2, #0
 8007992:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
      }
      break;
 8007996:	e005      	b.n	80079a4 <USBH_CDC_Process+0x120>

    default:
      break;
 8007998:	bf00      	nop
 800799a:	e004      	b.n	80079a6 <USBH_CDC_Process+0x122>
      break;
 800799c:	bf00      	nop
 800799e:	e002      	b.n	80079a6 <USBH_CDC_Process+0x122>
      break;
 80079a0:	bf00      	nop
 80079a2:	e000      	b.n	80079a6 <USBH_CDC_Process+0x122>
      break;
 80079a4:	bf00      	nop

  }

  return status;
 80079a6:	7bfb      	ldrb	r3, [r7, #15]
}
 80079a8:	4618      	mov	r0, r3
 80079aa:	3710      	adds	r7, #16
 80079ac:	46bd      	mov	sp, r7
 80079ae:	bd80      	pop	{r7, pc}

080079b0 <USBH_CDC_SOFProcess>:
  *         The function is for managing SOF callback
  * @param  phost: Host handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_CDC_SOFProcess(USBH_HandleTypeDef *phost)
{
 80079b0:	b480      	push	{r7}
 80079b2:	b083      	sub	sp, #12
 80079b4:	af00      	add	r7, sp, #0
 80079b6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);

  return USBH_OK;
 80079b8:	2300      	movs	r3, #0
}
 80079ba:	4618      	mov	r0, r3
 80079bc:	370c      	adds	r7, #12
 80079be:	46bd      	mov	sp, r7
 80079c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079c4:	4770      	bx	lr

080079c6 <GetLineCoding>:
  *         configured line coding.
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef GetLineCoding(USBH_HandleTypeDef *phost, CDC_LineCodingTypeDef *linecoding)
{
 80079c6:	b580      	push	{r7, lr}
 80079c8:	b082      	sub	sp, #8
 80079ca:	af00      	add	r7, sp, #0
 80079cc:	6078      	str	r0, [r7, #4]
 80079ce:	6039      	str	r1, [r7, #0]

  phost->Control.setup.b.bmRequestType = USB_D2H | USB_REQ_TYPE_CLASS | \
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	22a1      	movs	r2, #161	; 0xa1
 80079d4:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_GET_LINE_CODING;
 80079d6:	687b      	ldr	r3, [r7, #4]
 80079d8:	2221      	movs	r2, #33	; 0x21
 80079da:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2200      	movs	r2, #0
 80079e0:	825a      	strh	r2, [r3, #18]
  phost->Control.setup.b.wIndex.w = 0U;
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	2200      	movs	r2, #0
 80079e6:	829a      	strh	r2, [r3, #20]
  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 80079e8:	687b      	ldr	r3, [r7, #4]
 80079ea:	2207      	movs	r2, #7
 80079ec:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 80079ee:	683b      	ldr	r3, [r7, #0]
 80079f0:	2207      	movs	r2, #7
 80079f2:	4619      	mov	r1, r3
 80079f4:	6878      	ldr	r0, [r7, #4]
 80079f6:	f000 faf1 	bl	8007fdc <USBH_CtlReq>
 80079fa:	4603      	mov	r3, r0
}
 80079fc:	4618      	mov	r0, r3
 80079fe:	3708      	adds	r7, #8
 8007a00:	46bd      	mov	sp, r7
 8007a02:	bd80      	pop	{r7, pc}

08007a04 <SetLineCoding>:
  * @param  pdev: Selected device
  * @retval USBH_StatusTypeDef : USB ctl xfer status
  */
static USBH_StatusTypeDef SetLineCoding(USBH_HandleTypeDef *phost,
                                        CDC_LineCodingTypeDef *linecoding)
{
 8007a04:	b580      	push	{r7, lr}
 8007a06:	b082      	sub	sp, #8
 8007a08:	af00      	add	r7, sp, #0
 8007a0a:	6078      	str	r0, [r7, #4]
 8007a0c:	6039      	str	r1, [r7, #0]
  phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_TYPE_CLASS |
 8007a0e:	687b      	ldr	r3, [r7, #4]
 8007a10:	2221      	movs	r2, #33	; 0x21
 8007a12:	741a      	strb	r2, [r3, #16]
                                         USB_REQ_RECIPIENT_INTERFACE;

  phost->Control.setup.b.bRequest = CDC_SET_LINE_CODING;
 8007a14:	687b      	ldr	r3, [r7, #4]
 8007a16:	2220      	movs	r2, #32
 8007a18:	745a      	strb	r2, [r3, #17]
  phost->Control.setup.b.wValue.w = 0U;
 8007a1a:	687b      	ldr	r3, [r7, #4]
 8007a1c:	2200      	movs	r2, #0
 8007a1e:	825a      	strh	r2, [r3, #18]

  phost->Control.setup.b.wIndex.w = 0U;
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	2200      	movs	r2, #0
 8007a24:	829a      	strh	r2, [r3, #20]

  phost->Control.setup.b.wLength.w = LINE_CODING_STRUCTURE_SIZE;
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	2207      	movs	r2, #7
 8007a2a:	82da      	strh	r2, [r3, #22]

  return USBH_CtlReq(phost, linecoding->Array, LINE_CODING_STRUCTURE_SIZE);
 8007a2c:	683b      	ldr	r3, [r7, #0]
 8007a2e:	2207      	movs	r2, #7
 8007a30:	4619      	mov	r1, r3
 8007a32:	6878      	ldr	r0, [r7, #4]
 8007a34:	f000 fad2 	bl	8007fdc <USBH_CtlReq>
 8007a38:	4603      	mov	r3, r0
}
 8007a3a:	4618      	mov	r0, r3
 8007a3c:	3708      	adds	r7, #8
 8007a3e:	46bd      	mov	sp, r7
 8007a40:	bd80      	pop	{r7, pc}

08007a42 <CDC_ProcessTransmission>:
* @brief  The function is responsible for sending data to the device
*  @param  pdev: Selected device
* @retval None
*/
static void CDC_ProcessTransmission(USBH_HandleTypeDef *phost)
{
 8007a42:	b580      	push	{r7, lr}
 8007a44:	b086      	sub	sp, #24
 8007a46:	af02      	add	r7, sp, #8
 8007a48:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007a4a:	687b      	ldr	r3, [r7, #4]
 8007a4c:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007a50:	69db      	ldr	r3, [r3, #28]
 8007a52:	60fb      	str	r3, [r7, #12]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007a54:	2300      	movs	r3, #0
 8007a56:	72fb      	strb	r3, [r7, #11]

  switch (CDC_Handle->data_tx_state)
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f893 304d 	ldrb.w	r3, [r3, #77]	; 0x4d
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	d002      	beq.n	8007a68 <CDC_ProcessTransmission+0x26>
 8007a62:	2b02      	cmp	r3, #2
 8007a64:	d023      	beq.n	8007aae <CDC_ProcessTransmission+0x6c>
        }
      }
      break;

    default:
      break;
 8007a66:	e05e      	b.n	8007b26 <CDC_ProcessTransmission+0xe4>
      if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007a6c:	68fa      	ldr	r2, [r7, #12]
 8007a6e:	8b12      	ldrh	r2, [r2, #24]
 8007a70:	4293      	cmp	r3, r2
 8007a72:	d90b      	bls.n	8007a8c <CDC_ProcessTransmission+0x4a>
        USBH_BulkSendData(phost,
 8007a74:	68fb      	ldr	r3, [r7, #12]
 8007a76:	69d9      	ldr	r1, [r3, #28]
 8007a78:	68fb      	ldr	r3, [r7, #12]
 8007a7a:	8b1a      	ldrh	r2, [r3, #24]
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	7b5b      	ldrb	r3, [r3, #13]
 8007a80:	2001      	movs	r0, #1
 8007a82:	9000      	str	r0, [sp, #0]
 8007a84:	6878      	ldr	r0, [r7, #4]
 8007a86:	f000 fcb8 	bl	80083fa <USBH_BulkSendData>
 8007a8a:	e00b      	b.n	8007aa4 <CDC_ProcessTransmission+0x62>
        USBH_BulkSendData(phost,
 8007a8c:	68fb      	ldr	r3, [r7, #12]
 8007a8e:	69d9      	ldr	r1, [r3, #28]
                          (uint16_t)CDC_Handle->TxDataLength,
 8007a90:	68fb      	ldr	r3, [r7, #12]
 8007a92:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        USBH_BulkSendData(phost,
 8007a94:	b29a      	uxth	r2, r3
 8007a96:	68fb      	ldr	r3, [r7, #12]
 8007a98:	7b5b      	ldrb	r3, [r3, #13]
 8007a9a:	2001      	movs	r0, #1
 8007a9c:	9000      	str	r0, [sp, #0]
 8007a9e:	6878      	ldr	r0, [r7, #4]
 8007aa0:	f000 fcab 	bl	80083fa <USBH_BulkSendData>
      CDC_Handle->data_tx_state = CDC_SEND_DATA_WAIT;
 8007aa4:	68fb      	ldr	r3, [r7, #12]
 8007aa6:	2202      	movs	r2, #2
 8007aa8:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007aac:	e03b      	b.n	8007b26 <CDC_ProcessTransmission+0xe4>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.OutPipe);
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	7b5b      	ldrb	r3, [r3, #13]
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	6878      	ldr	r0, [r7, #4]
 8007ab6:	f000 ff87 	bl	80089c8 <USBH_LL_GetURBState>
 8007aba:	4603      	mov	r3, r0
 8007abc:	72fb      	strb	r3, [r7, #11]
      if (URB_Status == USBH_URB_DONE)
 8007abe:	7afb      	ldrb	r3, [r7, #11]
 8007ac0:	2b01      	cmp	r3, #1
 8007ac2:	d128      	bne.n	8007b16 <CDC_ProcessTransmission+0xd4>
        if (CDC_Handle->TxDataLength > CDC_Handle->DataItf.OutEpSize)
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ac8:	68fa      	ldr	r2, [r7, #12]
 8007aca:	8b12      	ldrh	r2, [r2, #24]
 8007acc:	4293      	cmp	r3, r2
 8007ace:	d90e      	bls.n	8007aee <CDC_ProcessTransmission+0xac>
          CDC_Handle->TxDataLength -= CDC_Handle->DataItf.OutEpSize;
 8007ad0:	68fb      	ldr	r3, [r7, #12]
 8007ad2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad4:	68fa      	ldr	r2, [r7, #12]
 8007ad6:	8b12      	ldrh	r2, [r2, #24]
 8007ad8:	1a9a      	subs	r2, r3, r2
 8007ada:	68fb      	ldr	r3, [r7, #12]
 8007adc:	625a      	str	r2, [r3, #36]	; 0x24
          CDC_Handle->pTxData += CDC_Handle->DataItf.OutEpSize;
 8007ade:	68fb      	ldr	r3, [r7, #12]
 8007ae0:	69db      	ldr	r3, [r3, #28]
 8007ae2:	68fa      	ldr	r2, [r7, #12]
 8007ae4:	8b12      	ldrh	r2, [r2, #24]
 8007ae6:	441a      	add	r2, r3
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	61da      	str	r2, [r3, #28]
 8007aec:	e002      	b.n	8007af4 <CDC_ProcessTransmission+0xb2>
          CDC_Handle->TxDataLength = 0U;
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	2200      	movs	r2, #0
 8007af2:	625a      	str	r2, [r3, #36]	; 0x24
        if (CDC_Handle->TxDataLength > 0U)
 8007af4:	68fb      	ldr	r3, [r7, #12]
 8007af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d004      	beq.n	8007b06 <CDC_ProcessTransmission+0xc4>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	2201      	movs	r2, #1
 8007b00:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007b04:	e00e      	b.n	8007b24 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_IDLE;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	2200      	movs	r2, #0
 8007b0a:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
          USBH_CDC_TransmitCallback(phost);
 8007b0e:	6878      	ldr	r0, [r7, #4]
 8007b10:	f000 f868 	bl	8007be4 <USBH_CDC_TransmitCallback>
      break;
 8007b14:	e006      	b.n	8007b24 <CDC_ProcessTransmission+0xe2>
        if (URB_Status == USBH_URB_NOTREADY)
 8007b16:	7afb      	ldrb	r3, [r7, #11]
 8007b18:	2b02      	cmp	r3, #2
 8007b1a:	d103      	bne.n	8007b24 <CDC_ProcessTransmission+0xe2>
          CDC_Handle->data_tx_state = CDC_SEND_DATA;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	2201      	movs	r2, #1
 8007b20:	f883 204d 	strb.w	r2, [r3, #77]	; 0x4d
      break;
 8007b24:	bf00      	nop
  }
}
 8007b26:	bf00      	nop
 8007b28:	3710      	adds	r7, #16
 8007b2a:	46bd      	mov	sp, r7
 8007b2c:	bd80      	pop	{r7, pc}

08007b2e <CDC_ProcessReception>:
*  @param  pdev: Selected device
* @retval None
*/

static void CDC_ProcessReception(USBH_HandleTypeDef *phost)
{
 8007b2e:	b580      	push	{r7, lr}
 8007b30:	b086      	sub	sp, #24
 8007b32:	af00      	add	r7, sp, #0
 8007b34:	6078      	str	r0, [r7, #4]
  CDC_HandleTypeDef *CDC_Handle = (CDC_HandleTypeDef *) phost->pActiveClass->pData;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007b3c:	69db      	ldr	r3, [r3, #28]
 8007b3e:	617b      	str	r3, [r7, #20]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8007b40:	2300      	movs	r3, #0
 8007b42:	74fb      	strb	r3, [r7, #19]
  uint32_t length;

  switch (CDC_Handle->data_rx_state)
 8007b44:	697b      	ldr	r3, [r7, #20]
 8007b46:	f893 304e 	ldrb.w	r3, [r3, #78]	; 0x4e
 8007b4a:	2b03      	cmp	r3, #3
 8007b4c:	d002      	beq.n	8007b54 <CDC_ProcessReception+0x26>
 8007b4e:	2b04      	cmp	r3, #4
 8007b50:	d00e      	beq.n	8007b70 <CDC_ProcessReception+0x42>
#endif
      }
      break;

    default:
      break;
 8007b52:	e043      	b.n	8007bdc <CDC_ProcessReception+0xae>
      USBH_BulkReceiveData(phost,
 8007b54:	697b      	ldr	r3, [r7, #20]
 8007b56:	6a19      	ldr	r1, [r3, #32]
 8007b58:	697b      	ldr	r3, [r7, #20]
 8007b5a:	8b5a      	ldrh	r2, [r3, #26]
 8007b5c:	697b      	ldr	r3, [r7, #20]
 8007b5e:	7b1b      	ldrb	r3, [r3, #12]
 8007b60:	6878      	ldr	r0, [r7, #4]
 8007b62:	f000 fc6f 	bl	8008444 <USBH_BulkReceiveData>
      CDC_Handle->data_rx_state = CDC_RECEIVE_DATA_WAIT;
 8007b66:	697b      	ldr	r3, [r7, #20]
 8007b68:	2204      	movs	r2, #4
 8007b6a:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007b6e:	e035      	b.n	8007bdc <CDC_ProcessReception+0xae>
      URB_Status = USBH_LL_GetURBState(phost, CDC_Handle->DataItf.InPipe);
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	7b1b      	ldrb	r3, [r3, #12]
 8007b74:	4619      	mov	r1, r3
 8007b76:	6878      	ldr	r0, [r7, #4]
 8007b78:	f000 ff26 	bl	80089c8 <USBH_LL_GetURBState>
 8007b7c:	4603      	mov	r3, r0
 8007b7e:	74fb      	strb	r3, [r7, #19]
      if (URB_Status == USBH_URB_DONE)
 8007b80:	7cfb      	ldrb	r3, [r7, #19]
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d129      	bne.n	8007bda <CDC_ProcessReception+0xac>
        length = USBH_LL_GetLastXferSize(phost, CDC_Handle->DataItf.InPipe);
 8007b86:	697b      	ldr	r3, [r7, #20]
 8007b88:	7b1b      	ldrb	r3, [r3, #12]
 8007b8a:	4619      	mov	r1, r3
 8007b8c:	6878      	ldr	r0, [r7, #4]
 8007b8e:	f000 fe89 	bl	80088a4 <USBH_LL_GetLastXferSize>
 8007b92:	60f8      	str	r0, [r7, #12]
        if (((CDC_Handle->RxDataLength - length) > 0U) && (length > CDC_Handle->DataItf.InEpSize))
 8007b94:	697b      	ldr	r3, [r7, #20]
 8007b96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b98:	68fa      	ldr	r2, [r7, #12]
 8007b9a:	429a      	cmp	r2, r3
 8007b9c:	d016      	beq.n	8007bcc <CDC_ProcessReception+0x9e>
 8007b9e:	697b      	ldr	r3, [r7, #20]
 8007ba0:	8b5b      	ldrh	r3, [r3, #26]
 8007ba2:	461a      	mov	r2, r3
 8007ba4:	68fb      	ldr	r3, [r7, #12]
 8007ba6:	4293      	cmp	r3, r2
 8007ba8:	d910      	bls.n	8007bcc <CDC_ProcessReception+0x9e>
          CDC_Handle->RxDataLength -= length ;
 8007baa:	697b      	ldr	r3, [r7, #20]
 8007bac:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8007bae:	68fb      	ldr	r3, [r7, #12]
 8007bb0:	1ad2      	subs	r2, r2, r3
 8007bb2:	697b      	ldr	r3, [r7, #20]
 8007bb4:	629a      	str	r2, [r3, #40]	; 0x28
          CDC_Handle->pRxData += length;
 8007bb6:	697b      	ldr	r3, [r7, #20]
 8007bb8:	6a1a      	ldr	r2, [r3, #32]
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	441a      	add	r2, r3
 8007bbe:	697b      	ldr	r3, [r7, #20]
 8007bc0:	621a      	str	r2, [r3, #32]
          CDC_Handle->data_rx_state = CDC_RECEIVE_DATA;
 8007bc2:	697b      	ldr	r3, [r7, #20]
 8007bc4:	2203      	movs	r2, #3
 8007bc6:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
      break;
 8007bca:	e006      	b.n	8007bda <CDC_ProcessReception+0xac>
          CDC_Handle->data_rx_state = CDC_IDLE;
 8007bcc:	697b      	ldr	r3, [r7, #20]
 8007bce:	2200      	movs	r2, #0
 8007bd0:	f883 204e 	strb.w	r2, [r3, #78]	; 0x4e
          USBH_CDC_ReceiveCallback(phost);
 8007bd4:	6878      	ldr	r0, [r7, #4]
 8007bd6:	f000 f80f 	bl	8007bf8 <USBH_CDC_ReceiveCallback>
      break;
 8007bda:	bf00      	nop
  }
}
 8007bdc:	bf00      	nop
 8007bde:	3718      	adds	r7, #24
 8007be0:	46bd      	mov	sp, r7
 8007be2:	bd80      	pop	{r7, pc}

08007be4 <USBH_CDC_TransmitCallback>:
* @brief  The function informs user that data have been received
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_TransmitCallback(USBH_HandleTypeDef *phost)
{
 8007be4:	b480      	push	{r7}
 8007be6:	b083      	sub	sp, #12
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007bec:	bf00      	nop
 8007bee:	370c      	adds	r7, #12
 8007bf0:	46bd      	mov	sp, r7
 8007bf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007bf6:	4770      	bx	lr

08007bf8 <USBH_CDC_ReceiveCallback>:
* @brief  The function informs user that data have been sent
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_ReceiveCallback(USBH_HandleTypeDef *phost)
{
 8007bf8:	b480      	push	{r7}
 8007bfa:	b083      	sub	sp, #12
 8007bfc:	af00      	add	r7, sp, #0
 8007bfe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007c00:	bf00      	nop
 8007c02:	370c      	adds	r7, #12
 8007c04:	46bd      	mov	sp, r7
 8007c06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c0a:	4770      	bx	lr

08007c0c <USBH_CDC_LineCodingChanged>:
* @brief  The function informs user that Settings have been changed
*  @param  pdev: Selected device
* @retval None
*/
__weak void USBH_CDC_LineCodingChanged(USBH_HandleTypeDef *phost)
{
 8007c0c:	b480      	push	{r7}
 8007c0e:	b083      	sub	sp, #12
 8007c10:	af00      	add	r7, sp, #0
 8007c12:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(phost);
}
 8007c14:	bf00      	nop
 8007c16:	370c      	adds	r7, #12
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c1e:	4770      	bx	lr

08007c20 <USBH_Init>:
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Init(USBH_HandleTypeDef *phost,
                              void (*pUsrFunc)(USBH_HandleTypeDef *phost,
                              uint8_t id), uint8_t id)
{
 8007c20:	b580      	push	{r7, lr}
 8007c22:	b084      	sub	sp, #16
 8007c24:	af00      	add	r7, sp, #0
 8007c26:	60f8      	str	r0, [r7, #12]
 8007c28:	60b9      	str	r1, [r7, #8]
 8007c2a:	4613      	mov	r3, r2
 8007c2c:	71fb      	strb	r3, [r7, #7]
  /* Check whether the USB Host handle is valid */
  if (phost == NULL)
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d101      	bne.n	8007c38 <USBH_Init+0x18>
  {
    USBH_ErrLog("Invalid Host handle");
    return USBH_FAIL;
 8007c34:	2302      	movs	r3, #2
 8007c36:	e029      	b.n	8007c8c <USBH_Init+0x6c>
  }

  /* Set DRiver ID */
  phost->id = id;
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	79fa      	ldrb	r2, [r7, #7]
 8007c3c:	f883 23cc 	strb.w	r2, [r3, #972]	; 0x3cc

  /* Unlink class*/
  phost->pActiveClass = NULL;
 8007c40:	68fb      	ldr	r3, [r7, #12]
 8007c42:	2200      	movs	r2, #0
 8007c44:	f8c3 237c 	str.w	r2, [r3, #892]	; 0x37c
  phost->ClassNumber = 0U;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	2200      	movs	r2, #0
 8007c4c:	f8c3 2380 	str.w	r2, [r3, #896]	; 0x380

  /* Restore default states and prepare EP0 */
  DeInitStateMachine(phost);
 8007c50:	68f8      	ldr	r0, [r7, #12]
 8007c52:	f000 f81f 	bl	8007c94 <DeInitStateMachine>

  /* Restore default Device connection states */
  phost->device.PortEnabled = 0U;
 8007c56:	68fb      	ldr	r3, [r7, #12]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
  phost->device.is_connected = 0U;
 8007c5e:	68fb      	ldr	r3, [r7, #12]
 8007c60:	2200      	movs	r2, #0
 8007c62:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	2200      	movs	r2, #0
 8007c6a:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007c6e:	68fb      	ldr	r3, [r7, #12]
 8007c70:	2200      	movs	r2, #0
 8007c72:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322

  /* Assign User process */
  if (pUsrFunc != NULL)
 8007c76:	68bb      	ldr	r3, [r7, #8]
 8007c78:	2b00      	cmp	r3, #0
 8007c7a:	d003      	beq.n	8007c84 <USBH_Init+0x64>
  {
    phost->pUser = pUsrFunc;
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	68ba      	ldr	r2, [r7, #8]
 8007c80:	f8c3 23d4 	str.w	r2, [r3, #980]	; 0x3d4

#endif /* (osCMSIS < 0x20000U) */
#endif /* (USBH_USE_OS == 1U) */

  /* Initialize low level driver */
  USBH_LL_Init(phost);
 8007c84:	68f8      	ldr	r0, [r7, #12]
 8007c86:	f000 fd9b 	bl	80087c0 <USBH_LL_Init>

  return USBH_OK;
 8007c8a:	2300      	movs	r3, #0
}
 8007c8c:	4618      	mov	r0, r3
 8007c8e:	3710      	adds	r7, #16
 8007c90:	46bd      	mov	sp, r7
 8007c92:	bd80      	pop	{r7, pc}

08007c94 <DeInitStateMachine>:
  *         De-Initialize the Host state machine.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef DeInitStateMachine(USBH_HandleTypeDef *phost)
{
 8007c94:	b480      	push	{r7}
 8007c96:	b085      	sub	sp, #20
 8007c98:	af00      	add	r7, sp, #0
 8007c9a:	6078      	str	r0, [r7, #4]
  uint32_t i = 0U;
 8007c9c:	2300      	movs	r3, #0
 8007c9e:	60fb      	str	r3, [r7, #12]

  /* Clear Pipes flags*/
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007ca0:	2300      	movs	r3, #0
 8007ca2:	60fb      	str	r3, [r7, #12]
 8007ca4:	e009      	b.n	8007cba <DeInitStateMachine+0x26>
  {
    phost->Pipes[i] = 0U;
 8007ca6:	687a      	ldr	r2, [r7, #4]
 8007ca8:	68fb      	ldr	r3, [r7, #12]
 8007caa:	33e0      	adds	r3, #224	; 0xe0
 8007cac:	009b      	lsls	r3, r3, #2
 8007cae:	4413      	add	r3, r2
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	605a      	str	r2, [r3, #4]
  for (i = 0U; i < USBH_MAX_PIPES_NBR; i++)
 8007cb4:	68fb      	ldr	r3, [r7, #12]
 8007cb6:	3301      	adds	r3, #1
 8007cb8:	60fb      	str	r3, [r7, #12]
 8007cba:	68fb      	ldr	r3, [r7, #12]
 8007cbc:	2b0e      	cmp	r3, #14
 8007cbe:	d9f2      	bls.n	8007ca6 <DeInitStateMachine+0x12>
  }

  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007cc0:	2300      	movs	r3, #0
 8007cc2:	60fb      	str	r3, [r7, #12]
 8007cc4:	e009      	b.n	8007cda <DeInitStateMachine+0x46>
  {
    phost->device.Data[i] = 0U;
 8007cc6:	687a      	ldr	r2, [r7, #4]
 8007cc8:	68fb      	ldr	r3, [r7, #12]
 8007cca:	4413      	add	r3, r2
 8007ccc:	f503 738e 	add.w	r3, r3, #284	; 0x11c
 8007cd0:	2200      	movs	r2, #0
 8007cd2:	701a      	strb	r2, [r3, #0]
  for (i = 0U; i < USBH_MAX_DATA_BUFFER; i++)
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	60fb      	str	r3, [r7, #12]
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007ce0:	d3f1      	bcc.n	8007cc6 <DeInitStateMachine+0x32>
  }

  phost->gState = HOST_IDLE;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	701a      	strb	r2, [r3, #0]
  phost->EnumState = ENUM_IDLE;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	705a      	strb	r2, [r3, #1]
  phost->RequestState = CMD_SEND;
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2201      	movs	r2, #1
 8007cf2:	709a      	strb	r2, [r3, #2]
  phost->Timer = 0U;
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	2200      	movs	r2, #0
 8007cf8:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4

  phost->Control.state = CTRL_SETUP;
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	2201      	movs	r2, #1
 8007d00:	761a      	strb	r2, [r3, #24]
  phost->Control.pipe_size = USBH_MPS_DEFAULT;
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2240      	movs	r2, #64	; 0x40
 8007d06:	719a      	strb	r2, [r3, #6]
  phost->Control.errorcount = 0U;
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	2200      	movs	r2, #0
 8007d0c:	765a      	strb	r2, [r3, #25]

  phost->device.address = USBH_ADDRESS_DEFAULT;
 8007d0e:	687b      	ldr	r3, [r7, #4]
 8007d10:	2200      	movs	r2, #0
 8007d12:	f883 231c 	strb.w	r2, [r3, #796]	; 0x31c
  phost->device.speed = USBH_SPEED_FULL;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	2201      	movs	r2, #1
 8007d1a:	f883 231d 	strb.w	r2, [r3, #797]	; 0x31d
  phost->device.RstCnt = 0U;
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	2200      	movs	r2, #0
 8007d22:	f883 231f 	strb.w	r2, [r3, #799]	; 0x31f
  phost->device.EnumCnt = 0U;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2200      	movs	r2, #0
 8007d2a:	f883 231e 	strb.w	r2, [r3, #798]	; 0x31e

  return USBH_OK;
 8007d2e:	2300      	movs	r3, #0
}
 8007d30:	4618      	mov	r0, r3
 8007d32:	3714      	adds	r7, #20
 8007d34:	46bd      	mov	sp, r7
 8007d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d3a:	4770      	bx	lr

08007d3c <USBH_RegisterClass>:
  * @param  phost : Host Handle
  * @param  pclass: Class handle
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_RegisterClass(USBH_HandleTypeDef *phost, USBH_ClassTypeDef *pclass)
{
 8007d3c:	b480      	push	{r7}
 8007d3e:	b085      	sub	sp, #20
 8007d40:	af00      	add	r7, sp, #0
 8007d42:	6078      	str	r0, [r7, #4]
 8007d44:	6039      	str	r1, [r7, #0]
  USBH_StatusTypeDef status = USBH_OK;
 8007d46:	2300      	movs	r3, #0
 8007d48:	73fb      	strb	r3, [r7, #15]

  if (pclass != NULL)
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	2b00      	cmp	r3, #0
 8007d4e:	d016      	beq.n	8007d7e <USBH_RegisterClass+0x42>
  {
    if (phost->ClassNumber < USBH_MAX_NUM_SUPPORTED_CLASS)
 8007d50:	687b      	ldr	r3, [r7, #4]
 8007d52:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007d56:	2b00      	cmp	r3, #0
 8007d58:	d10e      	bne.n	8007d78 <USBH_RegisterClass+0x3c>
    {
      /* link the class to the USB Host handle */
      phost->pClass[phost->ClassNumber++] = pclass;
 8007d5a:	687b      	ldr	r3, [r7, #4]
 8007d5c:	f8d3 3380 	ldr.w	r3, [r3, #896]	; 0x380
 8007d60:	1c59      	adds	r1, r3, #1
 8007d62:	687a      	ldr	r2, [r7, #4]
 8007d64:	f8c2 1380 	str.w	r1, [r2, #896]	; 0x380
 8007d68:	687a      	ldr	r2, [r7, #4]
 8007d6a:	33de      	adds	r3, #222	; 0xde
 8007d6c:	6839      	ldr	r1, [r7, #0]
 8007d6e:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
      status = USBH_OK;
 8007d72:	2300      	movs	r3, #0
 8007d74:	73fb      	strb	r3, [r7, #15]
 8007d76:	e004      	b.n	8007d82 <USBH_RegisterClass+0x46>
    }
    else
    {
      USBH_ErrLog("Max Class Number reached");
      status = USBH_FAIL;
 8007d78:	2302      	movs	r3, #2
 8007d7a:	73fb      	strb	r3, [r7, #15]
 8007d7c:	e001      	b.n	8007d82 <USBH_RegisterClass+0x46>
    }
  }
  else
  {
    USBH_ErrLog("Invalid Class handle");
    status = USBH_FAIL;
 8007d7e:	2302      	movs	r3, #2
 8007d80:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007d82:	7bfb      	ldrb	r3, [r7, #15]
}
 8007d84:	4618      	mov	r0, r3
 8007d86:	3714      	adds	r7, #20
 8007d88:	46bd      	mov	sp, r7
 8007d8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8e:	4770      	bx	lr

08007d90 <USBH_SelectInterface>:
  * @param  phost: Host Handle
  * @param  interface: Interface number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_SelectInterface(USBH_HandleTypeDef *phost, uint8_t interface)
{
 8007d90:	b480      	push	{r7}
 8007d92:	b085      	sub	sp, #20
 8007d94:	af00      	add	r7, sp, #0
 8007d96:	6078      	str	r0, [r7, #4]
 8007d98:	460b      	mov	r3, r1
 8007d9a:	70fb      	strb	r3, [r7, #3]
  USBH_StatusTypeDef status = USBH_OK;
 8007d9c:	2300      	movs	r3, #0
 8007d9e:	73fb      	strb	r3, [r7, #15]

  if (interface < phost->device.CfgDesc.bNumInterfaces)
 8007da0:	687b      	ldr	r3, [r7, #4]
 8007da2:	f893 333c 	ldrb.w	r3, [r3, #828]	; 0x33c
 8007da6:	78fa      	ldrb	r2, [r7, #3]
 8007da8:	429a      	cmp	r2, r3
 8007daa:	d204      	bcs.n	8007db6 <USBH_SelectInterface+0x26>
  {
    phost->device.current_interface = interface;
 8007dac:	687b      	ldr	r3, [r7, #4]
 8007dae:	78fa      	ldrb	r2, [r7, #3]
 8007db0:	f883 2324 	strb.w	r2, [r3, #804]	; 0x324
 8007db4:	e001      	b.n	8007dba <USBH_SelectInterface+0x2a>
    USBH_UsrLog("Protocol : %xh", phost->device.CfgDesc.Itf_Desc[interface].bInterfaceProtocol);
  }
  else
  {
    USBH_ErrLog("Cannot Select This Interface.");
    status = USBH_FAIL;
 8007db6:	2302      	movs	r3, #2
 8007db8:	73fb      	strb	r3, [r7, #15]
  }

  return status;
 8007dba:	7bfb      	ldrb	r3, [r7, #15]
}
 8007dbc:	4618      	mov	r0, r3
 8007dbe:	3714      	adds	r7, #20
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr

08007dc8 <USBH_FindInterface>:
  * @param  Protocol: Protocol code
  * @retval interface index in the configuration structure
  * @note : (1)interface index 0xFF means interface index not found
  */
uint8_t  USBH_FindInterface(USBH_HandleTypeDef *phost, uint8_t Class, uint8_t SubClass, uint8_t Protocol)
{
 8007dc8:	b480      	push	{r7}
 8007dca:	b087      	sub	sp, #28
 8007dcc:	af00      	add	r7, sp, #0
 8007dce:	6078      	str	r0, [r7, #4]
 8007dd0:	4608      	mov	r0, r1
 8007dd2:	4611      	mov	r1, r2
 8007dd4:	461a      	mov	r2, r3
 8007dd6:	4603      	mov	r3, r0
 8007dd8:	70fb      	strb	r3, [r7, #3]
 8007dda:	460b      	mov	r3, r1
 8007ddc:	70bb      	strb	r3, [r7, #2]
 8007dde:	4613      	mov	r3, r2
 8007de0:	707b      	strb	r3, [r7, #1]
  USBH_InterfaceDescTypeDef *pif;
  USBH_CfgDescTypeDef *pcfg;
  uint8_t if_ix = 0U;
 8007de2:	2300      	movs	r3, #0
 8007de4:	75fb      	strb	r3, [r7, #23]

  pif = (USBH_InterfaceDescTypeDef *)0;
 8007de6:	2300      	movs	r3, #0
 8007de8:	613b      	str	r3, [r7, #16]
  pcfg = &phost->device.CfgDesc;
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	f503 734e 	add.w	r3, r3, #824	; 0x338
 8007df0:	60fb      	str	r3, [r7, #12]

  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007df2:	e025      	b.n	8007e40 <USBH_FindInterface+0x78>
  {
    pif = &pcfg->Itf_Desc[if_ix];
 8007df4:	7dfb      	ldrb	r3, [r7, #23]
 8007df6:	221a      	movs	r2, #26
 8007df8:	fb02 f303 	mul.w	r3, r2, r3
 8007dfc:	3308      	adds	r3, #8
 8007dfe:	68fa      	ldr	r2, [r7, #12]
 8007e00:	4413      	add	r3, r2
 8007e02:	3302      	adds	r3, #2
 8007e04:	613b      	str	r3, [r7, #16]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007e06:	693b      	ldr	r3, [r7, #16]
 8007e08:	795b      	ldrb	r3, [r3, #5]
 8007e0a:	78fa      	ldrb	r2, [r7, #3]
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	d002      	beq.n	8007e16 <USBH_FindInterface+0x4e>
 8007e10:	78fb      	ldrb	r3, [r7, #3]
 8007e12:	2bff      	cmp	r3, #255	; 0xff
 8007e14:	d111      	bne.n	8007e3a <USBH_FindInterface+0x72>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007e16:	693b      	ldr	r3, [r7, #16]
 8007e18:	799b      	ldrb	r3, [r3, #6]
    if (((pif->bInterfaceClass == Class) || (Class == 0xFFU)) &&
 8007e1a:	78ba      	ldrb	r2, [r7, #2]
 8007e1c:	429a      	cmp	r2, r3
 8007e1e:	d002      	beq.n	8007e26 <USBH_FindInterface+0x5e>
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007e20:	78bb      	ldrb	r3, [r7, #2]
 8007e22:	2bff      	cmp	r3, #255	; 0xff
 8007e24:	d109      	bne.n	8007e3a <USBH_FindInterface+0x72>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007e26:	693b      	ldr	r3, [r7, #16]
 8007e28:	79db      	ldrb	r3, [r3, #7]
        ((pif->bInterfaceSubClass == SubClass) || (SubClass == 0xFFU)) &&
 8007e2a:	787a      	ldrb	r2, [r7, #1]
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d002      	beq.n	8007e36 <USBH_FindInterface+0x6e>
        ((pif->bInterfaceProtocol == Protocol) || (Protocol == 0xFFU)))
 8007e30:	787b      	ldrb	r3, [r7, #1]
 8007e32:	2bff      	cmp	r3, #255	; 0xff
 8007e34:	d101      	bne.n	8007e3a <USBH_FindInterface+0x72>
    {
      return  if_ix;
 8007e36:	7dfb      	ldrb	r3, [r7, #23]
 8007e38:	e006      	b.n	8007e48 <USBH_FindInterface+0x80>
    }
    if_ix++;
 8007e3a:	7dfb      	ldrb	r3, [r7, #23]
 8007e3c:	3301      	adds	r3, #1
 8007e3e:	75fb      	strb	r3, [r7, #23]
  while (if_ix < USBH_MAX_NUM_INTERFACES)
 8007e40:	7dfb      	ldrb	r3, [r7, #23]
 8007e42:	2b01      	cmp	r3, #1
 8007e44:	d9d6      	bls.n	8007df4 <USBH_FindInterface+0x2c>
  }
  return 0xFFU;
 8007e46:	23ff      	movs	r3, #255	; 0xff
}
 8007e48:	4618      	mov	r0, r3
 8007e4a:	371c      	adds	r7, #28
 8007e4c:	46bd      	mov	sp, r7
 8007e4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e52:	4770      	bx	lr

08007e54 <USBH_Start>:
  *         Start the USB Host Core.
  * @param  phost: Host Handle
  * @retval USBH Status
  */
USBH_StatusTypeDef  USBH_Start(USBH_HandleTypeDef *phost)
{
 8007e54:	b580      	push	{r7, lr}
 8007e56:	b082      	sub	sp, #8
 8007e58:	af00      	add	r7, sp, #0
 8007e5a:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBH_LL_Start(phost);
 8007e5c:	6878      	ldr	r0, [r7, #4]
 8007e5e:	f000 fceb 	bl	8008838 <USBH_LL_Start>

  /* Activate VBUS on the port */
  USBH_LL_DriverVBUS(phost, TRUE);
 8007e62:	2101      	movs	r1, #1
 8007e64:	6878      	ldr	r0, [r7, #4]
 8007e66:	f000 fdc2 	bl	80089ee <USBH_LL_DriverVBUS>

  return USBH_OK;
 8007e6a:	2300      	movs	r3, #0
}
 8007e6c:	4618      	mov	r0, r3
 8007e6e:	3708      	adds	r7, #8
 8007e70:	46bd      	mov	sp, r7
 8007e72:	bd80      	pop	{r7, pc}

08007e74 <USBH_LL_SetTimer>:
  *         Set the initial Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_SetTimer(USBH_HandleTypeDef *phost, uint32_t time)
{
 8007e74:	b480      	push	{r7}
 8007e76:	b083      	sub	sp, #12
 8007e78:	af00      	add	r7, sp, #0
 8007e7a:	6078      	str	r0, [r7, #4]
 8007e7c:	6039      	str	r1, [r7, #0]
  phost->Timer = time;
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	683a      	ldr	r2, [r7, #0]
 8007e82:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
}
 8007e86:	bf00      	nop
 8007e88:	370c      	adds	r7, #12
 8007e8a:	46bd      	mov	sp, r7
 8007e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e90:	4770      	bx	lr

08007e92 <USBH_LL_IncTimer>:
  *         Increment Host Timer tick
  * @param  phost: Host Handle
  * @retval None
  */
void  USBH_LL_IncTimer(USBH_HandleTypeDef *phost)
{
 8007e92:	b580      	push	{r7, lr}
 8007e94:	b082      	sub	sp, #8
 8007e96:	af00      	add	r7, sp, #0
 8007e98:	6078      	str	r0, [r7, #4]
  phost->Timer++;
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8007ea0:	1c5a      	adds	r2, r3, #1
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	f8c3 23c4 	str.w	r2, [r3, #964]	; 0x3c4
  USBH_HandleSof(phost);
 8007ea8:	6878      	ldr	r0, [r7, #4]
 8007eaa:	f000 f804 	bl	8007eb6 <USBH_HandleSof>
}
 8007eae:	bf00      	nop
 8007eb0:	3708      	adds	r7, #8
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	bd80      	pop	{r7, pc}

08007eb6 <USBH_HandleSof>:
  *         Call SOF process
  * @param  phost: Host Handle
  * @retval None
  */
static void  USBH_HandleSof(USBH_HandleTypeDef *phost)
{
 8007eb6:	b580      	push	{r7, lr}
 8007eb8:	b082      	sub	sp, #8
 8007eba:	af00      	add	r7, sp, #0
 8007ebc:	6078      	str	r0, [r7, #4]
  if ((phost->gState == HOST_CLASS) && (phost->pActiveClass != NULL))
 8007ebe:	687b      	ldr	r3, [r7, #4]
 8007ec0:	781b      	ldrb	r3, [r3, #0]
 8007ec2:	b2db      	uxtb	r3, r3
 8007ec4:	2b0b      	cmp	r3, #11
 8007ec6:	d10a      	bne.n	8007ede <USBH_HandleSof+0x28>
 8007ec8:	687b      	ldr	r3, [r7, #4]
 8007eca:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ece:	2b00      	cmp	r3, #0
 8007ed0:	d005      	beq.n	8007ede <USBH_HandleSof+0x28>
  {
    phost->pActiveClass->SOFProcess(phost);
 8007ed2:	687b      	ldr	r3, [r7, #4]
 8007ed4:	f8d3 337c 	ldr.w	r3, [r3, #892]	; 0x37c
 8007ed8:	699b      	ldr	r3, [r3, #24]
 8007eda:	6878      	ldr	r0, [r7, #4]
 8007edc:	4798      	blx	r3
  }
}
 8007ede:	bf00      	nop
 8007ee0:	3708      	adds	r7, #8
 8007ee2:	46bd      	mov	sp, r7
 8007ee4:	bd80      	pop	{r7, pc}

08007ee6 <USBH_LL_PortEnabled>:
  *         Port Enabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortEnabled(USBH_HandleTypeDef *phost)
{
 8007ee6:	b480      	push	{r7}
 8007ee8:	b083      	sub	sp, #12
 8007eea:	af00      	add	r7, sp, #0
 8007eec:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 1U;
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	2201      	movs	r2, #1
 8007ef2:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return;
 8007ef6:	bf00      	nop
}
 8007ef8:	370c      	adds	r7, #12
 8007efa:	46bd      	mov	sp, r7
 8007efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f00:	4770      	bx	lr

08007f02 <USBH_LL_PortDisabled>:
  *         Port Disabled
  * @param  phost: Host Handle
  * @retval None
  */
void USBH_LL_PortDisabled(USBH_HandleTypeDef *phost)
{
 8007f02:	b480      	push	{r7}
 8007f04:	b083      	sub	sp, #12
 8007f06:	af00      	add	r7, sp, #0
 8007f08:	6078      	str	r0, [r7, #4]
  phost->device.PortEnabled = 0U;
 8007f0a:	687b      	ldr	r3, [r7, #4]
 8007f0c:	2200      	movs	r2, #0
 8007f0e:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  return;
 8007f12:	bf00      	nop
}
 8007f14:	370c      	adds	r7, #12
 8007f16:	46bd      	mov	sp, r7
 8007f18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f1c:	4770      	bx	lr

08007f1e <USBH_LL_Connect>:
  *         Handle USB Host connexion event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Connect(USBH_HandleTypeDef *phost)
{
 8007f1e:	b480      	push	{r7}
 8007f20:	b083      	sub	sp, #12
 8007f22:	af00      	add	r7, sp, #0
 8007f24:	6078      	str	r0, [r7, #4]
  phost->device.is_connected = 1U;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	2201      	movs	r2, #1
 8007f2a:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.is_disconnected = 0U;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2200      	movs	r2, #0
 8007f32:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_ReEnumerated = 0U;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	2200      	movs	r2, #0
 8007f3a:	f883 2322 	strb.w	r2, [r3, #802]	; 0x322
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007f3e:	2300      	movs	r3, #0
}
 8007f40:	4618      	mov	r0, r3
 8007f42:	370c      	adds	r7, #12
 8007f44:	46bd      	mov	sp, r7
 8007f46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f4a:	4770      	bx	lr

08007f4c <USBH_LL_Disconnect>:
  *         Handle USB Host disconnection event
  * @param  phost: Host Handle
  * @retval USBH_Status
  */
USBH_StatusTypeDef  USBH_LL_Disconnect(USBH_HandleTypeDef *phost)
{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b082      	sub	sp, #8
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	6078      	str	r0, [r7, #4]
  /* update device connection states */
  phost->device.is_disconnected = 1U;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2201      	movs	r2, #1
 8007f58:	f883 2321 	strb.w	r2, [r3, #801]	; 0x321
  phost->device.is_connected = 0U;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	f883 2320 	strb.w	r2, [r3, #800]	; 0x320
  phost->device.PortEnabled = 0U;
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	2200      	movs	r2, #0
 8007f68:	f883 2323 	strb.w	r2, [r3, #803]	; 0x323

  /* Stop Host */
  USBH_LL_Stop(phost);
 8007f6c:	6878      	ldr	r0, [r7, #4]
 8007f6e:	f000 fc7e 	bl	800886e <USBH_LL_Stop>

  /* FRee Control Pipes */
  USBH_FreePipe(phost, phost->Control.pipe_in);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	791b      	ldrb	r3, [r3, #4]
 8007f76:	4619      	mov	r1, r3
 8007f78:	6878      	ldr	r0, [r7, #4]
 8007f7a:	f000 fad1 	bl	8008520 <USBH_FreePipe>
  USBH_FreePipe(phost, phost->Control.pipe_out);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	795b      	ldrb	r3, [r3, #5]
 8007f82:	4619      	mov	r1, r3
 8007f84:	6878      	ldr	r0, [r7, #4]
 8007f86:	f000 facb 	bl	8008520 <USBH_FreePipe>
#else
  (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif

  return USBH_OK;
 8007f8a:	2300      	movs	r3, #0
}
 8007f8c:	4618      	mov	r0, r3
 8007f8e:	3708      	adds	r7, #8
 8007f90:	46bd      	mov	sp, r7
 8007f92:	bd80      	pop	{r7, pc}

08007f94 <USBH_ClrFeature>:
  * @param  ep_num: endpoint number
  * @param  hc_num: Host channel number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClrFeature(USBH_HandleTypeDef *phost, uint8_t ep_num)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b082      	sub	sp, #8
 8007f98:	af00      	add	r7, sp, #0
 8007f9a:	6078      	str	r0, [r7, #4]
 8007f9c:	460b      	mov	r3, r1
 8007f9e:	70fb      	strb	r3, [r7, #3]
  if (phost->RequestState == CMD_SEND)
 8007fa0:	687b      	ldr	r3, [r7, #4]
 8007fa2:	789b      	ldrb	r3, [r3, #2]
 8007fa4:	2b01      	cmp	r3, #1
 8007fa6:	d10f      	bne.n	8007fc8 <USBH_ClrFeature+0x34>
  {
    phost->Control.setup.b.bmRequestType = USB_H2D | USB_REQ_RECIPIENT_ENDPOINT
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	2202      	movs	r2, #2
 8007fac:	741a      	strb	r2, [r3, #16]
                                           | USB_REQ_TYPE_STANDARD;

    phost->Control.setup.b.bRequest = USB_REQ_CLEAR_FEATURE;
 8007fae:	687b      	ldr	r3, [r7, #4]
 8007fb0:	2201      	movs	r2, #1
 8007fb2:	745a      	strb	r2, [r3, #17]
    phost->Control.setup.b.wValue.w = FEATURE_SELECTOR_ENDPOINT;
 8007fb4:	687b      	ldr	r3, [r7, #4]
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	825a      	strh	r2, [r3, #18]
    phost->Control.setup.b.wIndex.w = ep_num;
 8007fba:	78fb      	ldrb	r3, [r7, #3]
 8007fbc:	b29a      	uxth	r2, r3
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	829a      	strh	r2, [r3, #20]
    phost->Control.setup.b.wLength.w = 0U;
 8007fc2:	687b      	ldr	r3, [r7, #4]
 8007fc4:	2200      	movs	r2, #0
 8007fc6:	82da      	strh	r2, [r3, #22]
  }
  return USBH_CtlReq(phost, 0U, 0U);
 8007fc8:	2200      	movs	r2, #0
 8007fca:	2100      	movs	r1, #0
 8007fcc:	6878      	ldr	r0, [r7, #4]
 8007fce:	f000 f805 	bl	8007fdc <USBH_CtlReq>
 8007fd2:	4603      	mov	r3, r0
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3708      	adds	r7, #8
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}

08007fdc <USBH_CtlReq>:
  * @param  length: length of the response
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlReq(USBH_HandleTypeDef *phost, uint8_t *buff,
                               uint16_t length)
{
 8007fdc:	b580      	push	{r7, lr}
 8007fde:	b086      	sub	sp, #24
 8007fe0:	af00      	add	r7, sp, #0
 8007fe2:	60f8      	str	r0, [r7, #12]
 8007fe4:	60b9      	str	r1, [r7, #8]
 8007fe6:	4613      	mov	r3, r2
 8007fe8:	80fb      	strh	r3, [r7, #6]
  USBH_StatusTypeDef status;
  status = USBH_BUSY;
 8007fea:	2301      	movs	r3, #1
 8007fec:	75fb      	strb	r3, [r7, #23]

  switch (phost->RequestState)
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	789b      	ldrb	r3, [r3, #2]
 8007ff2:	2b01      	cmp	r3, #1
 8007ff4:	d002      	beq.n	8007ffc <USBH_CtlReq+0x20>
 8007ff6:	2b02      	cmp	r3, #2
 8007ff8:	d00f      	beq.n	800801a <USBH_CtlReq+0x3e>
#endif
#endif
      break;

    default:
      break;
 8007ffa:	e027      	b.n	800804c <USBH_CtlReq+0x70>
      phost->Control.buff = buff;
 8007ffc:	68fb      	ldr	r3, [r7, #12]
 8007ffe:	68ba      	ldr	r2, [r7, #8]
 8008000:	609a      	str	r2, [r3, #8]
      phost->Control.length = length;
 8008002:	68fb      	ldr	r3, [r7, #12]
 8008004:	88fa      	ldrh	r2, [r7, #6]
 8008006:	819a      	strh	r2, [r3, #12]
      phost->Control.state = CTRL_SETUP;
 8008008:	68fb      	ldr	r3, [r7, #12]
 800800a:	2201      	movs	r2, #1
 800800c:	761a      	strb	r2, [r3, #24]
      phost->RequestState = CMD_WAIT;
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	2202      	movs	r2, #2
 8008012:	709a      	strb	r2, [r3, #2]
      status = USBH_BUSY;
 8008014:	2301      	movs	r3, #1
 8008016:	75fb      	strb	r3, [r7, #23]
      break;
 8008018:	e018      	b.n	800804c <USBH_CtlReq+0x70>
      status = USBH_HandleControl(phost);
 800801a:	68f8      	ldr	r0, [r7, #12]
 800801c:	f000 f81c 	bl	8008058 <USBH_HandleControl>
 8008020:	4603      	mov	r3, r0
 8008022:	75fb      	strb	r3, [r7, #23]
      if ((status == USBH_OK) || (status == USBH_NOT_SUPPORTED))
 8008024:	7dfb      	ldrb	r3, [r7, #23]
 8008026:	2b00      	cmp	r3, #0
 8008028:	d002      	beq.n	8008030 <USBH_CtlReq+0x54>
 800802a:	7dfb      	ldrb	r3, [r7, #23]
 800802c:	2b03      	cmp	r3, #3
 800802e:	d106      	bne.n	800803e <USBH_CtlReq+0x62>
        phost->RequestState = CMD_SEND;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	2201      	movs	r2, #1
 8008034:	709a      	strb	r2, [r3, #2]
        phost->Control.state = CTRL_IDLE;
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	2200      	movs	r2, #0
 800803a:	761a      	strb	r2, [r3, #24]
      break;
 800803c:	e005      	b.n	800804a <USBH_CtlReq+0x6e>
      else if (status == USBH_FAIL)
 800803e:	7dfb      	ldrb	r3, [r7, #23]
 8008040:	2b02      	cmp	r3, #2
 8008042:	d102      	bne.n	800804a <USBH_CtlReq+0x6e>
        phost->RequestState = CMD_SEND;
 8008044:	68fb      	ldr	r3, [r7, #12]
 8008046:	2201      	movs	r2, #1
 8008048:	709a      	strb	r2, [r3, #2]
      break;
 800804a:	bf00      	nop
  }
  return status;
 800804c:	7dfb      	ldrb	r3, [r7, #23]
}
 800804e:	4618      	mov	r0, r3
 8008050:	3718      	adds	r7, #24
 8008052:	46bd      	mov	sp, r7
 8008054:	bd80      	pop	{r7, pc}
	...

08008058 <USBH_HandleControl>:
  *         Handles the USB control transfer state machine
  * @param  phost: Host Handle
  * @retval USBH Status
  */
static USBH_StatusTypeDef USBH_HandleControl(USBH_HandleTypeDef *phost)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	b086      	sub	sp, #24
 800805c:	af02      	add	r7, sp, #8
 800805e:	6078      	str	r0, [r7, #4]
  uint8_t direction;
  USBH_StatusTypeDef status = USBH_BUSY;
 8008060:	2301      	movs	r3, #1
 8008062:	73fb      	strb	r3, [r7, #15]
  USBH_URBStateTypeDef URB_Status = USBH_URB_IDLE;
 8008064:	2300      	movs	r3, #0
 8008066:	73bb      	strb	r3, [r7, #14]

  switch (phost->Control.state)
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	7e1b      	ldrb	r3, [r3, #24]
 800806c:	3b01      	subs	r3, #1
 800806e:	2b0a      	cmp	r3, #10
 8008070:	f200 8156 	bhi.w	8008320 <USBH_HandleControl+0x2c8>
 8008074:	a201      	add	r2, pc, #4	; (adr r2, 800807c <USBH_HandleControl+0x24>)
 8008076:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800807a:	bf00      	nop
 800807c:	080080a9 	.word	0x080080a9
 8008080:	080080c3 	.word	0x080080c3
 8008084:	0800812d 	.word	0x0800812d
 8008088:	08008153 	.word	0x08008153
 800808c:	0800818b 	.word	0x0800818b
 8008090:	080081b5 	.word	0x080081b5
 8008094:	08008207 	.word	0x08008207
 8008098:	08008229 	.word	0x08008229
 800809c:	08008265 	.word	0x08008265
 80080a0:	0800828b 	.word	0x0800828b
 80080a4:	080082c9 	.word	0x080082c9
  {
    case CTRL_SETUP:
      /* send a SETUP packet */
      USBH_CtlSendSetup(phost, (uint8_t *)(void *)phost->Control.setup.d8,
 80080a8:	687b      	ldr	r3, [r7, #4]
 80080aa:	f103 0110 	add.w	r1, r3, #16
 80080ae:	687b      	ldr	r3, [r7, #4]
 80080b0:	795b      	ldrb	r3, [r3, #5]
 80080b2:	461a      	mov	r2, r3
 80080b4:	6878      	ldr	r0, [r7, #4]
 80080b6:	f000 f943 	bl	8008340 <USBH_CtlSendSetup>
                        phost->Control.pipe_out);

      phost->Control.state = CTRL_SETUP_WAIT;
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	2202      	movs	r2, #2
 80080be:	761a      	strb	r2, [r3, #24]
      break;
 80080c0:	e139      	b.n	8008336 <USBH_HandleControl+0x2de>

    case CTRL_SETUP_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	795b      	ldrb	r3, [r3, #5]
 80080c6:	4619      	mov	r1, r3
 80080c8:	6878      	ldr	r0, [r7, #4]
 80080ca:	f000 fc7d 	bl	80089c8 <USBH_LL_GetURBState>
 80080ce:	4603      	mov	r3, r0
 80080d0:	73bb      	strb	r3, [r7, #14]
      /* case SETUP packet sent successfully */
      if (URB_Status == USBH_URB_DONE)
 80080d2:	7bbb      	ldrb	r3, [r7, #14]
 80080d4:	2b01      	cmp	r3, #1
 80080d6:	d11e      	bne.n	8008116 <USBH_HandleControl+0xbe>
      {
        direction = (phost->Control.setup.b.bmRequestType & USB_REQ_DIR_MASK);
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	7c1b      	ldrb	r3, [r3, #16]
 80080dc:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
 80080e0:	737b      	strb	r3, [r7, #13]

        /* check if there is a data stage */
        if (phost->Control.setup.b.wLength.w != 0U)
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	8adb      	ldrh	r3, [r3, #22]
 80080e6:	2b00      	cmp	r3, #0
 80080e8:	d00a      	beq.n	8008100 <USBH_HandleControl+0xa8>
        {
          if (direction == USB_D2H)
 80080ea:	7b7b      	ldrb	r3, [r7, #13]
 80080ec:	2b80      	cmp	r3, #128	; 0x80
 80080ee:	d103      	bne.n	80080f8 <USBH_HandleControl+0xa0>
          {
            /* Data Direction is IN */
            phost->Control.state = CTRL_DATA_IN;
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	2203      	movs	r2, #3
 80080f4:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80080f6:	e115      	b.n	8008324 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_DATA_OUT;
 80080f8:	687b      	ldr	r3, [r7, #4]
 80080fa:	2205      	movs	r2, #5
 80080fc:	761a      	strb	r2, [r3, #24]
      break;
 80080fe:	e111      	b.n	8008324 <USBH_HandleControl+0x2cc>
          if (direction == USB_D2H)
 8008100:	7b7b      	ldrb	r3, [r7, #13]
 8008102:	2b80      	cmp	r3, #128	; 0x80
 8008104:	d103      	bne.n	800810e <USBH_HandleControl+0xb6>
            phost->Control.state = CTRL_STATUS_OUT;
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	2209      	movs	r2, #9
 800810a:	761a      	strb	r2, [r3, #24]
      break;
 800810c:	e10a      	b.n	8008324 <USBH_HandleControl+0x2cc>
            phost->Control.state = CTRL_STATUS_IN;
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	2207      	movs	r2, #7
 8008112:	761a      	strb	r2, [r3, #24]
      break;
 8008114:	e106      	b.n	8008324 <USBH_HandleControl+0x2cc>
        if ((URB_Status == USBH_URB_ERROR) || (URB_Status == USBH_URB_NOTREADY))
 8008116:	7bbb      	ldrb	r3, [r7, #14]
 8008118:	2b04      	cmp	r3, #4
 800811a:	d003      	beq.n	8008124 <USBH_HandleControl+0xcc>
 800811c:	7bbb      	ldrb	r3, [r7, #14]
 800811e:	2b02      	cmp	r3, #2
 8008120:	f040 8100 	bne.w	8008324 <USBH_HandleControl+0x2cc>
          phost->Control.state = CTRL_ERROR;
 8008124:	687b      	ldr	r3, [r7, #4]
 8008126:	220b      	movs	r2, #11
 8008128:	761a      	strb	r2, [r3, #24]
      break;
 800812a:	e0fb      	b.n	8008324 <USBH_HandleControl+0x2cc>

    case CTRL_DATA_IN:
      /* Issue an IN token */
      phost->Control.timer = (uint16_t)phost->Timer;
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 8008132:	b29a      	uxth	r2, r3
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	81da      	strh	r2, [r3, #14]
      USBH_CtlReceiveData(phost, phost->Control.buff, phost->Control.length,
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	6899      	ldr	r1, [r3, #8]
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	899a      	ldrh	r2, [r3, #12]
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	791b      	ldrb	r3, [r3, #4]
 8008144:	6878      	ldr	r0, [r7, #4]
 8008146:	f000 f93a 	bl	80083be <USBH_CtlReceiveData>
                          phost->Control.pipe_in);

      phost->Control.state = CTRL_DATA_IN_WAIT;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2204      	movs	r2, #4
 800814e:	761a      	strb	r2, [r3, #24]
      break;
 8008150:	e0f1      	b.n	8008336 <USBH_HandleControl+0x2de>

    case CTRL_DATA_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	791b      	ldrb	r3, [r3, #4]
 8008156:	4619      	mov	r1, r3
 8008158:	6878      	ldr	r0, [r7, #4]
 800815a:	f000 fc35 	bl	80089c8 <USBH_LL_GetURBState>
 800815e:	4603      	mov	r3, r0
 8008160:	73bb      	strb	r3, [r7, #14]

      /* check is DATA packet transferred successfully */
      if (URB_Status == USBH_URB_DONE)
 8008162:	7bbb      	ldrb	r3, [r7, #14]
 8008164:	2b01      	cmp	r3, #1
 8008166:	d102      	bne.n	800816e <USBH_HandleControl+0x116>
      {
        phost->Control.state = CTRL_STATUS_OUT;
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	2209      	movs	r2, #9
 800816c:	761a      	strb	r2, [r3, #24]
#endif
#endif
      }

      /* manage error cases*/
      if (URB_Status == USBH_URB_STALL)
 800816e:	7bbb      	ldrb	r3, [r7, #14]
 8008170:	2b05      	cmp	r3, #5
 8008172:	d102      	bne.n	800817a <USBH_HandleControl+0x122>
      {
        /* In stall case, return to previous machine state*/
        status = USBH_NOT_SUPPORTED;
 8008174:	2303      	movs	r3, #3
 8008176:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008178:	e0d6      	b.n	8008328 <USBH_HandleControl+0x2d0>
        if (URB_Status == USBH_URB_ERROR)
 800817a:	7bbb      	ldrb	r3, [r7, #14]
 800817c:	2b04      	cmp	r3, #4
 800817e:	f040 80d3 	bne.w	8008328 <USBH_HandleControl+0x2d0>
          phost->Control.state = CTRL_ERROR;
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	220b      	movs	r2, #11
 8008186:	761a      	strb	r2, [r3, #24]
      break;
 8008188:	e0ce      	b.n	8008328 <USBH_HandleControl+0x2d0>

    case CTRL_DATA_OUT:

      USBH_CtlSendData(phost, phost->Control.buff, phost->Control.length,
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	6899      	ldr	r1, [r3, #8]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	899a      	ldrh	r2, [r3, #12]
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	795b      	ldrb	r3, [r3, #5]
 8008196:	2001      	movs	r0, #1
 8008198:	9000      	str	r0, [sp, #0]
 800819a:	6878      	ldr	r0, [r7, #4]
 800819c:	f000 f8ea 	bl	8008374 <USBH_CtlSendData>
                       phost->Control.pipe_out, 1U);

      phost->Control.timer = (uint16_t)phost->Timer;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 80081a6:	b29a      	uxth	r2, r3
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_DATA_OUT_WAIT;
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	2206      	movs	r2, #6
 80081b0:	761a      	strb	r2, [r3, #24]
      break;
 80081b2:	e0c0      	b.n	8008336 <USBH_HandleControl+0x2de>

    case CTRL_DATA_OUT_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 80081b4:	687b      	ldr	r3, [r7, #4]
 80081b6:	795b      	ldrb	r3, [r3, #5]
 80081b8:	4619      	mov	r1, r3
 80081ba:	6878      	ldr	r0, [r7, #4]
 80081bc:	f000 fc04 	bl	80089c8 <USBH_LL_GetURBState>
 80081c0:	4603      	mov	r3, r0
 80081c2:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 80081c4:	7bbb      	ldrb	r3, [r7, #14]
 80081c6:	2b01      	cmp	r3, #1
 80081c8:	d103      	bne.n	80081d2 <USBH_HandleControl+0x17a>
      {
        /* If the Setup Pkt is sent successful, then change the state */
        phost->Control.state = CTRL_STATUS_IN;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2207      	movs	r2, #7
 80081ce:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80081d0:	e0ac      	b.n	800832c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_STALL)
 80081d2:	7bbb      	ldrb	r3, [r7, #14]
 80081d4:	2b05      	cmp	r3, #5
 80081d6:	d105      	bne.n	80081e4 <USBH_HandleControl+0x18c>
        phost->Control.state = CTRL_STALLED;
 80081d8:	687b      	ldr	r3, [r7, #4]
 80081da:	220c      	movs	r2, #12
 80081dc:	761a      	strb	r2, [r3, #24]
        status = USBH_NOT_SUPPORTED;
 80081de:	2303      	movs	r3, #3
 80081e0:	73fb      	strb	r3, [r7, #15]
      break;
 80081e2:	e0a3      	b.n	800832c <USBH_HandleControl+0x2d4>
      else if (URB_Status == USBH_URB_NOTREADY)
 80081e4:	7bbb      	ldrb	r3, [r7, #14]
 80081e6:	2b02      	cmp	r3, #2
 80081e8:	d103      	bne.n	80081f2 <USBH_HandleControl+0x19a>
        phost->Control.state = CTRL_DATA_OUT;
 80081ea:	687b      	ldr	r3, [r7, #4]
 80081ec:	2205      	movs	r2, #5
 80081ee:	761a      	strb	r2, [r3, #24]
      break;
 80081f0:	e09c      	b.n	800832c <USBH_HandleControl+0x2d4>
        if (URB_Status == USBH_URB_ERROR)
 80081f2:	7bbb      	ldrb	r3, [r7, #14]
 80081f4:	2b04      	cmp	r3, #4
 80081f6:	f040 8099 	bne.w	800832c <USBH_HandleControl+0x2d4>
          phost->Control.state = CTRL_ERROR;
 80081fa:	687b      	ldr	r3, [r7, #4]
 80081fc:	220b      	movs	r2, #11
 80081fe:	761a      	strb	r2, [r3, #24]
          status = USBH_FAIL;
 8008200:	2302      	movs	r3, #2
 8008202:	73fb      	strb	r3, [r7, #15]
      break;
 8008204:	e092      	b.n	800832c <USBH_HandleControl+0x2d4>

    case CTRL_STATUS_IN:
      /* Send 0 bytes out packet */
      USBH_CtlReceiveData(phost, 0U, 0U, phost->Control.pipe_in);
 8008206:	687b      	ldr	r3, [r7, #4]
 8008208:	791b      	ldrb	r3, [r3, #4]
 800820a:	2200      	movs	r2, #0
 800820c:	2100      	movs	r1, #0
 800820e:	6878      	ldr	r0, [r7, #4]
 8008210:	f000 f8d5 	bl	80083be <USBH_CtlReceiveData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008214:	687b      	ldr	r3, [r7, #4]
 8008216:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800821a:	b29a      	uxth	r2, r3
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_IN_WAIT;
 8008220:	687b      	ldr	r3, [r7, #4]
 8008222:	2208      	movs	r2, #8
 8008224:	761a      	strb	r2, [r3, #24]

      break;
 8008226:	e086      	b.n	8008336 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_IN_WAIT:

      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_in);
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	791b      	ldrb	r3, [r3, #4]
 800822c:	4619      	mov	r1, r3
 800822e:	6878      	ldr	r0, [r7, #4]
 8008230:	f000 fbca 	bl	80089c8 <USBH_LL_GetURBState>
 8008234:	4603      	mov	r3, r0
 8008236:	73bb      	strb	r3, [r7, #14]

      if (URB_Status == USBH_URB_DONE)
 8008238:	7bbb      	ldrb	r3, [r7, #14]
 800823a:	2b01      	cmp	r3, #1
 800823c:	d105      	bne.n	800824a <USBH_HandleControl+0x1f2>
      {
        /* Control transfers completed, Exit the State Machine */
        phost->Control.state = CTRL_COMPLETE;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	220d      	movs	r2, #13
 8008242:	761a      	strb	r2, [r3, #24]
        status = USBH_OK;
 8008244:	2300      	movs	r3, #0
 8008246:	73fb      	strb	r3, [r7, #15]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 8008248:	e072      	b.n	8008330 <USBH_HandleControl+0x2d8>
      else if (URB_Status == USBH_URB_ERROR)
 800824a:	7bbb      	ldrb	r3, [r7, #14]
 800824c:	2b04      	cmp	r3, #4
 800824e:	d103      	bne.n	8008258 <USBH_HandleControl+0x200>
        phost->Control.state = CTRL_ERROR;
 8008250:	687b      	ldr	r3, [r7, #4]
 8008252:	220b      	movs	r2, #11
 8008254:	761a      	strb	r2, [r3, #24]
      break;
 8008256:	e06b      	b.n	8008330 <USBH_HandleControl+0x2d8>
        if (URB_Status == USBH_URB_STALL)
 8008258:	7bbb      	ldrb	r3, [r7, #14]
 800825a:	2b05      	cmp	r3, #5
 800825c:	d168      	bne.n	8008330 <USBH_HandleControl+0x2d8>
          status = USBH_NOT_SUPPORTED;
 800825e:	2303      	movs	r3, #3
 8008260:	73fb      	strb	r3, [r7, #15]
      break;
 8008262:	e065      	b.n	8008330 <USBH_HandleControl+0x2d8>

    case CTRL_STATUS_OUT:
      USBH_CtlSendData(phost, 0U, 0U, phost->Control.pipe_out, 1U);
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	795b      	ldrb	r3, [r3, #5]
 8008268:	2201      	movs	r2, #1
 800826a:	9200      	str	r2, [sp, #0]
 800826c:	2200      	movs	r2, #0
 800826e:	2100      	movs	r1, #0
 8008270:	6878      	ldr	r0, [r7, #4]
 8008272:	f000 f87f 	bl	8008374 <USBH_CtlSendData>

      phost->Control.timer = (uint16_t)phost->Timer;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	f8d3 33c4 	ldr.w	r3, [r3, #964]	; 0x3c4
 800827c:	b29a      	uxth	r2, r3
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	81da      	strh	r2, [r3, #14]
      phost->Control.state = CTRL_STATUS_OUT_WAIT;
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	220a      	movs	r2, #10
 8008286:	761a      	strb	r2, [r3, #24]
      break;
 8008288:	e055      	b.n	8008336 <USBH_HandleControl+0x2de>

    case CTRL_STATUS_OUT_WAIT:
      URB_Status = USBH_LL_GetURBState(phost, phost->Control.pipe_out);
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	795b      	ldrb	r3, [r3, #5]
 800828e:	4619      	mov	r1, r3
 8008290:	6878      	ldr	r0, [r7, #4]
 8008292:	f000 fb99 	bl	80089c8 <USBH_LL_GetURBState>
 8008296:	4603      	mov	r3, r0
 8008298:	73bb      	strb	r3, [r7, #14]
      if (URB_Status == USBH_URB_DONE)
 800829a:	7bbb      	ldrb	r3, [r7, #14]
 800829c:	2b01      	cmp	r3, #1
 800829e:	d105      	bne.n	80082ac <USBH_HandleControl+0x254>
      {
        status = USBH_OK;
 80082a0:	2300      	movs	r3, #0
 80082a2:	73fb      	strb	r3, [r7, #15]
        phost->Control.state = CTRL_COMPLETE;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	220d      	movs	r2, #13
 80082a8:	761a      	strb	r2, [r3, #24]
          (void)osMessageQueuePut(phost->os_event, &phost->os_msg, 0U, NULL);
#endif
#endif
        }
      }
      break;
 80082aa:	e043      	b.n	8008334 <USBH_HandleControl+0x2dc>
      else if (URB_Status == USBH_URB_NOTREADY)
 80082ac:	7bbb      	ldrb	r3, [r7, #14]
 80082ae:	2b02      	cmp	r3, #2
 80082b0:	d103      	bne.n	80082ba <USBH_HandleControl+0x262>
        phost->Control.state = CTRL_STATUS_OUT;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2209      	movs	r2, #9
 80082b6:	761a      	strb	r2, [r3, #24]
      break;
 80082b8:	e03c      	b.n	8008334 <USBH_HandleControl+0x2dc>
        if (URB_Status == USBH_URB_ERROR)
 80082ba:	7bbb      	ldrb	r3, [r7, #14]
 80082bc:	2b04      	cmp	r3, #4
 80082be:	d139      	bne.n	8008334 <USBH_HandleControl+0x2dc>
          phost->Control.state = CTRL_ERROR;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	220b      	movs	r2, #11
 80082c4:	761a      	strb	r2, [r3, #24]
      break;
 80082c6:	e035      	b.n	8008334 <USBH_HandleControl+0x2dc>
      PID; i.e., recovery actions via some other pipe are not required for control
      endpoints. For the Default Control Pipe, a device reset will ultimately be
      required to clear the halt or error condition if the next Setup PID is not
      accepted.
      */
      if (++phost->Control.errorcount <= USBH_MAX_ERROR_COUNT)
 80082c8:	687b      	ldr	r3, [r7, #4]
 80082ca:	7e5b      	ldrb	r3, [r3, #25]
 80082cc:	3301      	adds	r3, #1
 80082ce:	b2da      	uxtb	r2, r3
 80082d0:	687b      	ldr	r3, [r7, #4]
 80082d2:	765a      	strb	r2, [r3, #25]
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	7e5b      	ldrb	r3, [r3, #25]
 80082d8:	2b02      	cmp	r3, #2
 80082da:	d806      	bhi.n	80082ea <USBH_HandleControl+0x292>
      {
        /* Do the transmission again, starting from SETUP Packet */
        phost->Control.state = CTRL_SETUP;
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	2201      	movs	r2, #1
 80082e0:	761a      	strb	r2, [r3, #24]
        phost->RequestState = CMD_SEND;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2201      	movs	r2, #1
 80082e6:	709a      	strb	r2, [r3, #2]
        USBH_FreePipe(phost, phost->Control.pipe_in);

        phost->gState = HOST_IDLE;
        status = USBH_FAIL;
      }
      break;
 80082e8:	e025      	b.n	8008336 <USBH_HandleControl+0x2de>
        phost->pUser(phost, HOST_USER_UNRECOVERED_ERROR);
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	f8d3 33d4 	ldr.w	r3, [r3, #980]	; 0x3d4
 80082f0:	2106      	movs	r1, #6
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	4798      	blx	r3
        phost->Control.errorcount = 0U;
 80082f6:	687b      	ldr	r3, [r7, #4]
 80082f8:	2200      	movs	r2, #0
 80082fa:	765a      	strb	r2, [r3, #25]
        USBH_FreePipe(phost, phost->Control.pipe_out);
 80082fc:	687b      	ldr	r3, [r7, #4]
 80082fe:	795b      	ldrb	r3, [r3, #5]
 8008300:	4619      	mov	r1, r3
 8008302:	6878      	ldr	r0, [r7, #4]
 8008304:	f000 f90c 	bl	8008520 <USBH_FreePipe>
        USBH_FreePipe(phost, phost->Control.pipe_in);
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	791b      	ldrb	r3, [r3, #4]
 800830c:	4619      	mov	r1, r3
 800830e:	6878      	ldr	r0, [r7, #4]
 8008310:	f000 f906 	bl	8008520 <USBH_FreePipe>
        phost->gState = HOST_IDLE;
 8008314:	687b      	ldr	r3, [r7, #4]
 8008316:	2200      	movs	r2, #0
 8008318:	701a      	strb	r2, [r3, #0]
        status = USBH_FAIL;
 800831a:	2302      	movs	r3, #2
 800831c:	73fb      	strb	r3, [r7, #15]
      break;
 800831e:	e00a      	b.n	8008336 <USBH_HandleControl+0x2de>

    default:
      break;
 8008320:	bf00      	nop
 8008322:	e008      	b.n	8008336 <USBH_HandleControl+0x2de>
      break;
 8008324:	bf00      	nop
 8008326:	e006      	b.n	8008336 <USBH_HandleControl+0x2de>
      break;
 8008328:	bf00      	nop
 800832a:	e004      	b.n	8008336 <USBH_HandleControl+0x2de>
      break;
 800832c:	bf00      	nop
 800832e:	e002      	b.n	8008336 <USBH_HandleControl+0x2de>
      break;
 8008330:	bf00      	nop
 8008332:	e000      	b.n	8008336 <USBH_HandleControl+0x2de>
      break;
 8008334:	bf00      	nop
  }

  return status;
 8008336:	7bfb      	ldrb	r3, [r7, #15]
}
 8008338:	4618      	mov	r0, r3
 800833a:	3710      	adds	r7, #16
 800833c:	46bd      	mov	sp, r7
 800833e:	bd80      	pop	{r7, pc}

08008340 <USBH_CtlSendSetup>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_CtlSendSetup(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint8_t pipe_num)
{
 8008340:	b580      	push	{r7, lr}
 8008342:	b088      	sub	sp, #32
 8008344:	af04      	add	r7, sp, #16
 8008346:	60f8      	str	r0, [r7, #12]
 8008348:	60b9      	str	r1, [r7, #8]
 800834a:	4613      	mov	r3, r2
 800834c:	71fb      	strb	r3, [r7, #7]

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800834e:	79f9      	ldrb	r1, [r7, #7]
 8008350:	2300      	movs	r3, #0
 8008352:	9303      	str	r3, [sp, #12]
 8008354:	2308      	movs	r3, #8
 8008356:	9302      	str	r3, [sp, #8]
 8008358:	68bb      	ldr	r3, [r7, #8]
 800835a:	9301      	str	r3, [sp, #4]
 800835c:	2300      	movs	r3, #0
 800835e:	9300      	str	r3, [sp, #0]
 8008360:	2300      	movs	r3, #0
 8008362:	2200      	movs	r2, #0
 8008364:	68f8      	ldr	r0, [r7, #12]
 8008366:	f000 fafe 	bl	8008966 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_SETUP,       /* Type setup       */
                    buff,                 /* data buffer      */
                    USBH_SETUP_PKT_SIZE,  /* data length      */
                    0U);
  return USBH_OK;
 800836a:	2300      	movs	r3, #0
}
 800836c:	4618      	mov	r0, r3
 800836e:	3710      	adds	r7, #16
 8008370:	46bd      	mov	sp, r7
 8008372:	bd80      	pop	{r7, pc}

08008374 <USBH_CtlSendData>:
USBH_StatusTypeDef USBH_CtlSendData(USBH_HandleTypeDef *phost,
                                    uint8_t *buff,
                                    uint16_t length,
                                    uint8_t pipe_num,
                                    uint8_t do_ping)
{
 8008374:	b580      	push	{r7, lr}
 8008376:	b088      	sub	sp, #32
 8008378:	af04      	add	r7, sp, #16
 800837a:	60f8      	str	r0, [r7, #12]
 800837c:	60b9      	str	r1, [r7, #8]
 800837e:	4611      	mov	r1, r2
 8008380:	461a      	mov	r2, r3
 8008382:	460b      	mov	r3, r1
 8008384:	80fb      	strh	r3, [r7, #6]
 8008386:	4613      	mov	r3, r2
 8008388:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 800838a:	68fb      	ldr	r3, [r7, #12]
 800838c:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008390:	2b00      	cmp	r3, #0
 8008392:	d001      	beq.n	8008398 <USBH_CtlSendData+0x24>
  {
    do_ping = 0U;
 8008394:	2300      	movs	r3, #0
 8008396:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 8008398:	7979      	ldrb	r1, [r7, #5]
 800839a:	7e3b      	ldrb	r3, [r7, #24]
 800839c:	9303      	str	r3, [sp, #12]
 800839e:	88fb      	ldrh	r3, [r7, #6]
 80083a0:	9302      	str	r3, [sp, #8]
 80083a2:	68bb      	ldr	r3, [r7, #8]
 80083a4:	9301      	str	r3, [sp, #4]
 80083a6:	2301      	movs	r3, #1
 80083a8:	9300      	str	r3, [sp, #0]
 80083aa:	2300      	movs	r3, #0
 80083ac:	2200      	movs	r2, #0
 80083ae:	68f8      	ldr	r0, [r7, #12]
 80083b0:	f000 fad9 	bl	8008966 <USBH_LL_SubmitURB>
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/

  return USBH_OK;
 80083b4:	2300      	movs	r3, #0
}
 80083b6:	4618      	mov	r0, r3
 80083b8:	3710      	adds	r7, #16
 80083ba:	46bd      	mov	sp, r7
 80083bc:	bd80      	pop	{r7, pc}

080083be <USBH_CtlReceiveData>:
  */
USBH_StatusTypeDef USBH_CtlReceiveData(USBH_HandleTypeDef *phost,
                                       uint8_t *buff,
                                       uint16_t length,
                                       uint8_t pipe_num)
{
 80083be:	b580      	push	{r7, lr}
 80083c0:	b088      	sub	sp, #32
 80083c2:	af04      	add	r7, sp, #16
 80083c4:	60f8      	str	r0, [r7, #12]
 80083c6:	60b9      	str	r1, [r7, #8]
 80083c8:	4611      	mov	r1, r2
 80083ca:	461a      	mov	r2, r3
 80083cc:	460b      	mov	r3, r1
 80083ce:	80fb      	strh	r3, [r7, #6]
 80083d0:	4613      	mov	r3, r2
 80083d2:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 80083d4:	7979      	ldrb	r1, [r7, #5]
 80083d6:	2300      	movs	r3, #0
 80083d8:	9303      	str	r3, [sp, #12]
 80083da:	88fb      	ldrh	r3, [r7, #6]
 80083dc:	9302      	str	r3, [sp, #8]
 80083de:	68bb      	ldr	r3, [r7, #8]
 80083e0:	9301      	str	r3, [sp, #4]
 80083e2:	2301      	movs	r3, #1
 80083e4:	9300      	str	r3, [sp, #0]
 80083e6:	2300      	movs	r3, #0
 80083e8:	2201      	movs	r2, #1
 80083ea:	68f8      	ldr	r0, [r7, #12]
 80083ec:	f000 fabb 	bl	8008966 <USBH_LL_SubmitURB>
                    USBH_EP_CONTROL,      /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 80083f0:	2300      	movs	r3, #0

}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3710      	adds	r7, #16
 80083f6:	46bd      	mov	sp, r7
 80083f8:	bd80      	pop	{r7, pc}

080083fa <USBH_BulkSendData>:
USBH_StatusTypeDef USBH_BulkSendData(USBH_HandleTypeDef *phost,
                                     uint8_t *buff,
                                     uint16_t length,
                                     uint8_t pipe_num,
                                     uint8_t do_ping)
{
 80083fa:	b580      	push	{r7, lr}
 80083fc:	b088      	sub	sp, #32
 80083fe:	af04      	add	r7, sp, #16
 8008400:	60f8      	str	r0, [r7, #12]
 8008402:	60b9      	str	r1, [r7, #8]
 8008404:	4611      	mov	r1, r2
 8008406:	461a      	mov	r2, r3
 8008408:	460b      	mov	r3, r1
 800840a:	80fb      	strh	r3, [r7, #6]
 800840c:	4613      	mov	r3, r2
 800840e:	717b      	strb	r3, [r7, #5]
  if (phost->device.speed != USBH_SPEED_HIGH)
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	f893 331d 	ldrb.w	r3, [r3, #797]	; 0x31d
 8008416:	2b00      	cmp	r3, #0
 8008418:	d001      	beq.n	800841e <USBH_BulkSendData+0x24>
  {
    do_ping = 0U;
 800841a:	2300      	movs	r3, #0
 800841c:	763b      	strb	r3, [r7, #24]
  }

  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800841e:	7979      	ldrb	r1, [r7, #5]
 8008420:	7e3b      	ldrb	r3, [r7, #24]
 8008422:	9303      	str	r3, [sp, #12]
 8008424:	88fb      	ldrh	r3, [r7, #6]
 8008426:	9302      	str	r3, [sp, #8]
 8008428:	68bb      	ldr	r3, [r7, #8]
 800842a:	9301      	str	r3, [sp, #4]
 800842c:	2301      	movs	r3, #1
 800842e:	9300      	str	r3, [sp, #0]
 8008430:	2302      	movs	r3, #2
 8008432:	2200      	movs	r2, #0
 8008434:	68f8      	ldr	r0, [r7, #12]
 8008436:	f000 fa96 	bl	8008966 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    do_ping);             /* do ping (HS Only)*/
  return USBH_OK;
 800843a:	2300      	movs	r3, #0
}
 800843c:	4618      	mov	r0, r3
 800843e:	3710      	adds	r7, #16
 8008440:	46bd      	mov	sp, r7
 8008442:	bd80      	pop	{r7, pc}

08008444 <USBH_BulkReceiveData>:
  */
USBH_StatusTypeDef USBH_BulkReceiveData(USBH_HandleTypeDef *phost,
                                        uint8_t *buff,
                                        uint16_t length,
                                        uint8_t pipe_num)
{
 8008444:	b580      	push	{r7, lr}
 8008446:	b088      	sub	sp, #32
 8008448:	af04      	add	r7, sp, #16
 800844a:	60f8      	str	r0, [r7, #12]
 800844c:	60b9      	str	r1, [r7, #8]
 800844e:	4611      	mov	r1, r2
 8008450:	461a      	mov	r2, r3
 8008452:	460b      	mov	r3, r1
 8008454:	80fb      	strh	r3, [r7, #6]
 8008456:	4613      	mov	r3, r2
 8008458:	717b      	strb	r3, [r7, #5]
  USBH_LL_SubmitURB(phost,                      /* Driver handle    */
 800845a:	7979      	ldrb	r1, [r7, #5]
 800845c:	2300      	movs	r3, #0
 800845e:	9303      	str	r3, [sp, #12]
 8008460:	88fb      	ldrh	r3, [r7, #6]
 8008462:	9302      	str	r3, [sp, #8]
 8008464:	68bb      	ldr	r3, [r7, #8]
 8008466:	9301      	str	r3, [sp, #4]
 8008468:	2301      	movs	r3, #1
 800846a:	9300      	str	r3, [sp, #0]
 800846c:	2302      	movs	r3, #2
 800846e:	2201      	movs	r2, #1
 8008470:	68f8      	ldr	r0, [r7, #12]
 8008472:	f000 fa78 	bl	8008966 <USBH_LL_SubmitURB>
                    USBH_EP_BULK,         /* EP type          */
                    USBH_PID_DATA,        /* Type Data        */
                    buff,                 /* data buffer      */
                    length,               /* data length      */
                    0U);
  return USBH_OK;
 8008476:	2300      	movs	r3, #0
}
 8008478:	4618      	mov	r0, r3
 800847a:	3710      	adds	r7, #16
 800847c:	46bd      	mov	sp, r7
 800847e:	bd80      	pop	{r7, pc}

08008480 <USBH_OpenPipe>:
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num,
                                 uint8_t epnum, uint8_t dev_address,
                                 uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 8008480:	b580      	push	{r7, lr}
 8008482:	b086      	sub	sp, #24
 8008484:	af04      	add	r7, sp, #16
 8008486:	6078      	str	r0, [r7, #4]
 8008488:	4608      	mov	r0, r1
 800848a:	4611      	mov	r1, r2
 800848c:	461a      	mov	r2, r3
 800848e:	4603      	mov	r3, r0
 8008490:	70fb      	strb	r3, [r7, #3]
 8008492:	460b      	mov	r3, r1
 8008494:	70bb      	strb	r3, [r7, #2]
 8008496:	4613      	mov	r3, r2
 8008498:	707b      	strb	r3, [r7, #1]
  USBH_LL_OpenPipe(phost, pipe_num, epnum, dev_address, speed, ep_type, mps);
 800849a:	7878      	ldrb	r0, [r7, #1]
 800849c:	78ba      	ldrb	r2, [r7, #2]
 800849e:	78f9      	ldrb	r1, [r7, #3]
 80084a0:	8b3b      	ldrh	r3, [r7, #24]
 80084a2:	9302      	str	r3, [sp, #8]
 80084a4:	7d3b      	ldrb	r3, [r7, #20]
 80084a6:	9301      	str	r3, [sp, #4]
 80084a8:	7c3b      	ldrb	r3, [r7, #16]
 80084aa:	9300      	str	r3, [sp, #0]
 80084ac:	4603      	mov	r3, r0
 80084ae:	6878      	ldr	r0, [r7, #4]
 80084b0:	f000 fa0b 	bl	80088ca <USBH_LL_OpenPipe>

  return USBH_OK;
 80084b4:	2300      	movs	r3, #0
}
 80084b6:	4618      	mov	r0, r3
 80084b8:	3708      	adds	r7, #8
 80084ba:	46bd      	mov	sp, r7
 80084bc:	bd80      	pop	{r7, pc}

080084be <USBH_ClosePipe>:
  * @param  phost: Host Handle
  * @param  pipe_num: Pipe Number
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe_num)
{
 80084be:	b580      	push	{r7, lr}
 80084c0:	b082      	sub	sp, #8
 80084c2:	af00      	add	r7, sp, #0
 80084c4:	6078      	str	r0, [r7, #4]
 80084c6:	460b      	mov	r3, r1
 80084c8:	70fb      	strb	r3, [r7, #3]
  USBH_LL_ClosePipe(phost, pipe_num);
 80084ca:	78fb      	ldrb	r3, [r7, #3]
 80084cc:	4619      	mov	r1, r3
 80084ce:	6878      	ldr	r0, [r7, #4]
 80084d0:	f000 fa2a 	bl	8008928 <USBH_LL_ClosePipe>

  return USBH_OK;
 80084d4:	2300      	movs	r3, #0
}
 80084d6:	4618      	mov	r0, r3
 80084d8:	3708      	adds	r7, #8
 80084da:	46bd      	mov	sp, r7
 80084dc:	bd80      	pop	{r7, pc}

080084de <USBH_AllocPipe>:
  * @param  phost: Host Handle
  * @param  ep_addr: End point for which the Pipe to be allocated
  * @retval Pipe number
  */
uint8_t USBH_AllocPipe(USBH_HandleTypeDef *phost, uint8_t ep_addr)
{
 80084de:	b580      	push	{r7, lr}
 80084e0:	b084      	sub	sp, #16
 80084e2:	af00      	add	r7, sp, #0
 80084e4:	6078      	str	r0, [r7, #4]
 80084e6:	460b      	mov	r3, r1
 80084e8:	70fb      	strb	r3, [r7, #3]
  uint16_t pipe;

  pipe =  USBH_GetFreePipe(phost);
 80084ea:	6878      	ldr	r0, [r7, #4]
 80084ec:	f000 f836 	bl	800855c <USBH_GetFreePipe>
 80084f0:	4603      	mov	r3, r0
 80084f2:	81fb      	strh	r3, [r7, #14]

  if (pipe != 0xFFFFU)
 80084f4:	89fb      	ldrh	r3, [r7, #14]
 80084f6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80084fa:	4293      	cmp	r3, r2
 80084fc:	d00a      	beq.n	8008514 <USBH_AllocPipe+0x36>
  {
    phost->Pipes[pipe & 0xFU] = 0x8000U | ep_addr;
 80084fe:	78fa      	ldrb	r2, [r7, #3]
 8008500:	89fb      	ldrh	r3, [r7, #14]
 8008502:	f003 030f 	and.w	r3, r3, #15
 8008506:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800850a:	6879      	ldr	r1, [r7, #4]
 800850c:	33e0      	adds	r3, #224	; 0xe0
 800850e:	009b      	lsls	r3, r3, #2
 8008510:	440b      	add	r3, r1
 8008512:	605a      	str	r2, [r3, #4]
  }

  return (uint8_t)pipe;
 8008514:	89fb      	ldrh	r3, [r7, #14]
 8008516:	b2db      	uxtb	r3, r3
}
 8008518:	4618      	mov	r0, r3
 800851a:	3710      	adds	r7, #16
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}

08008520 <USBH_FreePipe>:
  * @param  phost: Host Handle
  * @param  idx: Pipe number to be freed
  * @retval USBH Status
  */
USBH_StatusTypeDef USBH_FreePipe(USBH_HandleTypeDef *phost, uint8_t idx)
{
 8008520:	b480      	push	{r7}
 8008522:	b083      	sub	sp, #12
 8008524:	af00      	add	r7, sp, #0
 8008526:	6078      	str	r0, [r7, #4]
 8008528:	460b      	mov	r3, r1
 800852a:	70fb      	strb	r3, [r7, #3]
  if (idx < 11U)
 800852c:	78fb      	ldrb	r3, [r7, #3]
 800852e:	2b0a      	cmp	r3, #10
 8008530:	d80d      	bhi.n	800854e <USBH_FreePipe+0x2e>
  {
    phost->Pipes[idx] &= 0x7FFFU;
 8008532:	78fb      	ldrb	r3, [r7, #3]
 8008534:	687a      	ldr	r2, [r7, #4]
 8008536:	33e0      	adds	r3, #224	; 0xe0
 8008538:	009b      	lsls	r3, r3, #2
 800853a:	4413      	add	r3, r2
 800853c:	685a      	ldr	r2, [r3, #4]
 800853e:	78fb      	ldrb	r3, [r7, #3]
 8008540:	f3c2 020e 	ubfx	r2, r2, #0, #15
 8008544:	6879      	ldr	r1, [r7, #4]
 8008546:	33e0      	adds	r3, #224	; 0xe0
 8008548:	009b      	lsls	r3, r3, #2
 800854a:	440b      	add	r3, r1
 800854c:	605a      	str	r2, [r3, #4]
  }

  return USBH_OK;
 800854e:	2300      	movs	r3, #0
}
 8008550:	4618      	mov	r0, r3
 8008552:	370c      	adds	r7, #12
 8008554:	46bd      	mov	sp, r7
 8008556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800855a:	4770      	bx	lr

0800855c <USBH_GetFreePipe>:
  * @param  phost: Host Handle
  *         Get a free Pipe number for allocation to a device endpoint
  * @retval idx: Free Pipe number
  */
static uint16_t USBH_GetFreePipe(USBH_HandleTypeDef *phost)
{
 800855c:	b480      	push	{r7}
 800855e:	b085      	sub	sp, #20
 8008560:	af00      	add	r7, sp, #0
 8008562:	6078      	str	r0, [r7, #4]
  uint8_t idx = 0U;
 8008564:	2300      	movs	r3, #0
 8008566:	73fb      	strb	r3, [r7, #15]

  for (idx = 0U ; idx < 11U ; idx++)
 8008568:	2300      	movs	r3, #0
 800856a:	73fb      	strb	r3, [r7, #15]
 800856c:	e00f      	b.n	800858e <USBH_GetFreePipe+0x32>
  {
    if ((phost->Pipes[idx] & 0x8000U) == 0U)
 800856e:	7bfb      	ldrb	r3, [r7, #15]
 8008570:	687a      	ldr	r2, [r7, #4]
 8008572:	33e0      	adds	r3, #224	; 0xe0
 8008574:	009b      	lsls	r3, r3, #2
 8008576:	4413      	add	r3, r2
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800857e:	2b00      	cmp	r3, #0
 8008580:	d102      	bne.n	8008588 <USBH_GetFreePipe+0x2c>
    {
      return (uint16_t)idx;
 8008582:	7bfb      	ldrb	r3, [r7, #15]
 8008584:	b29b      	uxth	r3, r3
 8008586:	e007      	b.n	8008598 <USBH_GetFreePipe+0x3c>
  for (idx = 0U ; idx < 11U ; idx++)
 8008588:	7bfb      	ldrb	r3, [r7, #15]
 800858a:	3301      	adds	r3, #1
 800858c:	73fb      	strb	r3, [r7, #15]
 800858e:	7bfb      	ldrb	r3, [r7, #15]
 8008590:	2b0a      	cmp	r3, #10
 8008592:	d9ec      	bls.n	800856e <USBH_GetFreePipe+0x12>
    }
  }

  return 0xFFFFU;
 8008594:	f64f 73ff 	movw	r3, #65535	; 0xffff
}
 8008598:	4618      	mov	r0, r3
 800859a:	3714      	adds	r7, #20
 800859c:	46bd      	mov	sp, r7
 800859e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085a2:	4770      	bx	lr

080085a4 <MX_USB_HOST_Init>:
/**
  * Init USB host library, add supported class and start the library
  * @retval None
  */
void MX_USB_HOST_Init(void)
{
 80085a4:	b580      	push	{r7, lr}
 80085a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_HOST_Init_PreTreatment */

  /* USER CODE END USB_HOST_Init_PreTreatment */

  /* Init host Library, add supported class and start the library. */
  if (USBH_Init(&hUsbHostFS, USBH_UserProcess, HOST_FS) != USBH_OK)
 80085a8:	2201      	movs	r2, #1
 80085aa:	490e      	ldr	r1, [pc, #56]	; (80085e4 <MX_USB_HOST_Init+0x40>)
 80085ac:	480e      	ldr	r0, [pc, #56]	; (80085e8 <MX_USB_HOST_Init+0x44>)
 80085ae:	f7ff fb37 	bl	8007c20 <USBH_Init>
 80085b2:	4603      	mov	r3, r0
 80085b4:	2b00      	cmp	r3, #0
 80085b6:	d001      	beq.n	80085bc <MX_USB_HOST_Init+0x18>
  {
    Error_Handler();
 80085b8:	f7f8 fb56 	bl	8000c68 <Error_Handler>
  }
  if (USBH_RegisterClass(&hUsbHostFS, USBH_CDC_CLASS) != USBH_OK)
 80085bc:	490b      	ldr	r1, [pc, #44]	; (80085ec <MX_USB_HOST_Init+0x48>)
 80085be:	480a      	ldr	r0, [pc, #40]	; (80085e8 <MX_USB_HOST_Init+0x44>)
 80085c0:	f7ff fbbc 	bl	8007d3c <USBH_RegisterClass>
 80085c4:	4603      	mov	r3, r0
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d001      	beq.n	80085ce <MX_USB_HOST_Init+0x2a>
  {
    Error_Handler();
 80085ca:	f7f8 fb4d 	bl	8000c68 <Error_Handler>
  }
  if (USBH_Start(&hUsbHostFS) != USBH_OK)
 80085ce:	4806      	ldr	r0, [pc, #24]	; (80085e8 <MX_USB_HOST_Init+0x44>)
 80085d0:	f7ff fc40 	bl	8007e54 <USBH_Start>
 80085d4:	4603      	mov	r3, r0
 80085d6:	2b00      	cmp	r3, #0
 80085d8:	d001      	beq.n	80085de <MX_USB_HOST_Init+0x3a>
  {
    Error_Handler();
 80085da:	f7f8 fb45 	bl	8000c68 <Error_Handler>
  }
  /* USER CODE BEGIN USB_HOST_Init_PostTreatment */

  /* USER CODE END USB_HOST_Init_PostTreatment */
}
 80085de:	bf00      	nop
 80085e0:	bd80      	pop	{r7, pc}
 80085e2:	bf00      	nop
 80085e4:	080085f1 	.word	0x080085f1
 80085e8:	200003dc 	.word	0x200003dc
 80085ec:	2000000c 	.word	0x2000000c

080085f0 <USBH_UserProcess>:
}
/*
 * user callback definition
 */
static void USBH_UserProcess  (USBH_HandleTypeDef *phost, uint8_t id)
{
 80085f0:	b480      	push	{r7}
 80085f2:	b083      	sub	sp, #12
 80085f4:	af00      	add	r7, sp, #0
 80085f6:	6078      	str	r0, [r7, #4]
 80085f8:	460b      	mov	r3, r1
 80085fa:	70fb      	strb	r3, [r7, #3]
  /* USER CODE BEGIN CALL_BACK_1 */
  switch(id)
 80085fc:	78fb      	ldrb	r3, [r7, #3]
 80085fe:	3b01      	subs	r3, #1
 8008600:	2b04      	cmp	r3, #4
 8008602:	d819      	bhi.n	8008638 <USBH_UserProcess+0x48>
 8008604:	a201      	add	r2, pc, #4	; (adr r2, 800860c <USBH_UserProcess+0x1c>)
 8008606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800860a:	bf00      	nop
 800860c:	08008639 	.word	0x08008639
 8008610:	08008629 	.word	0x08008629
 8008614:	08008639 	.word	0x08008639
 8008618:	08008631 	.word	0x08008631
 800861c:	08008621 	.word	0x08008621
  {
  case HOST_USER_SELECT_CONFIGURATION:
  break;

  case HOST_USER_DISCONNECTION:
  Appli_state = APPLICATION_DISCONNECT;
 8008620:	4b09      	ldr	r3, [pc, #36]	; (8008648 <USBH_UserProcess+0x58>)
 8008622:	2203      	movs	r2, #3
 8008624:	701a      	strb	r2, [r3, #0]
  break;
 8008626:	e008      	b.n	800863a <USBH_UserProcess+0x4a>

  case HOST_USER_CLASS_ACTIVE:
  Appli_state = APPLICATION_READY;
 8008628:	4b07      	ldr	r3, [pc, #28]	; (8008648 <USBH_UserProcess+0x58>)
 800862a:	2202      	movs	r2, #2
 800862c:	701a      	strb	r2, [r3, #0]
  break;
 800862e:	e004      	b.n	800863a <USBH_UserProcess+0x4a>

  case HOST_USER_CONNECTION:
  Appli_state = APPLICATION_START;
 8008630:	4b05      	ldr	r3, [pc, #20]	; (8008648 <USBH_UserProcess+0x58>)
 8008632:	2201      	movs	r2, #1
 8008634:	701a      	strb	r2, [r3, #0]
  break;
 8008636:	e000      	b.n	800863a <USBH_UserProcess+0x4a>

  default:
  break;
 8008638:	bf00      	nop
  }
  /* USER CODE END CALL_BACK_1 */
}
 800863a:	bf00      	nop
 800863c:	370c      	adds	r7, #12
 800863e:	46bd      	mov	sp, r7
 8008640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008644:	4770      	bx	lr
 8008646:	bf00      	nop
 8008648:	200000b4 	.word	0x200000b4

0800864c <HAL_HCD_MspInit>:
                       LL Driver Callbacks (HCD -> USB Host Library)
*******************************************************************************/
/* MSP Init */

void HAL_HCD_MspInit(HCD_HandleTypeDef* hcdHandle)
{
 800864c:	b580      	push	{r7, lr}
 800864e:	b08a      	sub	sp, #40	; 0x28
 8008650:	af00      	add	r7, sp, #0
 8008652:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008654:	f107 0314 	add.w	r3, r7, #20
 8008658:	2200      	movs	r2, #0
 800865a:	601a      	str	r2, [r3, #0]
 800865c:	605a      	str	r2, [r3, #4]
 800865e:	609a      	str	r2, [r3, #8]
 8008660:	60da      	str	r2, [r3, #12]
 8008662:	611a      	str	r2, [r3, #16]
  if(hcdHandle->Instance==USB_OTG_FS)
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 800866c:	d14e      	bne.n	800870c <HAL_HCD_MspInit+0xc0>
  {
  /* USER CODE BEGIN USB_OTG_FS_MspInit 0 */

  /* USER CODE END USB_OTG_FS_MspInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800866e:	4b29      	ldr	r3, [pc, #164]	; (8008714 <HAL_HCD_MspInit+0xc8>)
 8008670:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8008672:	4a28      	ldr	r2, [pc, #160]	; (8008714 <HAL_HCD_MspInit+0xc8>)
 8008674:	f043 0301 	orr.w	r3, r3, #1
 8008678:	64d3      	str	r3, [r2, #76]	; 0x4c
 800867a:	4b26      	ldr	r3, [pc, #152]	; (8008714 <HAL_HCD_MspInit+0xc8>)
 800867c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800867e:	f003 0301 	and.w	r3, r3, #1
 8008682:	613b      	str	r3, [r7, #16]
 8008684:	693b      	ldr	r3, [r7, #16]
    /**USB_OTG_FS GPIO Configuration
    PA11     ------> USB_OTG_FS_DM
    PA12     ------> USB_OTG_FS_DP
    */
    GPIO_InitStruct.Pin = OTG_FS_DM_Pin|OTG_FS_DP_Pin;
 8008686:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 800868a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800868c:	2302      	movs	r3, #2
 800868e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008690:	2300      	movs	r3, #0
 8008692:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008694:	2303      	movs	r3, #3
 8008696:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF10_OTG_FS;
 8008698:	230a      	movs	r3, #10
 800869a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800869c:	f107 0314 	add.w	r3, r7, #20
 80086a0:	4619      	mov	r1, r3
 80086a2:	f04f 4090 	mov.w	r0, #1207959552	; 0x48000000
 80086a6:	f7f9 f8f1 	bl	800188c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_USB_OTG_FS_CLK_ENABLE();
 80086aa:	4b1a      	ldr	r3, [pc, #104]	; (8008714 <HAL_HCD_MspInit+0xc8>)
 80086ac:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086ae:	4a19      	ldr	r2, [pc, #100]	; (8008714 <HAL_HCD_MspInit+0xc8>)
 80086b0:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80086b4:	64d3      	str	r3, [r2, #76]	; 0x4c
 80086b6:	4b17      	ldr	r3, [pc, #92]	; (8008714 <HAL_HCD_MspInit+0xc8>)
 80086b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80086ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80086be:	60fb      	str	r3, [r7, #12]
 80086c0:	68fb      	ldr	r3, [r7, #12]

    /* Enable VDDUSB */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80086c2:	4b14      	ldr	r3, [pc, #80]	; (8008714 <HAL_HCD_MspInit+0xc8>)
 80086c4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086ca:	2b00      	cmp	r3, #0
 80086cc:	d114      	bne.n	80086f8 <HAL_HCD_MspInit+0xac>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80086ce:	4b11      	ldr	r3, [pc, #68]	; (8008714 <HAL_HCD_MspInit+0xc8>)
 80086d0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086d2:	4a10      	ldr	r2, [pc, #64]	; (8008714 <HAL_HCD_MspInit+0xc8>)
 80086d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80086d8:	6593      	str	r3, [r2, #88]	; 0x58
 80086da:	4b0e      	ldr	r3, [pc, #56]	; (8008714 <HAL_HCD_MspInit+0xc8>)
 80086dc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80086e2:	60bb      	str	r3, [r7, #8]
 80086e4:	68bb      	ldr	r3, [r7, #8]
      HAL_PWREx_EnableVddUSB();
 80086e6:	f7fa ff8f 	bl	8003608 <HAL_PWREx_EnableVddUSB>
      __HAL_RCC_PWR_CLK_DISABLE();
 80086ea:	4b0a      	ldr	r3, [pc, #40]	; (8008714 <HAL_HCD_MspInit+0xc8>)
 80086ec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80086ee:	4a09      	ldr	r2, [pc, #36]	; (8008714 <HAL_HCD_MspInit+0xc8>)
 80086f0:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80086f4:	6593      	str	r3, [r2, #88]	; 0x58
 80086f6:	e001      	b.n	80086fc <HAL_HCD_MspInit+0xb0>
    }
    else
    {
      HAL_PWREx_EnableVddUSB();
 80086f8:	f7fa ff86 	bl	8003608 <HAL_PWREx_EnableVddUSB>
    }

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(OTG_FS_IRQn, 0, 0);
 80086fc:	2200      	movs	r2, #0
 80086fe:	2100      	movs	r1, #0
 8008700:	2043      	movs	r0, #67	; 0x43
 8008702:	f7f9 f88c 	bl	800181e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(OTG_FS_IRQn);
 8008706:	2043      	movs	r0, #67	; 0x43
 8008708:	f7f9 f8a5 	bl	8001856 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_OTG_FS_MspInit 1 */

  /* USER CODE END USB_OTG_FS_MspInit 1 */
  }
}
 800870c:	bf00      	nop
 800870e:	3728      	adds	r7, #40	; 0x28
 8008710:	46bd      	mov	sp, r7
 8008712:	bd80      	pop	{r7, pc}
 8008714:	40021000 	.word	0x40021000

08008718 <HAL_HCD_SOF_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_SOF_Callback(HCD_HandleTypeDef *hhcd)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b082      	sub	sp, #8
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  USBH_LL_IncTimer(hhcd->pData);
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008726:	4618      	mov	r0, r3
 8008728:	f7ff fbb3 	bl	8007e92 <USBH_LL_IncTimer>
}
 800872c:	bf00      	nop
 800872e:	3708      	adds	r7, #8
 8008730:	46bd      	mov	sp, r7
 8008732:	bd80      	pop	{r7, pc}

08008734 <HAL_HCD_Connect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Connect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008734:	b580      	push	{r7, lr}
 8008736:	b082      	sub	sp, #8
 8008738:	af00      	add	r7, sp, #0
 800873a:	6078      	str	r0, [r7, #4]
  USBH_LL_Connect(hhcd->pData);
 800873c:	687b      	ldr	r3, [r7, #4]
 800873e:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008742:	4618      	mov	r0, r3
 8008744:	f7ff fbeb 	bl	8007f1e <USBH_LL_Connect>
}
 8008748:	bf00      	nop
 800874a:	3708      	adds	r7, #8
 800874c:	46bd      	mov	sp, r7
 800874e:	bd80      	pop	{r7, pc}

08008750 <HAL_HCD_Disconnect_Callback>:
  * @brief  SOF callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_Disconnect_Callback(HCD_HandleTypeDef *hhcd)
{
 8008750:	b580      	push	{r7, lr}
 8008752:	b082      	sub	sp, #8
 8008754:	af00      	add	r7, sp, #0
 8008756:	6078      	str	r0, [r7, #4]
  USBH_LL_Disconnect(hhcd->pData);
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 800875e:	4618      	mov	r0, r3
 8008760:	f7ff fbf4 	bl	8007f4c <USBH_LL_Disconnect>
}
 8008764:	bf00      	nop
 8008766:	3708      	adds	r7, #8
 8008768:	46bd      	mov	sp, r7
 800876a:	bd80      	pop	{r7, pc}

0800876c <HAL_HCD_HC_NotifyURBChange_Callback>:
  * @param  chnum: channel number
  * @param  urb_state: state
  * @retval None
  */
void HAL_HCD_HC_NotifyURBChange_Callback(HCD_HandleTypeDef *hhcd, uint8_t chnum, HCD_URBStateTypeDef urb_state)
{
 800876c:	b480      	push	{r7}
 800876e:	b083      	sub	sp, #12
 8008770:	af00      	add	r7, sp, #0
 8008772:	6078      	str	r0, [r7, #4]
 8008774:	460b      	mov	r3, r1
 8008776:	70fb      	strb	r3, [r7, #3]
 8008778:	4613      	mov	r3, r2
 800877a:	70bb      	strb	r3, [r7, #2]
  /* To be used with OS to sync URB state with the global state machine */
#if (USBH_USE_OS == 1)
  USBH_LL_NotifyURBChange(hhcd->pData);
#endif
}
 800877c:	bf00      	nop
 800877e:	370c      	adds	r7, #12
 8008780:	46bd      	mov	sp, r7
 8008782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008786:	4770      	bx	lr

08008788 <HAL_HCD_PortEnabled_Callback>:
* @brief  Port Port Enabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortEnabled_Callback(HCD_HandleTypeDef *hhcd)
{
 8008788:	b580      	push	{r7, lr}
 800878a:	b082      	sub	sp, #8
 800878c:	af00      	add	r7, sp, #0
 800878e:	6078      	str	r0, [r7, #4]
  USBH_LL_PortEnabled(hhcd->pData);
 8008790:	687b      	ldr	r3, [r7, #4]
 8008792:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 8008796:	4618      	mov	r0, r3
 8008798:	f7ff fba5 	bl	8007ee6 <USBH_LL_PortEnabled>
}
 800879c:	bf00      	nop
 800879e:	3708      	adds	r7, #8
 80087a0:	46bd      	mov	sp, r7
 80087a2:	bd80      	pop	{r7, pc}

080087a4 <HAL_HCD_PortDisabled_Callback>:
  * @brief  Port Port Disabled callback.
  * @param  hhcd: HCD handle
  * @retval None
  */
void HAL_HCD_PortDisabled_Callback(HCD_HandleTypeDef *hhcd)
{
 80087a4:	b580      	push	{r7, lr}
 80087a6:	b082      	sub	sp, #8
 80087a8:	af00      	add	r7, sp, #0
 80087aa:	6078      	str	r0, [r7, #4]
  USBH_LL_PortDisabled(hhcd->pData);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	f8d3 3300 	ldr.w	r3, [r3, #768]	; 0x300
 80087b2:	4618      	mov	r0, r3
 80087b4:	f7ff fba5 	bl	8007f02 <USBH_LL_PortDisabled>
}
 80087b8:	bf00      	nop
 80087ba:	3708      	adds	r7, #8
 80087bc:	46bd      	mov	sp, r7
 80087be:	bd80      	pop	{r7, pc}

080087c0 <USBH_LL_Init>:
  * @brief  Initialize the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Init(USBH_HandleTypeDef *phost)
{
 80087c0:	b580      	push	{r7, lr}
 80087c2:	b082      	sub	sp, #8
 80087c4:	af00      	add	r7, sp, #0
 80087c6:	6078      	str	r0, [r7, #4]
  /* Init USB_IP */
  if (phost->id == HOST_FS) {
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 80087ce:	2b01      	cmp	r3, #1
 80087d0:	d12a      	bne.n	8008828 <USBH_LL_Init+0x68>
  /* Enable USB power on Pwrctrl CR2 register */
  /* Link the driver to the stack. */
  hhcd_USB_OTG_FS.pData = phost;
 80087d2:	4a18      	ldr	r2, [pc, #96]	; (8008834 <USBH_LL_Init+0x74>)
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	f8c2 3300 	str.w	r3, [r2, #768]	; 0x300
  phost->pData = &hhcd_USB_OTG_FS;
 80087da:	687b      	ldr	r3, [r7, #4]
 80087dc:	4a15      	ldr	r2, [pc, #84]	; (8008834 <USBH_LL_Init+0x74>)
 80087de:	f8c3 23d0 	str.w	r2, [r3, #976]	; 0x3d0

  hhcd_USB_OTG_FS.Instance = USB_OTG_FS;
 80087e2:	4b14      	ldr	r3, [pc, #80]	; (8008834 <USBH_LL_Init+0x74>)
 80087e4:	f04f 42a0 	mov.w	r2, #1342177280	; 0x50000000
 80087e8:	601a      	str	r2, [r3, #0]
  hhcd_USB_OTG_FS.Init.Host_channels = 8;
 80087ea:	4b12      	ldr	r3, [pc, #72]	; (8008834 <USBH_LL_Init+0x74>)
 80087ec:	2208      	movs	r2, #8
 80087ee:	609a      	str	r2, [r3, #8]
  hhcd_USB_OTG_FS.Init.speed = HCD_SPEED_FULL;
 80087f0:	4b10      	ldr	r3, [pc, #64]	; (8008834 <USBH_LL_Init+0x74>)
 80087f2:	2201      	movs	r2, #1
 80087f4:	60da      	str	r2, [r3, #12]
  hhcd_USB_OTG_FS.Init.dma_enable = DISABLE;
 80087f6:	4b0f      	ldr	r3, [pc, #60]	; (8008834 <USBH_LL_Init+0x74>)
 80087f8:	2200      	movs	r2, #0
 80087fa:	611a      	str	r2, [r3, #16]
  hhcd_USB_OTG_FS.Init.phy_itface = HCD_PHY_EMBEDDED;
 80087fc:	4b0d      	ldr	r3, [pc, #52]	; (8008834 <USBH_LL_Init+0x74>)
 80087fe:	2202      	movs	r2, #2
 8008800:	619a      	str	r2, [r3, #24]
  hhcd_USB_OTG_FS.Init.Sof_enable = DISABLE;
 8008802:	4b0c      	ldr	r3, [pc, #48]	; (8008834 <USBH_LL_Init+0x74>)
 8008804:	2200      	movs	r2, #0
 8008806:	61da      	str	r2, [r3, #28]
  if (HAL_HCD_Init(&hhcd_USB_OTG_FS) != HAL_OK)
 8008808:	480a      	ldr	r0, [pc, #40]	; (8008834 <USBH_LL_Init+0x74>)
 800880a:	f7f9 fa01 	bl	8001c10 <HAL_HCD_Init>
 800880e:	4603      	mov	r3, r0
 8008810:	2b00      	cmp	r3, #0
 8008812:	d001      	beq.n	8008818 <USBH_LL_Init+0x58>
  {
    Error_Handler( );
 8008814:	f7f8 fa28 	bl	8000c68 <Error_Handler>
  }

  USBH_LL_SetTimer(phost, HAL_HCD_GetCurrentFrame(&hhcd_USB_OTG_FS));
 8008818:	4806      	ldr	r0, [pc, #24]	; (8008834 <USBH_LL_Init+0x74>)
 800881a:	f7f9 fdd2 	bl	80023c2 <HAL_HCD_GetCurrentFrame>
 800881e:	4603      	mov	r3, r0
 8008820:	4619      	mov	r1, r3
 8008822:	6878      	ldr	r0, [r7, #4]
 8008824:	f7ff fb26 	bl	8007e74 <USBH_LL_SetTimer>
  }
  return USBH_OK;
 8008828:	2300      	movs	r3, #0
}
 800882a:	4618      	mov	r0, r3
 800882c:	3708      	adds	r7, #8
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}
 8008832:	bf00      	nop
 8008834:	200007b4 	.word	0x200007b4

08008838 <USBH_LL_Start>:
  * @brief  Start the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Start(USBH_HandleTypeDef *phost)
{
 8008838:	b580      	push	{r7, lr}
 800883a:	b084      	sub	sp, #16
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008840:	2300      	movs	r3, #0
 8008842:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008844:	2300      	movs	r3, #0
 8008846:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Start(phost->pData);
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 800884e:	4618      	mov	r0, r3
 8008850:	f7f9 fd4f 	bl	80022f2 <HAL_HCD_Start>
 8008854:	4603      	mov	r3, r0
 8008856:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008858:	7bfb      	ldrb	r3, [r7, #15]
 800885a:	4618      	mov	r0, r3
 800885c:	f000 f90e 	bl	8008a7c <USBH_Get_USB_Status>
 8008860:	4603      	mov	r3, r0
 8008862:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 8008864:	7bbb      	ldrb	r3, [r7, #14]
}
 8008866:	4618      	mov	r0, r3
 8008868:	3710      	adds	r7, #16
 800886a:	46bd      	mov	sp, r7
 800886c:	bd80      	pop	{r7, pc}

0800886e <USBH_LL_Stop>:
  * @brief  Stop the low level portion of the host driver.
  * @param  phost: Host handle
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_Stop(USBH_HandleTypeDef *phost)
{
 800886e:	b580      	push	{r7, lr}
 8008870:	b084      	sub	sp, #16
 8008872:	af00      	add	r7, sp, #0
 8008874:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008876:	2300      	movs	r3, #0
 8008878:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 800887a:	2300      	movs	r3, #0
 800887c:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_Stop(phost->pData);
 800887e:	687b      	ldr	r3, [r7, #4]
 8008880:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008884:	4618      	mov	r0, r3
 8008886:	f7f9 fd57 	bl	8002338 <HAL_HCD_Stop>
 800888a:	4603      	mov	r3, r0
 800888c:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 800888e:	7bfb      	ldrb	r3, [r7, #15]
 8008890:	4618      	mov	r0, r3
 8008892:	f000 f8f3 	bl	8008a7c <USBH_Get_USB_Status>
 8008896:	4603      	mov	r3, r0
 8008898:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800889a:	7bbb      	ldrb	r3, [r7, #14]
}
 800889c:	4618      	mov	r0, r3
 800889e:	3710      	adds	r7, #16
 80088a0:	46bd      	mov	sp, r7
 80088a2:	bd80      	pop	{r7, pc}

080088a4 <USBH_LL_GetLastXferSize>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval Packet size
  */
uint32_t USBH_LL_GetLastXferSize(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80088a4:	b580      	push	{r7, lr}
 80088a6:	b082      	sub	sp, #8
 80088a8:	af00      	add	r7, sp, #0
 80088aa:	6078      	str	r0, [r7, #4]
 80088ac:	460b      	mov	r3, r1
 80088ae:	70fb      	strb	r3, [r7, #3]
  return HAL_HCD_HC_GetXferCount(phost->pData, pipe);
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80088b6:	78fa      	ldrb	r2, [r7, #3]
 80088b8:	4611      	mov	r1, r2
 80088ba:	4618      	mov	r0, r3
 80088bc:	f7f9 fd6d 	bl	800239a <HAL_HCD_HC_GetXferCount>
 80088c0:	4603      	mov	r3, r0
}
 80088c2:	4618      	mov	r0, r3
 80088c4:	3708      	adds	r7, #8
 80088c6:	46bd      	mov	sp, r7
 80088c8:	bd80      	pop	{r7, pc}

080088ca <USBH_LL_OpenPipe>:
  * @param  mps: Endpoint max packet size
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_OpenPipe(USBH_HandleTypeDef *phost, uint8_t pipe_num, uint8_t epnum,
                                    uint8_t dev_address, uint8_t speed, uint8_t ep_type, uint16_t mps)
{
 80088ca:	b590      	push	{r4, r7, lr}
 80088cc:	b089      	sub	sp, #36	; 0x24
 80088ce:	af04      	add	r7, sp, #16
 80088d0:	6078      	str	r0, [r7, #4]
 80088d2:	4608      	mov	r0, r1
 80088d4:	4611      	mov	r1, r2
 80088d6:	461a      	mov	r2, r3
 80088d8:	4603      	mov	r3, r0
 80088da:	70fb      	strb	r3, [r7, #3]
 80088dc:	460b      	mov	r3, r1
 80088de:	70bb      	strb	r3, [r7, #2]
 80088e0:	4613      	mov	r3, r2
 80088e2:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80088e4:	2300      	movs	r3, #0
 80088e6:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 80088e8:	2300      	movs	r3, #0
 80088ea:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Init(phost->pData, pipe_num, epnum,
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 80088f2:	787c      	ldrb	r4, [r7, #1]
 80088f4:	78ba      	ldrb	r2, [r7, #2]
 80088f6:	78f9      	ldrb	r1, [r7, #3]
 80088f8:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80088fa:	9302      	str	r3, [sp, #8]
 80088fc:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8008900:	9301      	str	r3, [sp, #4]
 8008902:	f897 3020 	ldrb.w	r3, [r7, #32]
 8008906:	9300      	str	r3, [sp, #0]
 8008908:	4623      	mov	r3, r4
 800890a:	f7f9 f9e3 	bl	8001cd4 <HAL_HCD_HC_Init>
 800890e:	4603      	mov	r3, r0
 8008910:	73fb      	strb	r3, [r7, #15]
                               dev_address, speed, ep_type, mps);

  usb_status = USBH_Get_USB_Status(hal_status);
 8008912:	7bfb      	ldrb	r3, [r7, #15]
 8008914:	4618      	mov	r0, r3
 8008916:	f000 f8b1 	bl	8008a7c <USBH_Get_USB_Status>
 800891a:	4603      	mov	r3, r0
 800891c:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800891e:	7bbb      	ldrb	r3, [r7, #14]
}
 8008920:	4618      	mov	r0, r3
 8008922:	3714      	adds	r7, #20
 8008924:	46bd      	mov	sp, r7
 8008926:	bd90      	pop	{r4, r7, pc}

08008928 <USBH_LL_ClosePipe>:
  * @param  phost: Host handle
  * @param  pipe: Pipe index
  * @retval USBH status
  */
USBH_StatusTypeDef USBH_LL_ClosePipe(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 8008928:	b580      	push	{r7, lr}
 800892a:	b084      	sub	sp, #16
 800892c:	af00      	add	r7, sp, #0
 800892e:	6078      	str	r0, [r7, #4]
 8008930:	460b      	mov	r3, r1
 8008932:	70fb      	strb	r3, [r7, #3]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008934:	2300      	movs	r3, #0
 8008936:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008938:	2300      	movs	r3, #0
 800893a:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_Halt(phost->pData, pipe);
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008942:	78fa      	ldrb	r2, [r7, #3]
 8008944:	4611      	mov	r1, r2
 8008946:	4618      	mov	r0, r3
 8008948:	f7f9 fa53 	bl	8001df2 <HAL_HCD_HC_Halt>
 800894c:	4603      	mov	r3, r0
 800894e:	73fb      	strb	r3, [r7, #15]

  usb_status = USBH_Get_USB_Status(hal_status);
 8008950:	7bfb      	ldrb	r3, [r7, #15]
 8008952:	4618      	mov	r0, r3
 8008954:	f000 f892 	bl	8008a7c <USBH_Get_USB_Status>
 8008958:	4603      	mov	r3, r0
 800895a:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 800895c:	7bbb      	ldrb	r3, [r7, #14]
}
 800895e:	4618      	mov	r0, r3
 8008960:	3710      	adds	r7, #16
 8008962:	46bd      	mov	sp, r7
 8008964:	bd80      	pop	{r7, pc}

08008966 <USBH_LL_SubmitURB>:
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SubmitURB(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t direction,
                                     uint8_t ep_type, uint8_t token, uint8_t *pbuff, uint16_t length,
                                     uint8_t do_ping)
{
 8008966:	b590      	push	{r4, r7, lr}
 8008968:	b089      	sub	sp, #36	; 0x24
 800896a:	af04      	add	r7, sp, #16
 800896c:	6078      	str	r0, [r7, #4]
 800896e:	4608      	mov	r0, r1
 8008970:	4611      	mov	r1, r2
 8008972:	461a      	mov	r2, r3
 8008974:	4603      	mov	r3, r0
 8008976:	70fb      	strb	r3, [r7, #3]
 8008978:	460b      	mov	r3, r1
 800897a:	70bb      	strb	r3, [r7, #2]
 800897c:	4613      	mov	r3, r2
 800897e:	707b      	strb	r3, [r7, #1]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8008980:	2300      	movs	r3, #0
 8008982:	73fb      	strb	r3, [r7, #15]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008984:	2300      	movs	r3, #0
 8008986:	73bb      	strb	r3, [r7, #14]

  hal_status = HAL_HCD_HC_SubmitRequest(phost->pData, pipe, direction ,
 8008988:	687b      	ldr	r3, [r7, #4]
 800898a:	f8d3 03d0 	ldr.w	r0, [r3, #976]	; 0x3d0
 800898e:	787c      	ldrb	r4, [r7, #1]
 8008990:	78ba      	ldrb	r2, [r7, #2]
 8008992:	78f9      	ldrb	r1, [r7, #3]
 8008994:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8008998:	9303      	str	r3, [sp, #12]
 800899a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 800899c:	9302      	str	r3, [sp, #8]
 800899e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80089a0:	9301      	str	r3, [sp, #4]
 80089a2:	f897 3020 	ldrb.w	r3, [r7, #32]
 80089a6:	9300      	str	r3, [sp, #0]
 80089a8:	4623      	mov	r3, r4
 80089aa:	f7f9 fa45 	bl	8001e38 <HAL_HCD_HC_SubmitRequest>
 80089ae:	4603      	mov	r3, r0
 80089b0:	73fb      	strb	r3, [r7, #15]
                                        ep_type, token, pbuff, length,
                                        do_ping);

  usb_status = USBH_Get_USB_Status(hal_status);
 80089b2:	7bfb      	ldrb	r3, [r7, #15]
 80089b4:	4618      	mov	r0, r3
 80089b6:	f000 f861 	bl	8008a7c <USBH_Get_USB_Status>
 80089ba:	4603      	mov	r3, r0
 80089bc:	73bb      	strb	r3, [r7, #14]

  return usb_status;
 80089be:	7bbb      	ldrb	r3, [r7, #14]
}
 80089c0:	4618      	mov	r0, r3
 80089c2:	3714      	adds	r7, #20
 80089c4:	46bd      	mov	sp, r7
 80089c6:	bd90      	pop	{r4, r7, pc}

080089c8 <USBH_LL_GetURBState>:
  *            @arg URB_NYET
  *            @arg URB_ERROR
  *            @arg URB_STALL
  */
USBH_URBStateTypeDef USBH_LL_GetURBState(USBH_HandleTypeDef *phost, uint8_t pipe)
{
 80089c8:	b580      	push	{r7, lr}
 80089ca:	b082      	sub	sp, #8
 80089cc:	af00      	add	r7, sp, #0
 80089ce:	6078      	str	r0, [r7, #4]
 80089d0:	460b      	mov	r3, r1
 80089d2:	70fb      	strb	r3, [r7, #3]
  return (USBH_URBStateTypeDef)HAL_HCD_HC_GetURBState (phost->pData, pipe);
 80089d4:	687b      	ldr	r3, [r7, #4]
 80089d6:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 80089da:	78fa      	ldrb	r2, [r7, #3]
 80089dc:	4611      	mov	r1, r2
 80089de:	4618      	mov	r0, r3
 80089e0:	f7f9 fcc7 	bl	8002372 <HAL_HCD_HC_GetURBState>
 80089e4:	4603      	mov	r3, r0
}
 80089e6:	4618      	mov	r0, r3
 80089e8:	3708      	adds	r7, #8
 80089ea:	46bd      	mov	sp, r7
 80089ec:	bd80      	pop	{r7, pc}

080089ee <USBH_LL_DriverVBUS>:
  *           0 : VBUS Inactive
  *           1 : VBUS Active
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_DriverVBUS(USBH_HandleTypeDef *phost, uint8_t state)
{
 80089ee:	b580      	push	{r7, lr}
 80089f0:	b082      	sub	sp, #8
 80089f2:	af00      	add	r7, sp, #0
 80089f4:	6078      	str	r0, [r7, #4]
 80089f6:	460b      	mov	r3, r1
 80089f8:	70fb      	strb	r3, [r7, #3]
  if (phost->id == HOST_FS) {
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	f893 33cc 	ldrb.w	r3, [r3, #972]	; 0x3cc
 8008a00:	2b01      	cmp	r3, #1
 8008a02:	d103      	bne.n	8008a0c <USBH_LL_DriverVBUS+0x1e>
    MX_DriverVbusFS(state);
 8008a04:	78fb      	ldrb	r3, [r7, #3]
 8008a06:	4618      	mov	r0, r3
 8008a08:	f000 f864 	bl	8008ad4 <MX_DriverVbusFS>

  /* USER CODE BEGIN 0 */

  /* USER CODE END 0*/

  HAL_Delay(200);
 8008a0c:	20c8      	movs	r0, #200	; 0xc8
 8008a0e:	f7f8 fe07 	bl	8001620 <HAL_Delay>
  return USBH_OK;
 8008a12:	2300      	movs	r3, #0
}
 8008a14:	4618      	mov	r0, r3
 8008a16:	3708      	adds	r7, #8
 8008a18:	46bd      	mov	sp, r7
 8008a1a:	bd80      	pop	{r7, pc}

08008a1c <USBH_LL_SetToggle>:
  * @param  pipe: Pipe index
  * @param  toggle: toggle (0/1)
  * @retval Status
  */
USBH_StatusTypeDef USBH_LL_SetToggle(USBH_HandleTypeDef *phost, uint8_t pipe, uint8_t toggle)
{
 8008a1c:	b480      	push	{r7}
 8008a1e:	b085      	sub	sp, #20
 8008a20:	af00      	add	r7, sp, #0
 8008a22:	6078      	str	r0, [r7, #4]
 8008a24:	460b      	mov	r3, r1
 8008a26:	70fb      	strb	r3, [r7, #3]
 8008a28:	4613      	mov	r3, r2
 8008a2a:	70bb      	strb	r3, [r7, #2]
  HCD_HandleTypeDef *pHandle;
  pHandle = phost->pData;
 8008a2c:	687b      	ldr	r3, [r7, #4]
 8008a2e:	f8d3 33d0 	ldr.w	r3, [r3, #976]	; 0x3d0
 8008a32:	60fb      	str	r3, [r7, #12]

  if(pHandle->hc[pipe].ep_is_in)
 8008a34:	78fb      	ldrb	r3, [r7, #3]
 8008a36:	68fa      	ldr	r2, [r7, #12]
 8008a38:	212c      	movs	r1, #44	; 0x2c
 8008a3a:	fb01 f303 	mul.w	r3, r1, r3
 8008a3e:	4413      	add	r3, r2
 8008a40:	333b      	adds	r3, #59	; 0x3b
 8008a42:	781b      	ldrb	r3, [r3, #0]
 8008a44:	2b00      	cmp	r3, #0
 8008a46:	d009      	beq.n	8008a5c <USBH_LL_SetToggle+0x40>
  {
    pHandle->hc[pipe].toggle_in = toggle;
 8008a48:	78fb      	ldrb	r3, [r7, #3]
 8008a4a:	68fa      	ldr	r2, [r7, #12]
 8008a4c:	212c      	movs	r1, #44	; 0x2c
 8008a4e:	fb01 f303 	mul.w	r3, r1, r3
 8008a52:	4413      	add	r3, r2
 8008a54:	3354      	adds	r3, #84	; 0x54
 8008a56:	78ba      	ldrb	r2, [r7, #2]
 8008a58:	701a      	strb	r2, [r3, #0]
 8008a5a:	e008      	b.n	8008a6e <USBH_LL_SetToggle+0x52>
  }
  else
  {
    pHandle->hc[pipe].toggle_out = toggle;
 8008a5c:	78fb      	ldrb	r3, [r7, #3]
 8008a5e:	68fa      	ldr	r2, [r7, #12]
 8008a60:	212c      	movs	r1, #44	; 0x2c
 8008a62:	fb01 f303 	mul.w	r3, r1, r3
 8008a66:	4413      	add	r3, r2
 8008a68:	3355      	adds	r3, #85	; 0x55
 8008a6a:	78ba      	ldrb	r2, [r7, #2]
 8008a6c:	701a      	strb	r2, [r3, #0]
  }

  return USBH_OK;
 8008a6e:	2300      	movs	r3, #0
}
 8008a70:	4618      	mov	r0, r3
 8008a72:	3714      	adds	r7, #20
 8008a74:	46bd      	mov	sp, r7
 8008a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a7a:	4770      	bx	lr

08008a7c <USBH_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBH_StatusTypeDef USBH_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b085      	sub	sp, #20
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	4603      	mov	r3, r0
 8008a84:	71fb      	strb	r3, [r7, #7]
  USBH_StatusTypeDef usb_status = USBH_OK;
 8008a86:	2300      	movs	r3, #0
 8008a88:	73fb      	strb	r3, [r7, #15]

  switch (hal_status)
 8008a8a:	79fb      	ldrb	r3, [r7, #7]
 8008a8c:	2b03      	cmp	r3, #3
 8008a8e:	d817      	bhi.n	8008ac0 <USBH_Get_USB_Status+0x44>
 8008a90:	a201      	add	r2, pc, #4	; (adr r2, 8008a98 <USBH_Get_USB_Status+0x1c>)
 8008a92:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008a96:	bf00      	nop
 8008a98:	08008aa9 	.word	0x08008aa9
 8008a9c:	08008aaf 	.word	0x08008aaf
 8008aa0:	08008ab5 	.word	0x08008ab5
 8008aa4:	08008abb 	.word	0x08008abb
  {
    case HAL_OK :
      usb_status = USBH_OK;
 8008aa8:	2300      	movs	r3, #0
 8008aaa:	73fb      	strb	r3, [r7, #15]
    break;
 8008aac:	e00b      	b.n	8008ac6 <USBH_Get_USB_Status+0x4a>
    case HAL_ERROR :
      usb_status = USBH_FAIL;
 8008aae:	2302      	movs	r3, #2
 8008ab0:	73fb      	strb	r3, [r7, #15]
    break;
 8008ab2:	e008      	b.n	8008ac6 <USBH_Get_USB_Status+0x4a>
    case HAL_BUSY :
      usb_status = USBH_BUSY;
 8008ab4:	2301      	movs	r3, #1
 8008ab6:	73fb      	strb	r3, [r7, #15]
    break;
 8008ab8:	e005      	b.n	8008ac6 <USBH_Get_USB_Status+0x4a>
    case HAL_TIMEOUT :
      usb_status = USBH_FAIL;
 8008aba:	2302      	movs	r3, #2
 8008abc:	73fb      	strb	r3, [r7, #15]
    break;
 8008abe:	e002      	b.n	8008ac6 <USBH_Get_USB_Status+0x4a>
    default :
      usb_status = USBH_FAIL;
 8008ac0:	2302      	movs	r3, #2
 8008ac2:	73fb      	strb	r3, [r7, #15]
    break;
 8008ac4:	bf00      	nop
  }
  return usb_status;
 8008ac6:	7bfb      	ldrb	r3, [r7, #15]
}
 8008ac8:	4618      	mov	r0, r3
 8008aca:	3714      	adds	r7, #20
 8008acc:	46bd      	mov	sp, r7
 8008ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ad2:	4770      	bx	lr

08008ad4 <MX_DriverVbusFS>:
  *          This parameter can be one of the these values:
  *           - 1 : VBUS Active
  *           - 0 : VBUS Inactive
  */
void MX_DriverVbusFS(uint8_t state)
{
 8008ad4:	b580      	push	{r7, lr}
 8008ad6:	b084      	sub	sp, #16
 8008ad8:	af00      	add	r7, sp, #0
 8008ada:	4603      	mov	r3, r0
 8008adc:	71fb      	strb	r3, [r7, #7]
  uint8_t data = state;
 8008ade:	79fb      	ldrb	r3, [r7, #7]
 8008ae0:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN PREPARE_GPIO_DATA_VBUS_FS */
  if(state == 0)
 8008ae2:	79fb      	ldrb	r3, [r7, #7]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d102      	bne.n	8008aee <MX_DriverVbusFS+0x1a>
  {
    /* Drive high Charge pump */
    data = GPIO_PIN_RESET;
 8008ae8:	2300      	movs	r3, #0
 8008aea:	73fb      	strb	r3, [r7, #15]
 8008aec:	e001      	b.n	8008af2 <MX_DriverVbusFS+0x1e>
  }
  else
  {
    /* Drive low Charge pump */
    data = GPIO_PIN_SET;
 8008aee:	2301      	movs	r3, #1
 8008af0:	73fb      	strb	r3, [r7, #15]
  }
  /* USER CODE END PREPARE_GPIO_DATA_VBUS_FS */
  HAL_GPIO_WritePin(GPIOC,GPIO_PIN_9,(GPIO_PinState)data);
 8008af2:	7bfb      	ldrb	r3, [r7, #15]
 8008af4:	461a      	mov	r2, r3
 8008af6:	f44f 7100 	mov.w	r1, #512	; 0x200
 8008afa:	4803      	ldr	r0, [pc, #12]	; (8008b08 <MX_DriverVbusFS+0x34>)
 8008afc:	f7f9 f870 	bl	8001be0 <HAL_GPIO_WritePin>
}
 8008b00:	bf00      	nop
 8008b02:	3710      	adds	r7, #16
 8008b04:	46bd      	mov	sp, r7
 8008b06:	bd80      	pop	{r7, pc}
 8008b08:	48000800 	.word	0x48000800

08008b0c <__errno>:
 8008b0c:	4b01      	ldr	r3, [pc, #4]	; (8008b14 <__errno+0x8>)
 8008b0e:	6818      	ldr	r0, [r3, #0]
 8008b10:	4770      	bx	lr
 8008b12:	bf00      	nop
 8008b14:	2000002c 	.word	0x2000002c

08008b18 <__libc_init_array>:
 8008b18:	b570      	push	{r4, r5, r6, lr}
 8008b1a:	4d0d      	ldr	r5, [pc, #52]	; (8008b50 <__libc_init_array+0x38>)
 8008b1c:	4c0d      	ldr	r4, [pc, #52]	; (8008b54 <__libc_init_array+0x3c>)
 8008b1e:	1b64      	subs	r4, r4, r5
 8008b20:	10a4      	asrs	r4, r4, #2
 8008b22:	2600      	movs	r6, #0
 8008b24:	42a6      	cmp	r6, r4
 8008b26:	d109      	bne.n	8008b3c <__libc_init_array+0x24>
 8008b28:	4d0b      	ldr	r5, [pc, #44]	; (8008b58 <__libc_init_array+0x40>)
 8008b2a:	4c0c      	ldr	r4, [pc, #48]	; (8008b5c <__libc_init_array+0x44>)
 8008b2c:	f000 f8f8 	bl	8008d20 <_init>
 8008b30:	1b64      	subs	r4, r4, r5
 8008b32:	10a4      	asrs	r4, r4, #2
 8008b34:	2600      	movs	r6, #0
 8008b36:	42a6      	cmp	r6, r4
 8008b38:	d105      	bne.n	8008b46 <__libc_init_array+0x2e>
 8008b3a:	bd70      	pop	{r4, r5, r6, pc}
 8008b3c:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b40:	4798      	blx	r3
 8008b42:	3601      	adds	r6, #1
 8008b44:	e7ee      	b.n	8008b24 <__libc_init_array+0xc>
 8008b46:	f855 3b04 	ldr.w	r3, [r5], #4
 8008b4a:	4798      	blx	r3
 8008b4c:	3601      	adds	r6, #1
 8008b4e:	e7f2      	b.n	8008b36 <__libc_init_array+0x1e>
 8008b50:	08008d8c 	.word	0x08008d8c
 8008b54:	08008d8c 	.word	0x08008d8c
 8008b58:	08008d8c 	.word	0x08008d8c
 8008b5c:	08008d90 	.word	0x08008d90

08008b60 <malloc>:
 8008b60:	4b02      	ldr	r3, [pc, #8]	; (8008b6c <malloc+0xc>)
 8008b62:	4601      	mov	r1, r0
 8008b64:	6818      	ldr	r0, [r3, #0]
 8008b66:	f000 b863 	b.w	8008c30 <_malloc_r>
 8008b6a:	bf00      	nop
 8008b6c:	2000002c 	.word	0x2000002c

08008b70 <free>:
 8008b70:	4b02      	ldr	r3, [pc, #8]	; (8008b7c <free+0xc>)
 8008b72:	4601      	mov	r1, r0
 8008b74:	6818      	ldr	r0, [r3, #0]
 8008b76:	f000 b80b 	b.w	8008b90 <_free_r>
 8008b7a:	bf00      	nop
 8008b7c:	2000002c 	.word	0x2000002c

08008b80 <memset>:
 8008b80:	4402      	add	r2, r0
 8008b82:	4603      	mov	r3, r0
 8008b84:	4293      	cmp	r3, r2
 8008b86:	d100      	bne.n	8008b8a <memset+0xa>
 8008b88:	4770      	bx	lr
 8008b8a:	f803 1b01 	strb.w	r1, [r3], #1
 8008b8e:	e7f9      	b.n	8008b84 <memset+0x4>

08008b90 <_free_r>:
 8008b90:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8008b92:	2900      	cmp	r1, #0
 8008b94:	d048      	beq.n	8008c28 <_free_r+0x98>
 8008b96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008b9a:	9001      	str	r0, [sp, #4]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	f1a1 0404 	sub.w	r4, r1, #4
 8008ba2:	bfb8      	it	lt
 8008ba4:	18e4      	addlt	r4, r4, r3
 8008ba6:	f000 f8ad 	bl	8008d04 <__malloc_lock>
 8008baa:	4a20      	ldr	r2, [pc, #128]	; (8008c2c <_free_r+0x9c>)
 8008bac:	9801      	ldr	r0, [sp, #4]
 8008bae:	6813      	ldr	r3, [r2, #0]
 8008bb0:	4615      	mov	r5, r2
 8008bb2:	b933      	cbnz	r3, 8008bc2 <_free_r+0x32>
 8008bb4:	6063      	str	r3, [r4, #4]
 8008bb6:	6014      	str	r4, [r2, #0]
 8008bb8:	b003      	add	sp, #12
 8008bba:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8008bbe:	f000 b8a7 	b.w	8008d10 <__malloc_unlock>
 8008bc2:	42a3      	cmp	r3, r4
 8008bc4:	d90b      	bls.n	8008bde <_free_r+0x4e>
 8008bc6:	6821      	ldr	r1, [r4, #0]
 8008bc8:	1862      	adds	r2, r4, r1
 8008bca:	4293      	cmp	r3, r2
 8008bcc:	bf04      	itt	eq
 8008bce:	681a      	ldreq	r2, [r3, #0]
 8008bd0:	685b      	ldreq	r3, [r3, #4]
 8008bd2:	6063      	str	r3, [r4, #4]
 8008bd4:	bf04      	itt	eq
 8008bd6:	1852      	addeq	r2, r2, r1
 8008bd8:	6022      	streq	r2, [r4, #0]
 8008bda:	602c      	str	r4, [r5, #0]
 8008bdc:	e7ec      	b.n	8008bb8 <_free_r+0x28>
 8008bde:	461a      	mov	r2, r3
 8008be0:	685b      	ldr	r3, [r3, #4]
 8008be2:	b10b      	cbz	r3, 8008be8 <_free_r+0x58>
 8008be4:	42a3      	cmp	r3, r4
 8008be6:	d9fa      	bls.n	8008bde <_free_r+0x4e>
 8008be8:	6811      	ldr	r1, [r2, #0]
 8008bea:	1855      	adds	r5, r2, r1
 8008bec:	42a5      	cmp	r5, r4
 8008bee:	d10b      	bne.n	8008c08 <_free_r+0x78>
 8008bf0:	6824      	ldr	r4, [r4, #0]
 8008bf2:	4421      	add	r1, r4
 8008bf4:	1854      	adds	r4, r2, r1
 8008bf6:	42a3      	cmp	r3, r4
 8008bf8:	6011      	str	r1, [r2, #0]
 8008bfa:	d1dd      	bne.n	8008bb8 <_free_r+0x28>
 8008bfc:	681c      	ldr	r4, [r3, #0]
 8008bfe:	685b      	ldr	r3, [r3, #4]
 8008c00:	6053      	str	r3, [r2, #4]
 8008c02:	4421      	add	r1, r4
 8008c04:	6011      	str	r1, [r2, #0]
 8008c06:	e7d7      	b.n	8008bb8 <_free_r+0x28>
 8008c08:	d902      	bls.n	8008c10 <_free_r+0x80>
 8008c0a:	230c      	movs	r3, #12
 8008c0c:	6003      	str	r3, [r0, #0]
 8008c0e:	e7d3      	b.n	8008bb8 <_free_r+0x28>
 8008c10:	6825      	ldr	r5, [r4, #0]
 8008c12:	1961      	adds	r1, r4, r5
 8008c14:	428b      	cmp	r3, r1
 8008c16:	bf04      	itt	eq
 8008c18:	6819      	ldreq	r1, [r3, #0]
 8008c1a:	685b      	ldreq	r3, [r3, #4]
 8008c1c:	6063      	str	r3, [r4, #4]
 8008c1e:	bf04      	itt	eq
 8008c20:	1949      	addeq	r1, r1, r5
 8008c22:	6021      	streq	r1, [r4, #0]
 8008c24:	6054      	str	r4, [r2, #4]
 8008c26:	e7c7      	b.n	8008bb8 <_free_r+0x28>
 8008c28:	b003      	add	sp, #12
 8008c2a:	bd30      	pop	{r4, r5, pc}
 8008c2c:	200000b8 	.word	0x200000b8

08008c30 <_malloc_r>:
 8008c30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c32:	1ccd      	adds	r5, r1, #3
 8008c34:	f025 0503 	bic.w	r5, r5, #3
 8008c38:	3508      	adds	r5, #8
 8008c3a:	2d0c      	cmp	r5, #12
 8008c3c:	bf38      	it	cc
 8008c3e:	250c      	movcc	r5, #12
 8008c40:	2d00      	cmp	r5, #0
 8008c42:	4606      	mov	r6, r0
 8008c44:	db01      	blt.n	8008c4a <_malloc_r+0x1a>
 8008c46:	42a9      	cmp	r1, r5
 8008c48:	d903      	bls.n	8008c52 <_malloc_r+0x22>
 8008c4a:	230c      	movs	r3, #12
 8008c4c:	6033      	str	r3, [r6, #0]
 8008c4e:	2000      	movs	r0, #0
 8008c50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8008c52:	f000 f857 	bl	8008d04 <__malloc_lock>
 8008c56:	4921      	ldr	r1, [pc, #132]	; (8008cdc <_malloc_r+0xac>)
 8008c58:	680a      	ldr	r2, [r1, #0]
 8008c5a:	4614      	mov	r4, r2
 8008c5c:	b99c      	cbnz	r4, 8008c86 <_malloc_r+0x56>
 8008c5e:	4f20      	ldr	r7, [pc, #128]	; (8008ce0 <_malloc_r+0xb0>)
 8008c60:	683b      	ldr	r3, [r7, #0]
 8008c62:	b923      	cbnz	r3, 8008c6e <_malloc_r+0x3e>
 8008c64:	4621      	mov	r1, r4
 8008c66:	4630      	mov	r0, r6
 8008c68:	f000 f83c 	bl	8008ce4 <_sbrk_r>
 8008c6c:	6038      	str	r0, [r7, #0]
 8008c6e:	4629      	mov	r1, r5
 8008c70:	4630      	mov	r0, r6
 8008c72:	f000 f837 	bl	8008ce4 <_sbrk_r>
 8008c76:	1c43      	adds	r3, r0, #1
 8008c78:	d123      	bne.n	8008cc2 <_malloc_r+0x92>
 8008c7a:	230c      	movs	r3, #12
 8008c7c:	6033      	str	r3, [r6, #0]
 8008c7e:	4630      	mov	r0, r6
 8008c80:	f000 f846 	bl	8008d10 <__malloc_unlock>
 8008c84:	e7e3      	b.n	8008c4e <_malloc_r+0x1e>
 8008c86:	6823      	ldr	r3, [r4, #0]
 8008c88:	1b5b      	subs	r3, r3, r5
 8008c8a:	d417      	bmi.n	8008cbc <_malloc_r+0x8c>
 8008c8c:	2b0b      	cmp	r3, #11
 8008c8e:	d903      	bls.n	8008c98 <_malloc_r+0x68>
 8008c90:	6023      	str	r3, [r4, #0]
 8008c92:	441c      	add	r4, r3
 8008c94:	6025      	str	r5, [r4, #0]
 8008c96:	e004      	b.n	8008ca2 <_malloc_r+0x72>
 8008c98:	6863      	ldr	r3, [r4, #4]
 8008c9a:	42a2      	cmp	r2, r4
 8008c9c:	bf0c      	ite	eq
 8008c9e:	600b      	streq	r3, [r1, #0]
 8008ca0:	6053      	strne	r3, [r2, #4]
 8008ca2:	4630      	mov	r0, r6
 8008ca4:	f000 f834 	bl	8008d10 <__malloc_unlock>
 8008ca8:	f104 000b 	add.w	r0, r4, #11
 8008cac:	1d23      	adds	r3, r4, #4
 8008cae:	f020 0007 	bic.w	r0, r0, #7
 8008cb2:	1ac2      	subs	r2, r0, r3
 8008cb4:	d0cc      	beq.n	8008c50 <_malloc_r+0x20>
 8008cb6:	1a1b      	subs	r3, r3, r0
 8008cb8:	50a3      	str	r3, [r4, r2]
 8008cba:	e7c9      	b.n	8008c50 <_malloc_r+0x20>
 8008cbc:	4622      	mov	r2, r4
 8008cbe:	6864      	ldr	r4, [r4, #4]
 8008cc0:	e7cc      	b.n	8008c5c <_malloc_r+0x2c>
 8008cc2:	1cc4      	adds	r4, r0, #3
 8008cc4:	f024 0403 	bic.w	r4, r4, #3
 8008cc8:	42a0      	cmp	r0, r4
 8008cca:	d0e3      	beq.n	8008c94 <_malloc_r+0x64>
 8008ccc:	1a21      	subs	r1, r4, r0
 8008cce:	4630      	mov	r0, r6
 8008cd0:	f000 f808 	bl	8008ce4 <_sbrk_r>
 8008cd4:	3001      	adds	r0, #1
 8008cd6:	d1dd      	bne.n	8008c94 <_malloc_r+0x64>
 8008cd8:	e7cf      	b.n	8008c7a <_malloc_r+0x4a>
 8008cda:	bf00      	nop
 8008cdc:	200000b8 	.word	0x200000b8
 8008ce0:	200000bc 	.word	0x200000bc

08008ce4 <_sbrk_r>:
 8008ce4:	b538      	push	{r3, r4, r5, lr}
 8008ce6:	4d06      	ldr	r5, [pc, #24]	; (8008d00 <_sbrk_r+0x1c>)
 8008ce8:	2300      	movs	r3, #0
 8008cea:	4604      	mov	r4, r0
 8008cec:	4608      	mov	r0, r1
 8008cee:	602b      	str	r3, [r5, #0]
 8008cf0:	f7f8 fba8 	bl	8001444 <_sbrk>
 8008cf4:	1c43      	adds	r3, r0, #1
 8008cf6:	d102      	bne.n	8008cfe <_sbrk_r+0x1a>
 8008cf8:	682b      	ldr	r3, [r5, #0]
 8008cfa:	b103      	cbz	r3, 8008cfe <_sbrk_r+0x1a>
 8008cfc:	6023      	str	r3, [r4, #0]
 8008cfe:	bd38      	pop	{r3, r4, r5, pc}
 8008d00:	20000ab8 	.word	0x20000ab8

08008d04 <__malloc_lock>:
 8008d04:	4801      	ldr	r0, [pc, #4]	; (8008d0c <__malloc_lock+0x8>)
 8008d06:	f000 b809 	b.w	8008d1c <__retarget_lock_acquire_recursive>
 8008d0a:	bf00      	nop
 8008d0c:	20000ac0 	.word	0x20000ac0

08008d10 <__malloc_unlock>:
 8008d10:	4801      	ldr	r0, [pc, #4]	; (8008d18 <__malloc_unlock+0x8>)
 8008d12:	f000 b804 	b.w	8008d1e <__retarget_lock_release_recursive>
 8008d16:	bf00      	nop
 8008d18:	20000ac0 	.word	0x20000ac0

08008d1c <__retarget_lock_acquire_recursive>:
 8008d1c:	4770      	bx	lr

08008d1e <__retarget_lock_release_recursive>:
 8008d1e:	4770      	bx	lr

08008d20 <_init>:
 8008d20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d22:	bf00      	nop
 8008d24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d26:	bc08      	pop	{r3}
 8008d28:	469e      	mov	lr, r3
 8008d2a:	4770      	bx	lr

08008d2c <_fini>:
 8008d2c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008d2e:	bf00      	nop
 8008d30:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008d32:	bc08      	pop	{r3}
 8008d34:	469e      	mov	lr, r3
 8008d36:	4770      	bx	lr
